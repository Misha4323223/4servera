/**
 * –¢–µ—Å—Ç Adobe Illustrator –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
 */

const adobeTracer = require('./adobe-illustrator-tracer.cjs');
const fs = require('fs');
const https = require('https');

async function downloadImage(url) {
  return new Promise((resolve, reject) => {
    https.get(url, (response) => {
      const chunks = [];
      response.on('data', chunk => chunks.push(chunk));
      response.on('end', () => resolve(Buffer.concat(chunks)));
      response.on('error', reject);
    }).on('error', reject);
  });
}

async function testWithRealImage() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Adobe –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º...');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const imageUrl = 'https://image.pollinations.ai/prompt/simple-red-dragon-silhouette?width=400&height=400';
    console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    
    const imageBuffer = await downloadImage(imageUrl);
    console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${imageBuffer.length} –±–∞–π—Ç`);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º Adobe –∞–ª–≥–æ—Ä–∏—Ç–º
    const result = await adobeTracer.adobeImageTrace(imageBuffer, { maxColors: 5 });
    
    if (result.success) {
      console.log('\nüéâ –£–°–ü–ï–•! Adobe Illustrator Trace —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ü–≤–µ—Ç–æ–≤: ${result.colorsUsed}`);
      console.log(`üìè –†–∞–∑–º–µ—Ä SVG: ${result.svgContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—É—Ä—ã
      const pathMatches = result.svgContent.match(/<path[^>]*>/g) || [];
      console.log(`üéØ –°–æ–∑–¥–∞–Ω–æ –∫–æ–Ω—Ç—É—Ä–æ–≤: ${pathMatches.length}`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞
      const colorMatches = result.svgContent.match(/fill="[^"]*"/g) || [];
      const uniqueColors = [...new Set(colorMatches)];
      console.log(`üé® –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${uniqueColors.length}`);
      
      uniqueColors.forEach((color, index) => {
        console.log(`  ${index + 1}. ${color}`);
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const filename = `test-adobe-result-${Date.now()}.svg`;
      fs.writeFileSync(filename, result.svgContent);
      console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
      
      console.log('\n‚úÖ –ö–û–ù–¢–£–†–´ –°–û–ó–î–ê–ù–´ –ö–ê–ö –í ADOBE ILLUSTRATOR');
      
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞:', result.error);
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

testWithRealImage();