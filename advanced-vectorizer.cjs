/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä - –±–∞–∑–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ SVG
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Event Loop
 */

// –¢–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
const path = require('path');
const fs = require('fs').promises;
const crypto = require('crypto');

// Adobe Illustrator Image Trace - —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ CC 2024
const ADOBE_SILKSCREEN_PRESET = {
  name: 'Adobe Illustrator Limited Color',
  description: 'Adobe Illustrator CC 2024 Image Trace - Limited Color preset (3-30 colors)',
  settings: {
    // === ADOBE IMAGE TRACE –ù–ê–°–¢–†–û–ô–ö–ò ===
    mode: 'limitedColor', // Limited Color mode (Adobe default)
    maxColors: 6, // Adobe Limited Color: 3-30 colors, default 6
    colorReduction: 'automatic', // Automatic color reduction
    
    // === ADOBE PATHS SETTINGS ===
    pathFitting: 2, // Fitting: 2px (Adobe default for balanced quality)
    minimumArea: 10, // Noise: 10 square pixels (Adobe default)
    cornerThreshold: 75, // Corners: 75% (Adobe default angle detection)
    
    // === ADOBE COLORS SETTINGS ===
    method: 'abutting', // Method: Abutting (—Å–æ–∑–¥–∞–µ—Ç —Å–º–µ–∂–Ω—ã–µ –ø—É—Ç–∏)
    palette: 'limited', // Limited palette mode  
    fills: true, // Create Fills: ON (Adobe default)
    strokes: false, // Create Strokes: OFF (Adobe default)
    
    // === ADOBE ADVANCED SETTINGS ===
    snapCurvesToLines: false, // Snap Curves To Lines: OFF
    ignoreWhite: true, // Ignore White: ON (Adobe default)
    viewMode: 'tracing', // View: Tracing Result
    
    // === ADOBE TRACE ENGINE –ü–ê–†–ê–ú–ï–¢–†–´ ===
    // Adobe –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Potrace —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    threshold: 'auto', // Auto threshold (Adobe –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç)
    turdSize: 10, // Minimum area = Noise setting
    turnPolicy: 'black', // Adobe turn policy for corners
    alphaMax: 1.0, // Corner angle threshold (1.0 —Ä–∞–¥–∏–∞–Ω = 57.3¬∞)
    optCurve: true, // Curve optimization (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ –≤ Adobe)
    optTolerance: 0.2, // Path fitting tolerance
    
    // === ADOBE PREPROCESSING ===
    resampleDPI: 300, // Adobe resamples to 300 DPI for quality
    smoothing: 'medium', // Medium smoothing (Adobe default)
    colorSeparation: 'strict', // Strict color separation
    
    // === ADOBE OUTPUT SETTINGS ===
    maxSize: 1024, // Adobe processing limit for performance
    outputDPI: 300, // 300 DPI for print quality
    precision: 'high', // High precision paths
    optimize: true // Optimize SVG output
  }
};

// –¢–æ–ª—å–∫–æ SVG —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
const OUTPUT_FORMATS = {
  svg: {
    extension: '.svg',
    mimeType: 'image/svg+xml',
    description: '–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞'
  }
};

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –≤—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ
const CONTENT_TYPES = {
  simple: {
    name: '–ü—Ä–æ—Å—Ç–æ–π',
    optimizations: {
      threshold: 128,
      maxColors: 5
    }
  }
};

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
const outputDir = path.join(__dirname, 'output', 'vectorizer');

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
async function ensureDirectories() {
  try {
    await fs.mkdir(outputDir, { recursive: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:', error);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
function generateId() {
  return crypto.randomBytes(8).toString('hex');
}

/**
 * –≠–¢–ê–ü 1: –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ê - Adobe Illustrator –∞–ª–≥–æ—Ä–∏—Ç–º
 */

/**
 * analyzeImageType() - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (Adobe –º–µ—Ç–æ–¥)
 */
async function analyzeImageType(imageBuffer) {
  console.log('üîç –≠–¢–ê–ü 1.1: Adobe analyzeImageType - –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
  
  try {
    const sharp = require('sharp');
    const { data, info } = await sharp(imageBuffer)
      .raw()
      .toBuffer({ resolveWithObject: true });
    
    // Adobe –∞–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    const colorMap = new Map();
    let totalPixels = 0;
    
    for (let i = 0; i < data.length; i += info.channels) {
      const r = data[i];
      const g = data[i + 1]; 
      const b = data[i + 2];
      
      // Adobe –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (32 —É—Ä–æ–≤–Ω—è)
      const quantR = Math.round(r / 32) * 32;
      const quantG = Math.round(g / 32) * 32;
      const quantB = Math.round(b / 32) * 32;
      
      const colorKey = `${quantR},${quantG},${quantB}`;
      colorMap.set(colorKey, (colorMap.get(colorKey) || 0) + 1);
      totalPixels++;
    }
    
    const uniqueColors = colorMap.size;
    const colorComplexity = uniqueColors / totalPixels;
    
    // Adobe –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
    const grayData = await sharp(imageBuffer)
      .grayscale()
      .raw()
      .toBuffer();
    
    let totalContrast = 0;
    for (let i = 0; i < grayData.length - 1; i++) {
      totalContrast += Math.abs(grayData[i] - grayData[i + 1]);
    }
    const avgContrast = totalContrast / grayData.length;
    
    // Adobe –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let imageType = 'AUTO';
    let recommendedSettings = { ...ADOBE_SILKSCREEN_PRESET.settings };
    
    if (uniqueColors <= 3) {
      imageType = 'SIMPLE_LOGO';
      recommendedSettings.maxColors = 3;
      recommendedSettings.cornerThreshold = 100;
    } else if (uniqueColors <= 10 && avgContrast > 50) {
      imageType = 'LOGO';  
      recommendedSettings.maxColors = 5;
      recommendedSettings.cornerThreshold = 75;
    } else if (avgContrast < 20) {
      imageType = 'PHOTO';
      recommendedSettings.maxColors = 6;
      recommendedSettings.pathFitting = 3;
    } else if (colorComplexity > 0.5) {
      imageType = 'COMPLEX_PHOTO';
      recommendedSettings.maxColors = 8;
      recommendedSettings.pathFitting = 4;
    } else {
      imageType = 'ILLUSTRATION';
      recommendedSettings.maxColors = 5;
    }
    
    console.log(`   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: ${imageType}`);
    console.log(`   üé® –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${uniqueColors}`);
    console.log(`   üìà –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å: ${avgContrast.toFixed(1)}`);
    console.log(`   üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${recommendedSettings.maxColors}`);
    
    return {
      imageType,
      uniqueColors,
      avgContrast,
      colorComplexity,
      recommendedSettings,
      dimensions: { width: info.width, height: info.height }
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ analyzeImageType:', error);
    return {
      imageType: 'AUTO',
      uniqueColors: 5,
      avgContrast: 50,
      colorComplexity: 0.3,
      recommendedSettings: ADOBE_SILKSCREEN_PRESET.settings,
      dimensions: { width: 400, height: 400 }
    };
  }
}

/**
 * preprocessColors() - –¶–≤–µ—Ç–æ–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è (Adobe –º–µ—Ç–æ–¥)
 */
async function preprocessColors(imageBuffer, settings) {
  console.log('üé® –≠–¢–ê–ü 1.2: Adobe preprocessColors - –¶–≤–µ—Ç–æ–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è...');
  
  try {
    const sharp = require('sharp');
    let processedBuffer = imageBuffer;
    
    // Adobe –≥–∞–º–º–∞-–∫–æ—Ä—Ä–µ–∫—Ü–∏—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç Adobe RGB)
    processedBuffer = await sharp(processedBuffer)
      .gamma(2.2)
      .toBuffer();
    
    // Adobe —Ü–≤–µ—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Ä–µ–∂–∏–º—É
    if (settings.mode === 'blackwhite') {
      processedBuffer = await sharp(processedBuffer)
        .grayscale()
        .normalize()
        .toBuffer();
      console.log('   ‚ö´ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —á–µ—Ä–Ω–æ-–±–µ–ª–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞');
    } else if (settings.mode === 'grayscale') {
      processedBuffer = await sharp(processedBuffer)
        .grayscale()
        .modulate({
          brightness: 1.1,
          saturation: 0,
          hue: 0
        })
        .toBuffer();
      console.log('   üîò –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –æ—Ç—Ç–µ–Ω–∫–∞—Ö —Å–µ—Ä–æ–≥–æ');
    } else {
      // Adobe —Ü–≤–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (Limited Color mode)
      processedBuffer = await sharp(processedBuffer)
        .modulate({
          brightness: 1.05,
          saturation: 1.1,
          hue: 0
        })
        .toBuffer();
      console.log('   üåà –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ü–≤–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Adobe Limited Color');
    }
    
    // Adobe Edge-preserving smoothing –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if (settings.smoothing === 'medium') {
      processedBuffer = await sharp(processedBuffer)
        .blur(0.3) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ
        .sharpen(1, 1, 0.5) // –£—Å–∏–ª–µ–Ω–∏–µ –∫—Ä–∞–µ–≤
        .toBuffer();
      console.log('   üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–æ Adobe edge-preserving smoothing');
    }
    
    console.log('   ‚úÖ –¶–≤–µ—Ç–æ–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return processedBuffer;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ preprocessColors:', error);
    return imageBuffer;
  }
}

/**
 * resampleImage() - –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ (Adobe –º–µ—Ç–æ–¥)
 */
async function resampleImage(imageBuffer, settings, analysis) {
  console.log('üìè –≠–¢–ê–ü 1.3: Adobe resampleImage - –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ...');
  
  try {
    const sharp = require('sharp');
    const metadata = await sharp(imageBuffer).metadata();
    
    // Adobe –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    let targetWidth = metadata.width;
    let targetHeight = metadata.height;
    const maxSize = settings.maxSize || 1024;
    
    // Adobe –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (Math.max(targetWidth, targetHeight) > maxSize) {
      const scale = maxSize / Math.max(targetWidth, targetHeight);
      targetWidth = Math.round(targetWidth * scale);
      targetHeight = Math.round(targetHeight * scale);
      console.log(`   üìê –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ: ${metadata.width}x${metadata.height} ‚Üí ${targetWidth}x${targetHeight}`);
    } else {
      console.log(`   üìê –†–∞–∑–º–µ—Ä –æ–ø—Ç–∏–º–∞–ª–µ–Ω: ${targetWidth}x${targetHeight}`);
    }
    
    // Adobe Lanczos –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
    const resampledBuffer = await sharp(imageBuffer)
      .resize(targetWidth, targetHeight, {
        kernel: sharp.kernel.lanczos3,
        fit: 'fill'
      })
      .toBuffer();
    
    console.log(`   ‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${targetWidth}x${targetHeight}`);
    
    return {
      buffer: resampledBuffer,
      width: targetWidth,
      height: targetHeight,
      originalWidth: metadata.width,
      originalHeight: metadata.height
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ resampleImage:', error);
    const metadata = await sharp(imageBuffer).metadata();
    return {
      buffer: imageBuffer,
      width: metadata.width,
      height: metadata.height,
      originalWidth: metadata.width,
      originalHeight: metadata.height
    };
  }
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–µ–∑ —Ç—è–∂–µ–ª—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
 */
function detectContentType(imageBuffer) {
  // –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  const size = imageBuffer.length;
  if (size < 50000) return 'simple';
  return 'simple'; // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–∏–ø
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –ø–µ—á–∞—Ç–∏
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç–∞ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
 */
function optimizeColorsForSilkscreen(colors, settings) {
  console.log(`üñ®Ô∏è –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ ${colors.length} —Ü–≤–µ—Ç–æ–≤`);
  
  if (!colors || colors.length === 0) return [];
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –ø–æ —è—Ä–∫–æ—Å—Ç–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  const sortedColors = colors.slice().sort((a, b) => {
    const brightnessA = a.r * 0.299 + a.g * 0.587 + a.b * 0.114;
    const brightnessB = b.r * 0.299 + b.g * 0.587 + b.b * 0.114;
    return brightnessA - brightnessB;
  });
  
  const optimizedColors = [];
  const minColorDistance = 80; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏
  
  for (let i = 0; i < sortedColors.length && optimizedColors.length < settings.maxColors; i++) {
    const candidate = sortedColors[i];
    let isDistinct = true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    for (const existing of optimizedColors) {
      const distance = Math.sqrt(
        Math.pow(candidate.r - existing.r, 2) +
        Math.pow(candidate.g - existing.g, 2) +
        Math.pow(candidate.b - existing.b, 2)
      );
      
      if (distance < minColorDistance) {
        isDistinct = false;
        break;
      }
    }
    
    if (isDistinct) {
      optimizedColors.push(candidate);
      console.log(`‚úÖ –¶–≤–µ—Ç ${candidate.hex} –¥–æ–±–∞–≤–ª–µ–Ω (—è—Ä–∫–æ—Å—Ç—å: ${(candidate.r * 0.299 + candidate.g * 0.587 + candidate.b * 0.114).toFixed(0)})`);
    } else {
      console.log(`‚ùå –¶–≤–µ—Ç ${candidate.hex} —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π`);
    }
  }
  
  // –ï—Å–ª–∏ —Ü–≤–µ—Ç–æ–≤ –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ
  if (optimizedColors.length < Math.min(3, settings.maxColors)) {
    console.log(`‚ö†Ô∏è –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–µ—á–∞—Ç–∏`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–Ω—ã–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const hasBlack = optimizedColors.some(c => c.r + c.g + c.b < 100);
    if (!hasBlack && optimizedColors.length < settings.maxColors) {
      optimizedColors.push({
        r: 0, g: 0, b: 0,
        hex: '#000000',
        percentage: '5.0'
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–ª—ã–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const hasWhite = optimizedColors.some(c => c.r + c.g + c.b > 650);
    if (!hasWhite && optimizedColors.length < settings.maxColors) {
      optimizedColors.push({
        r: 255, g: 255, b: 255,
        hex: '#ffffff',
        percentage: '5.0'
      });
    }
  }
  
  console.log(`üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏: ${optimizedColors.length} —Ü–≤–µ—Ç–æ–≤`);
  return optimizedColors;
}

/**
 * Adobe Illustrator-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
 */
async function silkscreenVectorize(imageBuffer, options = {}) {
  const { outputFormat = 'svg', maxFileSize = 20 * 1024 * 1024 } = options;
  
  try {
    console.log(`üé® Adobe Illustrator Image Trace —Ä–µ–∂–∏–º (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞)`);
    
    const settings = { ...ADOBE_SILKSCREEN_PRESET.settings };
    
    // Adobe-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    const processedBuffer = await preprocessImageForAdobe(imageBuffer, settings);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –∫–∞–∫ –≤ Adobe Illustrator
    const optimalThreshold = await calculateAdobeThreshold(processedBuffer);
    settings.threshold = optimalThreshold;
    console.log(`üéØ Adobe –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥: ${optimalThreshold}`);
    
    // Limited Color —Ä–µ–∂–∏–º - —Ç–æ—á–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log(`üé® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–ó–û–í: createAdobeLimitedColorSVG`);
    console.log(`üìã Settings –¥–ª—è Adobe:`, JSON.stringify(settings));
    
    const svgContent = await createAdobeLimitedColorSVG(processedBuffer, settings);
    
    console.log(`üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç SVG –¥–ª–∏–Ω–∞: ${svgContent ? svgContent.length : 0}`);
    console.log(`üîç SVG –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:`, svgContent ? svgContent.substring(0, 200) : '–ü–£–°–¢–û');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 20–ú–ë)
    const svgSize = Buffer.byteLength(svgContent, 'utf8');
    if (svgSize > maxFileSize) {
      console.log(`‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${(svgSize / 1024 / 1024).toFixed(2)}–ú–ë), –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è...`);
      const optimizedSVG = await optimizeSVGSize(svgContent, maxFileSize);
      return {
        success: true,
        svgContent: optimizedSVG,
        settings,
        quality: ADOBE_SILKSCREEN_PRESET.name,
        fileSize: Buffer.byteLength(optimizedSVG, 'utf8'),
        optimized: true,
        silkscreenMode: true
      };
    }
    
    return {
      success: true,
      svgContent,
      settings,
      quality: ADOBE_SILKSCREEN_PRESET.name,
      fileSize: svgSize,
      optimized: false,
      silkscreenMode: true
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏:', error);
    throw new Error(`–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
  }
}

/**
 * –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
 */
async function preprocessImageForSilkscreen(imageBuffer, settings) {
  const sharp = require('sharp');
  
  console.log('üîß –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (Adobe Illustrator Style)...');
  
  try {
    const metadata = await sharp(imageBuffer).metadata();
    let processedBuffer = imageBuffer;
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–∫ –≤ AI
    if (settings.maxSize) {
      const scale = Math.min(settings.maxSize / metadata.width, settings.maxSize / metadata.height);
      if (scale < 1) {
        processedBuffer = await sharp(processedBuffer)
          .resize(Math.round(metadata.width * scale), Math.round(metadata.height * scale), {
            kernel: sharp.kernel.lanczos3,
            fit: 'inside'
          })
          .toBuffer();
      }
    }
    
    // –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –≤ Adobe Illustrator
    if (settings.preprocess) {
      processedBuffer = await sharp(processedBuffer)
        .sharpen(1.5, 1.0, 2.0) // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
        .normalise() // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        .modulate({ 
          brightness: 1.1,
          saturation: 1.2,
          hue: 0
        })
        .removeAlpha() // –£–±–∏—Ä–∞–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
        .toFormat('png')
        .toBuffer();
    }
    
    return processedBuffer;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    return imageBuffer;
  }
}

/**
 * –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –∫–∞–∫ –≤ Adobe Illustrator (–¥–æ 5 —Ü–≤–µ—Ç–æ–≤ –º–∞–∫—Å–∏–º—É–º)
 */
async function quantizeColorsAI(imageBuffer, maxColors = 5) {
  const sharp = require('sharp');
  
  console.log(`üé® –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ (Adobe Illustrator): –º–∞–∫—Å–∏–º—É–º ${maxColors} —Ü–≤–µ—Ç–æ–≤`);
  
  try {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ –∫–∞–∫ –≤ Adobe Illustrator
    const quantizedBuffer = await sharp(imageBuffer)
      .png({
        palette: true,
        colors: Math.min(maxColors, 5), // –ñ–µ—Å—Ç–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 5 —Ü–≤–µ—Ç–æ–≤
        dither: 0.5 // –õ–µ–≥–∫–∏–π –¥–∏–∑–µ—Ä–∏–Ω–≥ –∫–∞–∫ –≤ AI
      })
      .toBuffer();
    
    return quantizedBuffer;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤:', error);
    return imageBuffer;
  }
}

/**
 * –≠–¢–ê–ü 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ SVG –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
async function createSilkscreenSVG(imageBuffer, settings) {
  const sharp = require('sharp');
  const potrace = require('potrace');
  
  console.log('üîç –≠–¢–ê–ü 3: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ SVG –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏...');
  
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const dominantColors = await extractDominantColors(imageBuffer, settings.maxColors);
    
    if (!dominantColors || dominantColors.length === 0) {
      console.log('‚ùå –≠–¢–ê–ü 3: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–≤–µ—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–æ–º—É —Ä–µ–∂–∏–º—É');
      return createMonochromeBackup(imageBuffer, settings);
    }
    
    console.log(`üé® –≠–¢–ê–ü 3: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${dominantColors.length} —Ü–≤–µ—Ç–æ–≤`);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
    const optimizedColors = optimizeColorsForSilkscreen(dominantColors, settings);
    console.log(`üñ®Ô∏è –≠–¢–ê–ü 3: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏: ${optimizedColors.length} —Ü–≤–µ—Ç–æ–≤`);
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–æ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
    const colorLayers = [];
    
    for (let i = 0; i < optimizedColors.length; i++) {
      const color = optimizedColors[i];
      console.log(`\nüîç –≠–¢–ê–ü 3.${i + 1}: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–≤–µ—Ç ${color.hex} (${color.percentage}%)`);
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
      const colorMask = await createAdobeColorMask(imageBuffer, color, settings);
      
      if (colorMask) {
        console.log(`üéØ –≠–¢–ê–ü 3.${i + 1}: –ú–∞—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...`);
        
        // –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º –º–∞—Å–∫—É —á–µ—Ä–µ–∑ potrace
        const layerSVG = await vectorizeColorLayer(colorMask, color, settings);
        if (layerSVG) {
          const paths = extractSVGPaths(layerSVG);
          console.log(`‚úÖ –≠–¢–ê–ü 3.${i + 1}: –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∏–∑–≤–ª–µ—á–µ–Ω–æ ${paths.length} –ø—É—Ç–µ–π`);
          
          colorLayers.push({
            color: color.hex,
            svg: layerSVG,
            paths: paths,
            originalPercentage: color.percentage
          });
        } else {
          console.log(`‚ùå –≠–¢–ê–ü 3.${i + 1}: –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–∞ ${color.hex}`);
        }
      } else {
        console.log(`‚ö†Ô∏è –≠–¢–ê–ü 3.${i + 1}: –ú–∞—Å–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ü–≤–µ—Ç–∞ ${color.hex}`);
      }
    }
    
    console.log(`\nüìä –≠–¢–ê–ü 3: –ò—Ç–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–≤–µ—Ç–æ–≤:`);
    console.log(`   - –ò—Å—Ö–æ–¥–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${dominantColors.length}`);
    console.log(`   - –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${colorLayers.length}`);
    
    if (colorLayers.length === 0) {
      console.log('‚ùå –≠–¢–ê–ü 3: –ù–∏ –æ–¥–∏–Ω —Ü–≤–µ—Ç –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–æ–º—É —Ä–µ–∂–∏–º—É');
      return createMonochromeBackup(imageBuffer, settings);
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ü–≤–µ—Ç–Ω—ã–µ —Å–ª–æ–∏ –≤ –æ–¥–∏–Ω SVG
    console.log('üîó –≠–¢–ê–ü 3: –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ü–≤–µ—Ç–Ω—ã–µ —Å–ª–æ–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π SVG...');
    const finalSVG = await combineColorLayers(colorLayers, imageBuffer);
    
    console.log(`‚úÖ –≠–¢–ê–ü 3 –ó–ê–í–ï–†–®–ï–ù: –¶–≤–µ—Ç–Ω–æ–π SVG —Å–æ–∑–¥–∞–Ω —Å ${colorLayers.length} –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–ª–æ—è–º–∏`);
    return finalSVG;
    
  } catch (error) {
    console.error('‚ùå –≠–¢–ê–ü 3 –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    console.log('üîÑ –≠–¢–ê–ü 3: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–æ–º—É —Ä–µ–∂–∏–º—É');
    return createMonochromeBackup(imageBuffer, settings);
  }
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤ –∏–∑ –ò–°–•–û–î–ù–û–ì–û –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –¥–≤–æ–π–Ω–æ–π –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏)
 */
async function extractDominantColors(imageBuffer, maxColors = 5) {
  const sharp = require('sharp');
  
  try {
    console.log(`üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ${maxColors} –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤`);
    
    // –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const originalMeta = await sharp(imageBuffer).metadata();
    console.log(`üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - ${originalMeta.width}x${originalMeta.height}, –∫–∞–Ω–∞–ª—ã: ${originalMeta.channels}, —Ñ–æ—Ä–º–∞—Ç: ${originalMeta.format}`);
    console.log(`üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: ${imageBuffer.length} –±–∞–π—Ç`);
    
    // –†–∞–±–æ—Ç–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const { data, info } = await sharp(imageBuffer)
      .resize(300, 300, { fit: 'inside' })
      .raw()
      .toBuffer({ resolveWithObject: true });
    
    console.log(`üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${info.width}x${info.height}, –∫–∞–Ω–∞–ª–æ–≤: ${info.channels}`);
    
    const colorMap = new Map();
    let totalPixels = 0;
    
    // –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —Ü–≤–µ—Ç–∞ –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    for (let i = 0; i < data.length; i += info.channels) {
      const r = data[i];
      const g = data[i + 1];
      const b = data[i + 2];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏
      if (info.channels === 4 && data[i + 3] < 10) continue;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Adobe Limited Color –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–µ—Ç–∫–æ—Å—Ç–∏
      const quantR = Math.round(r / 51) * 51; // 5 —É—Ä–æ–≤–Ω–µ–π (0, 51, 102, 153, 204, 255)
      const quantG = Math.round(g / 51) * 51;
      const quantB = Math.round(b / 51) * 51;
      
      const colorKey = `${quantR},${quantG},${quantB}`;
      const count = colorMap.get(colorKey) || 0;
      colorMap.set(colorKey, count + 1);
      totalPixels++;
    }
    
    console.log(`üé® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${colorMap.size}, –≤—Å–µ–≥–æ –ø–∏–∫—Å–µ–ª–µ–π: ${totalPixels}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const topRawColors = Array.from(colorMap.entries()).sort((a, b) => b[1] - a[1]).slice(0, 10);
    console.log(`üìã –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–æ–ø-10 —Å—ã—Ä—ã—Ö —Ü–≤–µ—Ç–æ–≤:`);
    topRawColors.forEach(([colorKey, count], index) => {
      const [r, g, b] = colorKey.split(',').map(Number);
      const hex = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
      const percentage = ((count / totalPixels) * 100).toFixed(1);
      console.log(`   ${index + 1}. ${hex} (RGB: ${r},${g},${b}) - ${count} –ø–∏–∫—Å–µ–ª–µ–π (${percentage}%)`);
    });
    
    // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–±–æ—Ä —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
    const allColors = Array.from(colorMap.entries())
      .sort((a, b) => b[1] - a[1])
      .map(([colorKey, count]) => {
        const [r, g, b] = colorKey.split(',').map(Number);
        const percentage = ((count / totalPixels) * 100).toFixed(1);
        return {
          r, g, b,
          hex: `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`,
          count,
          percentage: parseFloat(percentage),
          brightness: (r * 0.299 + g * 0.587 + b * 0.114), // –Ø—Ä–∫–æ—Å—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          saturation: Math.max(r, g, b) - Math.min(r, g, b) // –ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
        };
      });

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Adobe-—Å—Ç–∏–ª—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ç–∫–∏—Ö –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    const filteredColors = [];
    const minColorDistance = 120; // –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–µ—Ç–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
    const minCoverage = 0.5; // –£–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –¥–µ—Ç–∞–ª–µ–π

    for (const color of allColors) {
      if (filteredColors.length >= maxColors) break;
      if (color.percentage < minCoverage) continue;

      // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—á–µ–Ω—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ (—á–µ—Ä–Ω—ã–π/–±–µ–ª—ã–π)
      const isExtremeColor = (color.r + color.g + color.b < 30) || (color.r + color.g + color.b > 720);
      
      if (isExtremeColor) {
        // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –∫—Ä–∞–π–Ω–∏–µ —Ü–≤–µ—Ç–∞ (—á–µ—Ä–Ω—ã–π/–±–µ–ª—ã–π)
        filteredColors.push(color);
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–∏—è –æ—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
      const isDistinct = filteredColors.every(existingColor => {
        const distance = Math.sqrt(
          Math.pow(color.r - existingColor.r, 2) +
          Math.pow(color.g - existingColor.g, 2) +
          Math.pow(color.b - existingColor.b, 2)
        );
        return distance >= minColorDistance;
      });

      if (isDistinct) {
        filteredColors.push(color);
      }
    }

    // –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ
    if (filteredColors.length < 2) {
      const darkColor = { r: 0, g: 0, b: 0, hex: '#000000', count: 1, percentage: 25.0 };
      const lightColor = { r: 255, g: 255, b: 255, hex: '#ffffff', count: 1, percentage: 25.0 };
      
      if (filteredColors.length === 0) {
        filteredColors.push(darkColor, lightColor);
      } else if (filteredColors[0].brightness > 128) {
        filteredColors.push(darkColor);
      } else {
        filteredColors.push(lightColor);
      }
    }

    const sortedColors = filteredColors;
    
    console.log(`‚úÖ –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù: –ò–∑–≤–ª–µ—á–µ–Ω–æ ${sortedColors.length} –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤:`);
    sortedColors.forEach((color, i) => {
      console.log(`  ${i + 1}. ${color.hex} (${color.percentage}%)`);
    });
    
    return sortedColors;
    
  } catch (error) {
    console.error('‚ùå –≠–¢–ê–ü 1 –û–®–ò–ë–ö–ê - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
    return [
      { r: 0, g: 0, b: 0, hex: '#000000', count: 1, percentage: '50.0' },
      { r: 255, g: 255, b: 255, hex: '#ffffff', count: 1, percentage: '50.0' }
    ];
  }
}

/**
 * –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤—ã—Ö –º–∞—Å–æ–∫ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –¥–æ–ø—É—Å–∫–æ–º
 */
async function createColorMask(imageBuffer, targetColor, settings) {
  const sharp = require('sharp');
  
  try {
    console.log(`üîç –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è —Ü–≤–µ—Ç–∞ ${targetColor.hex} (${targetColor.percentage}% –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)`);
    
    const { data, info } = await sharp(imageBuffer)
      .raw()
      .toBuffer({ resolveWithObject: true });
    
    const maskData = Buffer.alloc(info.width * info.height);
    
    // Adobe —Ü–≤–µ—Ç–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –¥–æ–ø—É—Å–∫–æ–º
    const baseTolerance = 60; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ–ø—É—Å–∫ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤—Å–µ—Ö –æ—Ç—Ç–µ–Ω–∫–æ–≤ —Ü–≤–µ—Ç–∞
    const adaptiveTolerance = baseTolerance;
    
    console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–æ–ø—É—Å–∫: ${adaptiveTolerance}`);
    
    let pixelCount = 0;
    let minDistance = Infinity;
    let maxDistance = 0;
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É —Å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
    for (let i = 0; i < data.length; i += info.channels) {
      const r = data[i];
      const g = data[i + 1];
      const b = data[i + 2];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏
      if (info.channels === 4 && data[i + 3] < 10) continue;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º—è–≥–∫—É—é –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—é (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Ü–≤–µ—Ç–æ–≤)
      const quantR = Math.round(r / 4) * 4;
      const quantG = Math.round(g / 4) * 4;
      const quantB = Math.round(b / 4) * 4;
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞
      const deltaR = quantR - targetColor.r;
      const deltaG = quantG - targetColor.g;
      const deltaB = quantB - targetColor.b;
      
      // –ü–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–±–æ–ª–µ–µ –±–ª–∏–∑–∫–æ–µ –∫ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º—É –≤–æ—Å–ø—Ä–∏—è—Ç–∏—é)
      const colorDistance = Math.sqrt(
        2 * deltaR * deltaR +
        4 * deltaG * deltaG +
        3 * deltaB * deltaB
      );
      
      minDistance = Math.min(minDistance, colorDistance);
      maxDistance = Math.max(maxDistance, colorDistance);
      
      const pixelIndex = Math.floor(i / info.channels);
      
      if (colorDistance <= adaptiveTolerance) {
        maskData[pixelIndex] = 255; // –ë–µ–ª—ã–π –ø–∏–∫—Å–µ–ª—å (–æ–±–ª–∞—Å—Ç—å —Ü–≤–µ—Ç–∞)
        pixelCount++;
      } else {
        maskData[pixelIndex] = 0; // –ß–µ—Ä–Ω—ã–π –ø–∏–∫—Å–µ–ª—å (—Ñ–æ–Ω)
      }
    }
    
    const coveragePercent = ((pixelCount / (info.width * info.height)) * 100).toFixed(1);
    console.log(`üìä –ú–∞—Å–∫–∞ –¥–ª—è ${targetColor.hex}:`);
    console.log(`   - –ó–∞—Ö–≤–∞—á–µ–Ω–æ –ø–∏–∫—Å–µ–ª–µ–π: ${pixelCount} (${coveragePercent}%)`);
    console.log(`   - –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: –º–∏–Ω=${minDistance.toFixed(1)}, –º–∞–∫—Å=${maxDistance.toFixed(1)}`);
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
    const minCoverageThreshold = Math.max(0.8, parseFloat(targetColor.percentage) * 0.4);
    const isSignificantColor = parseFloat(coveragePercent) >= minCoverageThreshold;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ (–¥–∞–∂–µ —Å –º–∞–ª—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º)
    const brightness = targetColor.r * 0.299 + targetColor.g * 0.587 + targetColor.b * 0.114;
    const isHighContrast = brightness < 50 || brightness > 200; // –û—á–µ–Ω—å —Ç–µ–º–Ω—ã–µ –∏–ª–∏ —Å–≤–µ—Ç–ª—ã–µ
    
    if (!isSignificantColor && !isHighContrast) {
      console.log(`‚ö†Ô∏è –≠–¢–ê–ü 2: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–ª—è ${targetColor.hex} (${coveragePercent}% < ${minCoverageThreshold}%), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return null;
    }
    
    if (isHighContrast && !isSignificantColor) {
      console.log(`‚ú® –≠–¢–ê–ü 2: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç ${targetColor.hex} (—è—Ä–∫–æ—Å—Ç—å: ${brightness.toFixed(0)})`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –º–∞—Å–∫–∏
    const maskBuffer = await sharp(maskData, {
      raw: {
        width: info.width,
        height: info.height,
        channels: 1
      }
    })
    .png()
    .toBuffer();
    
    console.log(`‚úÖ –≠–¢–ê–ü 2: –ú–∞—Å–∫–∞ –¥–ª—è ${targetColor.hex} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    return maskBuffer;
    
  } catch (error) {
    console.error(`‚ùå –≠–¢–ê–ü 2 –û–®–ò–ë–ö–ê - –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è ${targetColor.hex}:`, error);
    return null;
  }
}

/**
 * –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è
 */
async function vectorizeColorLayer(maskBuffer, color, settings) {
  const potrace = require('potrace');
  
  try {
    // Adobe Illustrator Limited Color –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const potraceParams = {
      threshold: settings.threshold || 128, // Adobe auto-threshold
      turdSize: settings.minimumArea || 10, // Adobe Noise parameter (10px¬≤)
      turnPolicy: settings.turnPolicy || 'black', // Adobe turn policy
      alphaMax: settings.alphaMax || 1.0, // Adobe corner detection (1.0 —Ä–∞–¥)
      optCurve: settings.optCurve !== false, // Adobe curve optimization (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ)
      optTolerance: settings.optTolerance || 0.2 // Adobe path fitting tolerance
    };
    
    console.log(`üéØ Adobe Illustrator —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –¥–ª—è ${color.hex}:`, potraceParams);
    
    return new Promise((resolve, reject) => {
      potrace.trace(maskBuffer, potraceParams, (err, svg) => {
        if (err) {
          console.error(`–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞ ${color.hex}:`, err);
          resolve(null);
        } else {
          resolve(svg);
        }
      });
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–ª–æ—è:', error);
    return null;
  }
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–µ–π –∏–∑ SVG
 */
function extractSVGPaths(svgContent) {
  const pathRegex = /<path[^>]*d="([^"]*)"[^>]*>/g;
  const paths = [];
  let match;
  
  while ((match = pathRegex.exec(svgContent)) !== null) {
    paths.push(match[1]);
  }
  
  return paths;
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç SVG –ø—É—Ç–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ viewBox
 */
function normalizePathCoordinates(pathData, sourceMinX, sourceMinY, sourceMaxX, sourceMaxY, targetWidth, targetHeight) {
  try {
    const sourceWidth = sourceMaxX - sourceMinX;
    const sourceHeight = sourceMaxY - sourceMinY;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    const padding = 40;
    const scaleX = (targetWidth - padding * 2) / sourceWidth;
    const scaleY = (targetHeight - padding * 2) / sourceHeight;
    const scale = Math.min(scaleX, scaleY, 1); // –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–æ–ª—å—à–µ 100%
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const offsetX = (targetWidth - sourceWidth * scale) / 2;
    const offsetY = (targetHeight - sourceHeight * scale) / 2;
    
    // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—É—Ç–∏
    return pathData.replace(/([ML])\s*([\d.-]+)\s*([\d.-]+)/g, (match, command, x, y) => {
      const newX = (parseFloat(x) - sourceMinX) * scale + offsetX;
      const newY = (parseFloat(y) - sourceMinY) * scale + offsetY;
      return `${command} ${newX.toFixed(2)} ${newY.toFixed(2)}`;
    }).replace(/([C])\s*([\d.-]+)\s*([\d.-]+)\s*([\d.-]+)\s*([\d.-]+)\s*([\d.-]+)\s*([\d.-]+)/g, 
      (match, command, x1, y1, x2, y2, x3, y3) => {
        const newX1 = (parseFloat(x1) - sourceMinX) * scale + offsetX;
        const newY1 = (parseFloat(y1) - sourceMinY) * scale + offsetY;
        const newX2 = (parseFloat(x2) - sourceMinX) * scale + offsetX;
        const newY2 = (parseFloat(y2) - sourceMinY) * scale + offsetY;
        const newX3 = (parseFloat(x3) - sourceMinX) * scale + offsetX;
        const newY3 = (parseFloat(y3) - sourceMinY) * scale + offsetY;
        return `${command} ${newX1.toFixed(2)} ${newY1.toFixed(2)}, ${newX2.toFixed(2)} ${newY2.toFixed(2)}, ${newX3.toFixed(2)} ${newY3.toFixed(2)}`;
      });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error);
    return pathData; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
  }
}

/**
 * –≠–¢–ê–ü 4: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–Ω—ã—Ö —Å–ª–æ–µ–≤ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π SVG
 */
async function combineColorLayers(colorLayers, originalImageBuffer) {
  const sharp = require('sharp');
  
  try {
    console.log(`üîó –≠–¢–ê–ü 4: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ ${colorLayers.length} —Ü–≤–µ—Ç–Ω—ã—Ö —Å–ª–æ–µ–≤`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const metadata = await sharp(originalImageBuffer).metadata();
    const width = metadata.width;
    const height = metadata.height;
    
    console.log(`üìê –≠–¢–ê–ü 4: –†–∞–∑–º–µ—Ä—ã SVG: ${width}x${height}`);
    
    let svgContent = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
  <title>Adobe Limited Color (${colorLayers.length} colors)</title>
  <desc>Generated with Adobe Illustrator Image Trace compatible algorithm</desc>
  <style>
    .vector-layer { shape-rendering: optimizeSpeed; }
  </style>
`;
    
    let totalPaths = 0;
    
    // –ñ–µ—Å—Ç–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const MAX_PATHS_PER_LAYER = 25; // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–æ 25 –ø—É—Ç–µ–π –Ω–∞ —Ü–≤–µ—Ç –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const MAX_TOTAL_PATHS = 100; // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–æ 100 –ø—É—Ç–µ–π –Ω–∞ –≤–µ—Å—å SVG
    const MAX_SVG_SIZE_KB = 200; // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–æ 200KB –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    const MAX_PATH_COMPLEXITY = 500; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ path —ç–ª–µ–º–µ–Ω—Ç–∞
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log(`üìê –≠–¢–ê–ü 4: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è...`);
    let allCoordinates = [];
    
    colorLayers.forEach(layer => {
      layer.paths.forEach(path => {
        const coords = path.match(/M (\d+\.?\d*) (\d+\.?\d*)/g);
        if (coords) {
          coords.forEach(coord => {
            const match = coord.match(/M (\d+\.?\d*) (\d+\.?\d*)/);
            if (match) {
              allCoordinates.push({
                x: parseFloat(match[1]),
                y: parseFloat(match[2])
              });
            }
          });
        }
      });
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    let minX = 0, maxX = width, minY = 0, maxY = height;
    let contentWidth = width, contentHeight = height;
    
    if (allCoordinates.length > 0) {
      minX = Math.min(...allCoordinates.map(c => c.x));
      maxX = Math.max(...allCoordinates.map(c => c.x));
      minY = Math.min(...allCoordinates.map(c => c.y));
      maxY = Math.max(...allCoordinates.map(c => c.y));
      
      contentWidth = maxX - minX;
      contentHeight = maxY - minY;
    }
    
    const padding = 20;
    
    console.log(`üìä –≠–¢–ê–ü 4: –ì—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - X: ${minX}-${maxX}, Y: ${minY}-${maxY}`);
    console.log(`üìä –≠–¢–ê–ü 4: –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${contentWidth}x${contentHeight}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã 2400x2400 –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    const optimizedWidth = 2400;
    const optimizedHeight = 2400;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –≤–ø–∏—Å—ã–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ viewBox
    const scaleX = (optimizedWidth - padding * 2) / contentWidth;
    const scaleY = (optimizedHeight - padding * 2) / contentHeight;
    const scale = Math.min(scaleX, scaleY, 1); // –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–æ–ª—å—à–µ 100%
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const offsetX = (optimizedWidth - contentWidth * scale) / 2;
    const offsetY = (optimizedHeight - contentHeight * scale) / 2;
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ SVG —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    svgContent = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${optimizedWidth}" height="${optimizedHeight}" viewBox="0 0 ${optimizedWidth} ${optimizedHeight}" xmlns="http://www.w3.org/2000/svg">
  <title>Adobe Limited Color (${colorLayers.length} colors)</title>
  <desc>Generated with Adobe Illustrator Image Trace compatible algorithm</desc>
  <style>
    .vector-layer { shape-rendering: optimizeSpeed; }
  </style>
`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ü–≤–µ—Ç–Ω–æ–π —Å–ª–æ–π —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    colorLayers.forEach((layer, index) => {
      const layerNumber = index + 1;
      console.log(`üé® –≠–¢–ê–ü 4.${layerNumber}: –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è —Ü–≤–µ—Ç–∞ ${layer.color}`);
      console.log(`   - –ü—É—Ç–µ–π –≤ —Å–ª–æ–µ: ${layer.paths.length}`);
      
      svgContent += `  <g id="color-${layerNumber}" class="vector-layer" fill="${layer.color}" stroke="none">\n`;
      
      let validPaths = 0;
      let layerPaths = 0;
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Ç–∏ –ø–æ –¥–ª–∏–Ω–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º —Ñ–æ—Ä–º–∞–º –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞)
      const sortedPaths = layer.paths
        .filter(path => path && path.trim() && path.length > 10 && path.length < MAX_PATH_COMPLEXITY)
        .sort((a, b) => a.length - b.length);
      
      for (const path of sortedPaths) {
        // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
        if (layerPaths >= MAX_PATHS_PER_LAYER || totalPaths >= MAX_TOTAL_PATHS) {
          console.log(`‚ö†Ô∏è –≠–¢–ê–ü 4.${layerNumber}: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—É—Ç–µ–π (${layerPaths}/${MAX_PATHS_PER_LAYER} –Ω–∞ —Å–ª–æ–π, ${totalPaths}/${MAX_TOTAL_PATHS} –≤—Å–µ–≥–æ)`);
          break;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—É—Ç–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const normalizedPath = normalizePathCoordinates(path, minX, minY, maxX, maxY, optimizedWidth, optimizedHeight);
        svgContent += `    <path d="${normalizedPath}" />\n`;
        validPaths++;
        layerPaths++;
        totalPaths++;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä SVG
        if (svgContent.length > MAX_SVG_SIZE_KB * 1024) {
          console.log(`‚ö†Ô∏è –≠–¢–ê–ü 4.${layerNumber}: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ (${(svgContent.length / 1024).toFixed(1)}KB)`);
          break;
        }
      }
      
      svgContent += `  </g>\n`;
      
      console.log(`‚úÖ –≠–¢–ê–ü 4.${layerNumber}: –î–æ–±–∞–≤–ª–µ–Ω–æ ${validPaths} –∏–∑ ${layer.paths.length} –ø—É—Ç–µ–π –¥–ª—è ${layer.color}`);
    });
    
    svgContent += `</svg>`;
    
    console.log(`üìä –≠–¢–ê–ü 4: –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SVG:`);
    console.log(`   - –í—Å–µ–≥–æ —Å–ª–æ–µ–≤: ${colorLayers.length}`);
    console.log(`   - –í—Å–µ–≥–æ –ø—É—Ç–µ–π: ${totalPaths}`);
    console.log(`   - –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${(svgContent.length / 1024).toFixed(1)} –ö–ë`);
    console.log(`   - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: ${optimizedWidth}x${optimizedHeight}`);
    console.log(`   - –°–º–µ—â–µ–Ω–∏–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ: –∫–æ–Ω—Ç–µ–Ω—Ç —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
    
    if (totalPaths === 0) {
      console.log('‚ùå –≠–¢–ê–ü 4: –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—É—Ç–µ–π, —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π SVG');
      return createMonochromeBackup(originalImageBuffer, { threshold: 128 });
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
    const finalSizeKB = svgContent.length / 1024;
    if (finalSizeKB > MAX_SVG_SIZE_KB) {
      console.log(`‚ö†Ô∏è –≠–¢–ê–ü 4: SVG —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${finalSizeKB.toFixed(1)}KB > ${MAX_SVG_SIZE_KB}KB), –ø—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é`);
      return await applyEmergencyOptimization(svgContent, originalImageBuffer, MAX_SVG_SIZE_KB);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–ª—è –≤–µ–±-–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (totalPaths > MAX_TOTAL_PATHS * 2) {
      console.log(`‚ö†Ô∏è –≠–¢–ê–ü 4: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—É—Ç–µ–π (${totalPaths}), –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º`);
    }
    
    console.log(`‚úÖ –≠–¢–ê–ü 4 –ó–ê–í–ï–†–®–ï–ù: –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π SVG —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
    return svgContent;
    
  } catch (error) {
    console.error('‚ùå –≠–¢–ê–ü 4 –û–®–ò–ë–ö–ê - –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–µ–≤:', error);
    return createMonochromeBackup(originalImageBuffer, { threshold: 128 });
  }
}

/**
 * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö SVG —Ñ–∞–π–ª–æ–≤
 */
async function applyEmergencyOptimization(svgContent, originalImageBuffer, maxSizeKB) {
  console.log('üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–ø—Ä–æ—â–µ–Ω–∏–µ SVG –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏');
  
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø—É—Ç–∏ –∏–∑ SVG
    const pathRegex = /<path[^>]*d="([^"]*)"[^>]*>/g;
    const paths = [];
    let match;
    
    while ((match = pathRegex.exec(svgContent)) !== null) {
      paths.push(match[1]);
    }
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${paths.length} –ø—É—Ç–µ–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ`);
    
    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –ø—É—Ç–∏ (–¥–æ 50 —à—Ç—É–∫)
    const simplifiedPaths = paths
      .filter(path => path.length < 500) // –¢–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—É—Ç–∏
      .slice(0, 50); // –ú–∞–∫—Å–∏–º—É–º 50 –ø—É—Ç–µ–π
    
    // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π SVG
    const sharp = require('sharp');
    const metadata = await sharp(originalImageBuffer).metadata();
    
    let optimizedSVG = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${metadata.width}" height="${metadata.height}" viewBox="0 0 ${metadata.width} ${metadata.height}" xmlns="http://www.w3.org/2000/svg">
  <title>–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è</title>
  <desc>–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –≤–µ–±-–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</desc>
  <g id="simplified-layer" fill="#000000" stroke="none">
`;
    
    simplifiedPaths.forEach(path => {
      optimizedSVG += `    <path d="${path}" />\n`;
    });
    
    optimizedSVG += `  </g>
</svg>`;
    
    console.log(`‚úÖ –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: ${simplifiedPaths.length} –ø—É—Ç–µ–π, ${(optimizedSVG.length / 1024).toFixed(1)}KB`);
    return optimizedSVG;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
    return createMonochromeBackup(originalImageBuffer, { threshold: 128 });
  }
}

/**
 * –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π SVG –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
 */
async function createMonochromeBackup(imageBuffer, settings) {
  const potrace = require('potrace');
  
  console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–æ–≥–æ SVG...');
  
  try {
    const potraceParams = {
      threshold: settings.threshold || 128,
      turdSize: 1,
      turnPolicy: 'black',
      alphaMax: 1.0,
      optCurve: true,
      optTolerance: 0.05
    };
    
    return new Promise((resolve, reject) => {
      potrace.trace(imageBuffer, potraceParams, (err, svg) => {
        if (err) {
          reject(new Error(`–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ potrace: ${err.message}`));
        } else {
          console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π SVG —Å–æ–∑–¥–∞–Ω');
          resolve(svg);
        }
      });
    });
    
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SVG:', error);
    throw error;
  }
}

/**
 * Adobe-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º Otsu)
 */
async function calculateAdobeThreshold(imageBuffer) {
  const sharp = require('sharp');
  
  try {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ—Ä—ã–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const { data, info } = await sharp(imageBuffer)
      .greyscale()
      .raw()
      .toBuffer({ resolveWithObject: true });
    
    // –°–æ–∑–¥–∞–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —è—Ä–∫–æ—Å—Ç–∏
    const histogram = new Array(256).fill(0);
    for (let i = 0; i < data.length; i++) {
      histogram[data[i]]++;
    }
    
    const total = data.length;
    let sum = 0;
    for (let i = 0; i < 256; i++) {
      sum += i * histogram[i];
    }
    
    let sumB = 0;
    let wB = 0;
    let maximum = 0;
    let level = 0;
    
    // –ê–ª–≥–æ—Ä–∏—Ç–º Otsu –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä–æ–≥–∞
    for (let i = 0; i < 256; i++) {
      wB += histogram[i];
      if (wB === 0) continue;
      
      const wF = total - wB;
      if (wF === 0) break;
      
      sumB += i * histogram[i];
      const mB = sumB / wB;
      const mF = (sum - sumB) / wF;
      
      const between = wB * wF * Math.pow(mB - mF, 2);
      
      if (between > maximum) {
        level = i;
        maximum = between;
      }
    }
    
    // Adobe –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
    const adobeAdjustedThreshold = Math.min(255, Math.max(85, level + 15));
    
    console.log(`üìä Otsu –ø–æ—Ä–æ–≥: ${level}, Adobe –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ${adobeAdjustedThreshold}`);
    return adobeAdjustedThreshold;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ä–æ–≥–∞:', error);
    return 120; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ Adobe –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
  }
}

/**
 * Adobe-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function preprocessImageForAdobe(imageBuffer, settings) {
  const sharp = require('sharp');
  
  try {
    console.log('üìê Adobe-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞...');
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ Adobe
    const processedBuffer = await sharp(imageBuffer)
      .resize(settings.maxSize, settings.maxSize, {
        fit: 'inside',
        withoutEnlargement: true
      })
      .png()
      .toBuffer();
    
    console.log('‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return processedBuffer;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    return imageBuffer;
  }
}

/**
 * Adobe Limited Color —Ä–µ–∂–∏–º - —Ç–æ—á–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è Image Trace
 */
async function createAdobeLimitedColorSVG(imageBuffer, settings) {
  const sharp = require('sharp');
  
  try {
    console.log('üé® Adobe Limited Color —Ä–µ–∂–∏–º');
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const metadata = await sharp(imageBuffer).metadata();
    const width = metadata.width;
    const height = metadata.height;
    
    console.log(`üìê –†–∞–∑–º–µ—Ä—ã: ${width}x${height}`);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é extractDominantColors
    const dominantColors = await extractDominantColors(imageBuffer, settings.maxColors);
    
    if (!dominantColors || dominantColors.length === 0) {
      console.log('‚ùå K-means —Å–±–æ–π, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏');
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
      dominantColors = [
        { r: 0, g: 0, b: 0, hex: '#000000', percentage: '40.0' },       // –ß–µ—Ä–Ω—ã–π
        { r: 255, g: 255, b: 255, hex: '#ffffff', percentage: '35.0' }, // –ë–µ–ª—ã–π
        { r: 128, g: 128, b: 128, hex: '#808080', percentage: '15.0' }, // –°–µ—Ä—ã–π
        { r: 200, g: 200, b: 200, hex: '#c8c8c8', percentage: '10.0' }  // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
      ];
      console.log('üé® –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É: 4 —Ü–≤–µ—Ç–∞ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏');
    }
    
    console.log(`üé® Adobe —Ü–≤–µ—Ç–∞: ${dominantColors.length}`);
    
    // –°–æ–∑–¥–∞–µ–º SVG —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –≤ Adobe
    let svgContent = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
  <title>Adobe Limited Color (${dominantColors.length} colors)</title>
  <desc>Generated with Adobe Illustrator Image Trace compatible algorithm</desc>
`;
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
    console.log(`üé® –ù–ê–ß–ò–ù–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ ${dominantColors.length} –¶–í–ï–¢–û–í:`);
    dominantColors.forEach((color, index) => {
      console.log(`  ${index + 1}. ${color.hex} (${color.percentage}%)`);
    });
    
    let processedColors = 0;
    
    for (let i = 0; i < dominantColors.length; i++) {
      const color = dominantColors[i];
      console.log(`üîç –≠–¢–ê–ü ${i + 1}: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–∞ ${color.hex}`);
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è —Ü–≤–µ—Ç–∞
      const colorMask = await createAdobeColorMask(imageBuffer, color, settings);
      console.log(`üñºÔ∏è –ú–∞—Å–∫–∞ –¥–ª—è ${color.hex}: ${colorMask ? '–°–û–ó–î–ê–ù–ê' : '–ù–ï –°–û–ó–î–ê–ù–ê'}`);
      
      if (colorMask) {
        console.log(`üé® –£–°–ü–ï–®–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–≤–µ—Ç ${i + 1}/${dominantColors.length}: ${color.hex}`);
        
        // –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º –º–∞—Å–∫—É —Å Adobe –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const paths = await vectorizeAdobeMask(colorMask, color, settings);
        console.log(`üîç –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Ç–µ–π –¥–ª—è ${color.hex}: ${paths ? paths.length : 0}`);
        
        if (paths && paths.length > 0) {
          svgContent += `  <g id="color-${i + 1}" fill="${color.hex}" stroke="none">\n`;
          
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Ç–µ–π –∫–∞–∫ –≤ Adobe (–º–∞–∫—Å 20 –Ω–∞ —Ü–≤–µ—Ç)
          const limitedPaths = paths.slice(0, 20);
          let addedPaths = 0;
          
          limitedPaths.forEach(pathObj => {
            if (pathObj && pathObj.path && pathObj.path.length > 10) {
              svgContent += `    <path d="${pathObj.path}" fill="${pathObj.fill}" opacity="${pathObj.opacity}"/>\n`;
              addedPaths++;
            }
          });
          
          svgContent += `  </g>\n`;
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedPaths} –ø—É—Ç–µ–π –¥–ª—è ${color.hex} (–∏–∑ ${limitedPaths.length} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö)`);
          processedColors++;
        } else {
          console.log(`‚ùå –ù–µ—Ç –ø—É—Ç–µ–π –¥–ª—è ${color.hex}`);
        }
      } else {
        console.log(`‚ùå –ú–∞—Å–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è ${color.hex}`);
      }
    }
    
    svgContent += `</svg>`;
    
    console.log(`üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û–ë–†–ê–ë–û–¢–ö–ò:`);
    console.log(`  ‚Ä¢ –ó–∞—è–≤–ª–µ–Ω–æ —Ü–≤–µ—Ç–æ–≤: ${dominantColors.length}`);
    console.log(`  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedColors}`);
    console.log(`  ‚Ä¢ SVG —Ä–∞–∑–º–µ—Ä: ${(svgContent.length / 1024).toFixed(1)}KB`);
    
    return svgContent;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Adobe —Ä–µ–∂–∏–º–∞:', error);
    return createAdobeMonoSVG(imageBuffer, settings);
  }
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º K-means –∫–∞–∫ –≤ Adobe
 */
async function extractAdobeColors(imageBuffer, maxColors) {
  const sharp = require('sharp');
  
  try {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const { data, info } = await sharp(imageBuffer)
      .resize(400, 400, { fit: 'inside' })
      .raw()
      .toBuffer({ resolveWithObject: true });
    
    const pixels = [];
    for (let i = 0; i < data.length; i += info.channels) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏
      if (info.channels === 4 && data[i + 3] < 128) continue;
      
      pixels.push({
        r: data[i],
        g: data[i + 1], 
        b: data[i + 2]
      });
    }
    
    console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ ${pixels.length} –ø–∏–∫—Å–µ–ª–µ–π –∏–∑ ${data.length / info.channels} (–∫–∞–Ω–∞–ª–æ–≤: ${info.channels})`);
    
    if (pixels.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return [];
    }
    
    // K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤
    const clusters = performKMeans(pixels, maxColors);
    console.log(`üî¨ K-means —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${clusters ? clusters.length : 0} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤`);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Adobe
    const adobeColors = clusters.map(cluster => ({
      r: Math.round(cluster.r),
      g: Math.round(cluster.g),
      b: Math.round(cluster.b),
      hex: `#${Math.round(cluster.r).toString(16).padStart(2, '0')}${Math.round(cluster.g).toString(16).padStart(2, '0')}${Math.round(cluster.b).toString(16).padStart(2, '0')}`,
      percentage: cluster.weight.toFixed(1)
    }));
    
    console.log(`üé® Adobe K-means: ${adobeColors.length} —Ü–≤–µ—Ç–æ–≤`);
    return adobeColors;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Adobe —Ü–≤–µ—Ç–æ–≤:', error);
    return [];
  }
}

/**
 * –ü—Ä–æ—Å—Ç–∞—è K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–æ–≤
 */
function performKMeans(pixels, k) {
  if (pixels.length === 0) {
    console.log('‚ùå performKMeans: –ù–µ—Ç –ø–∏–∫—Å–µ–ª–µ–π');
    return [];
  }
  
  console.log(`üî¨ performKMeans: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è ${pixels.length} –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞ ${k} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤`);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º —Ü–≤–µ—Ç–æ–≤
  let centroids = [];
  
  // –£–º–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ - –≤—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞
  centroids.push({ ...pixels[0], weight: 0 }); // –ü–µ—Ä–≤—ã–π –ø–∏–∫—Å–µ–ª—å
  
  for (let i = 1; i < k; i++) {
    let maxDistance = 0;
    let bestPixel = pixels[0];
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫—Å–µ–ª—å, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—â–∏–π—Å—è –æ—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤
    for (const pixel of pixels) {
      let minDistanceToExisting = Infinity;
      
      for (const centroid of centroids) {
        const distance = Math.sqrt(
          Math.pow(pixel.r - centroid.r, 2) +
          Math.pow(pixel.g - centroid.g, 2) +
          Math.pow(pixel.b - centroid.b, 2)
        );
        minDistanceToExisting = Math.min(minDistanceToExisting, distance);
      }
      
      if (minDistanceToExisting > maxDistance) {
        maxDistance = minDistanceToExisting;
        bestPixel = pixel;
      }
    }
    
    centroids.push({ ...bestPixel, weight: 0 });
  }
  
  console.log(`üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${centroids.length} —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤`);
  
  // –ò—Ç–µ—Ä–∞—Ü–∏–∏ K-means
  for (let iter = 0; iter < 10; iter++) {
    const clusters = Array(k).fill().map(() => []);
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª–µ–π –∫ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
    pixels.forEach(pixel => {
      let minDistance = Infinity;
      let nearestCluster = 0;
      
      centroids.forEach((centroid, i) => {
        const distance = Math.sqrt(
          Math.pow(pixel.r - centroid.r, 2) +
          Math.pow(pixel.g - centroid.g, 2) +
          Math.pow(pixel.b - centroid.b, 2)
        );
        
        if (distance < minDistance) {
          minDistance = distance;
          nearestCluster = i;
        }
      });
      
      clusters[nearestCluster].push(pixel);
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤
    centroids = clusters.map((cluster, i) => {
      if (cluster.length === 0) return centroids[i];
      
      const r = cluster.reduce((sum, p) => sum + p.r, 0) / cluster.length;
      const g = cluster.reduce((sum, p) => sum + p.g, 0) / cluster.length;
      const b = cluster.reduce((sum, p) => sum + p.b, 0) / cluster.length;
      const weight = (cluster.length / pixels.length) * 100;
      
      return { r, g, b, weight };
    });
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤
  const validCentroids = centroids.filter(c => c.weight > 0); // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
  console.log(`üé® K-means –∏—Ç–æ–≥–æ–≤—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${validCentroids.length} –∏–∑ ${centroids.length}`);
  validCentroids.forEach((centroid, i) => {
    console.log(`   –¶–≤–µ—Ç ${i + 1}: RGB(${Math.round(centroid.r)}, ${Math.round(centroid.g)}, ${Math.round(centroid.b)}) - ${centroid.weight.toFixed(2)}%`);
  });
  return validCentroids;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Å–∫–∏ –∫–∞–∫ –≤ Adobe
 */
async function createAdobeColorMask(imageBuffer, targetColor, settings) {
  const sharp = require('sharp');
  
  try {
    console.log(`üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –º–∞—Å–∫–∏ –¥–ª—è ${targetColor.hex}...`);
    
    const { data, info } = await sharp(imageBuffer)
      .raw()
      .toBuffer({ resolveWithObject: true });
    
    console.log(`üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–∞—Å–∫–∏ - ${info.width}x${info.height}, –∫–∞–Ω–∞–ª—ã: ${info.channels}, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${data.length}`);
    
    const maskData = Buffer.alloc(info.width * info.height);
    
    // ADOBE-–°–û–í–ú–ï–°–¢–ò–ú–´–ï –î–û–ü–£–°–ö–ò: –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–µ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π
    let tolerance = 100; // –°—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –¥–æ–ø—É—Å–∫
    
    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–æ–ø—É—Å–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ü–≤–µ—Ç–æ–≤ (–∫–∞–∫ –≤ Adobe Limited Color)
    const brightness = (targetColor.r + targetColor.g + targetColor.b) / 3;
    if (brightness < 60) tolerance = 120; // –¢–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å–∫
    if (brightness > 200) tolerance = 110; // –°–≤–µ—Ç–ª—ã–µ —Ü–≤–µ—Ç–∞ - –±–æ–ª—å—à–æ–π –¥–æ–ø—É—Å–∫
    if (brightness >= 60 && brightness <= 200) tolerance = 130; // –°—Ä–µ–¥–Ω–∏–µ —Ç–æ–Ω–∞ - —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –¥–æ–ø—É—Å–∫
    
    console.log(`üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–æ–ø—É—Å–∫ –¥–ª—è ${targetColor.hex}: ${tolerance} (—è—Ä–∫–æ—Å—Ç—å: ${brightness.toFixed(1)})`);
    console.log(`üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¶–µ–ª–µ–≤–æ–π —Ü–≤–µ—Ç RGB(${targetColor.r}, ${targetColor.g}, ${targetColor.b})`);
    
    let pixelCount = 0;
    let totalPixels = 0;
    
    for (let i = 0; i < data.length; i += info.channels) {
      const r = data[i];
      const g = data[i + 1];
      const b = data[i + 2];
      
      totalPixels++;
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏
      if (info.channels === 4 && data[i + 3] < 128) continue;
      
      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –¥–µ—Ç–∞–ª–µ–π
      const euclideanDistance = Math.sqrt(
        Math.pow(r - targetColor.r, 2) +
        Math.pow(g - targetColor.g, 2) +
        Math.pow(b - targetColor.b, 2)
      );
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º RGB
      const deltaR = Math.abs(r - targetColor.r);
      const deltaG = Math.abs(g - targetColor.g);
      const deltaB = Math.abs(b - targetColor.b);
      const maxDelta = Math.max(deltaR, deltaG, deltaB);
      
      const pixelIndex = Math.floor(i / info.channels);
      
      // ADOBE-–°–¢–ò–õ–¨: –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π
      if (euclideanDistance <= tolerance || (maxDelta <= tolerance * 0.8) || 
          (Math.abs(r - targetColor.r) <= tolerance * 0.6 && 
           Math.abs(g - targetColor.g) <= tolerance * 0.6 && 
           Math.abs(b - targetColor.b) <= tolerance * 0.6)) {
        maskData[pixelIndex] = 255;
        pixelCount++;
      } else {
        maskData[pixelIndex] = 0;
      }
    }
    
    const coverage = (pixelCount / totalPixels) * 100;
    
    console.log(`üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å–∫–∏ –¥–ª—è ${targetColor.hex}:`);
    console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∏–∫—Å–µ–ª–µ–π: ${totalPixels}`);
    console.log(`   - –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${pixelCount}`);
    console.log(`   - –ü–æ–∫—Ä—ã—Ç–∏–µ: ${coverage.toFixed(2)}%`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const samplePixels = [];
    for (let i = 0; i < Math.min(data.length, 50 * info.channels); i += info.channels) {
      const r = data[i];
      const g = data[i + 1];
      const b = data[i + 2];
      const distance = Math.sqrt(
        Math.pow(r - targetColor.r, 2) +
        Math.pow(g - targetColor.g, 2) +
        Math.pow(b - targetColor.b, 2)
      );
      samplePixels.push({ r, g, b, distance, matches: distance <= tolerance });
    }
    
    const matchingSamples = samplePixels.filter(p => p.matches).length;
    console.log(`üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ò–∑ –ø–µ—Ä–≤—ã—Ö 50 –ø–∏–∫—Å–µ–ª–µ–π ${matchingSamples} —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ü–≤–µ—Ç–æ–º ${targetColor.hex}`);
    
    
    // ADOBE-–°–û–í–ú–ï–°–¢–ò–ú–´–ô –ü–û–†–û–ì: –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π
    if (coverage < 0.005) {
      console.log(`‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–ª—è ${targetColor.hex}: ${coverage.toFixed(3)}%`);
      return null;
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–∞—Å–∫–∏
    const processedMaskBuffer = await sharp(maskData, {
      raw: {
        width: info.width,
        height: info.height,
        channels: 1
      }
    })
    .median(2) // –£–¥–∞–ª—è–µ–º —à—É–º —Å–æ—Ö—Ä–∞–Ω—è—è –¥–µ—Ç–∞–ª–∏
    .png()
    .toBuffer();
    
    console.log(`‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –º–∞—Å–∫–∞ –¥–ª—è ${targetColor.hex}: ${coverage.toFixed(3)}% –ø–æ–∫—Ä—ã—Ç–∏—è, ${pixelCount} –ø–∏–∫—Å–µ–ª–µ–π`);
    return processedMaskBuffer;
    
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –º–∞—Å–∫–∏ –¥–ª—è ${targetColor.hex}:`, error);
    return null;
  }
}

/**
 * –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å–∫–∏ —Å Adobe –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */
async function vectorizeAdobeMask(maskBuffer, color, settings) {
  const potrace = require('potrace');
  
  try {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï Adobe Illustrator –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    const adobeParams = {
      threshold: 128, // –°—Ä–µ–¥–Ω–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –ª—É—á—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
      turdSize: 4, // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
      turnPolicy: 'minority', // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞
      alphaMax: 1.5, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —É–≥–æ–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç—Ä—ã—Ö —É–≥–ª–æ–≤
      optCurve: true,
      optTolerance: 0.1 // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–µ–Ω—å—à–∏–π –¥–æ–ø—É—Å–∫ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –ø—É—Ç–µ–π
    };
    
    return new Promise((resolve, reject) => {
      console.log(`üîß –î–µ—Ç–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ${color.hex} —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`, adobeParams);
      
      potrace.trace(maskBuffer, adobeParams, (err, svg) => {
        if (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ${color.hex}:`, err);
          resolve([]);
        } else {
          console.log(`üìÑ SVG –ø–æ–ª—É—á–µ–Ω –¥–ª—è ${color.hex}, –¥–ª–∏–Ω–∞: ${svg ? svg.length : 0}`);
          
          if (!svg || svg.length < 100) {
            console.log(`‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π SVG –¥–ª—è ${color.hex}, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã`);
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–∞—Å–æ–∫
            const fallbackParams = {
              threshold: 100,
              turdSize: 2, // –ï—â–µ –º–µ–Ω—å—à–µ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –º–µ–ª–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
              turnPolicy: 'black',
              alphaMax: 1.0,
              optCurve: false, // –û—Ç–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫—Ä–∏–≤—ã—Ö
              optTolerance: 0.05
            };
            
            potrace.trace(maskBuffer, fallbackParams, (err2, svg2) => {
              if (err2 || !svg2) {
                console.log(`‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è ${color.hex}`);
                resolve([]);
                return;
              }
              
              const paths = extractPathsFromSVG(svg2, color);
              console.log(`üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ${color.hex}: ${paths.length} –ø—É—Ç–µ–π`);
              resolve(paths);
            });
            
            return;
          }
          
          const paths = extractPathsFromSVG(svg, color);
          console.log(`üéØ ${color.hex}: ${paths.length} –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –∏–∑–≤–ª–µ—á–µ–Ω–æ`);
          resolve(paths);
        }
      });
    });
    
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–∞—Å–∫–∏ ${color.hex}:`, error);
    return [];
  }
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–µ–π –∏–∑ SVG —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
 */
function extractPathsFromSVG(svg, color) {
  const paths = [];
  
  // –ò—â–µ–º –≤—Å–µ –ø—É—Ç–∏ –≤ SVG
  const pathRegex = /<path[^>]*d="([^"]*)"[^>]*>/g;
  let match;
  
  while ((match = pathRegex.exec(svg)) !== null) {
    const pathData = match[1];
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç—ã–µ –ø—É—Ç–∏
    if (pathData.length < 10) continue;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—É—Ç–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥)
    const commandCount = (pathData.match(/[MmLlHhVvCcSsQqTtAaZz]/g) || []).length;
    if (commandCount < 2) continue;
    
    console.log(`‚úÇÔ∏è –ù–∞–π–¥–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è ${color.hex}: ${commandCount} –∫–æ–º–∞–Ω–¥, –¥–ª–∏–Ω–∞ ${pathData.length}`);
    
    const coloredPath = {
      path: pathData,
      color: color.hex,
      fill: color.hex,
      opacity: 1.0
    };
    paths.push(coloredPath);
  }
  
  return paths;
}

/**
 * –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π SVG –≤ —Å—Ç–∏–ª–µ Adobe
 */
async function createAdobeMonoSVG(imageBuffer, settings) {
  const potrace = require('potrace');
  const sharp = require('sharp');
  
  console.log('üîÑ Adobe –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π —Ä–µ–∂–∏–º...');
  
  try {
    const metadata = await sharp(imageBuffer).metadata();
    
    const adobeParams = {
      threshold: settings.threshold || 120,
      turdSize: 20, // –ë–æ–ª—å—à–µ –¥–ª—è –º–æ–Ω–æ—Ö—Ä–æ–º–∞
      turnPolicy: 'black',
      alphaMax: 0.75,
      optCurve: true,
      optTolerance: 0.3
    };
    
    return new Promise((resolve, reject) => {
      potrace.trace(imageBuffer, adobeParams, (err, svg) => {
        if (err) {
          reject(new Error(`Adobe –º–æ–Ω–æ—Ö—Ä–æ–º –æ—à–∏–±–∫–∞: ${err.message}`));
        } else {
          console.log('‚úÖ Adobe –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π SVG —Å–æ–∑–¥–∞–Ω');
          resolve(svg);
        }
      });
    });
    
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Adobe SVG:', error);
    throw error;
  }
}

/**
 * –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
 */
async function vectorizeFromUrl(imageUrl, options = {}) {
  const https = require('https');
  const http = require('http');
  const fs = require('fs').promises;
  
  try {
    console.log(`üåê –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL...`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
    const imageBuffer = await downloadImageWithRedirects(imageUrl);
    
    if (!imageBuffer) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }
    
    console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${(imageBuffer.length / 1024).toFixed(1)}KB`);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º Adobe Limited Color –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–Ω—É–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä"
    console.log(`üé® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: Adobe Limited Color (silkscreen)`);
    console.log(`üìä –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`, JSON.stringify(options));
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Adobe —Ä–µ–∂–∏–º–∞
    const adobeOptions = {
      ...options,
      maxColors: 5,
      outputFormat: 'svg',
      quality: 'silkscreen'
    };
    
    console.log(`üîß Adobe –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`, JSON.stringify(adobeOptions));
    const result = await silkscreenVectorize(imageBuffer, adobeOptions);
    
    if (result.success) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º SVG —Ñ–∞–π–ª
      const filename = `vectorized_${generateId()}.svg`;
      const filepath = path.join(outputDir, filename);
      
      await fs.writeFile(filepath, result.svgContent);
      
      return {
        success: true,
        svgContent: result.svgContent,
        filename: filename,
        detectedType: 'url-image',
        quality: result.quality,
        optimization: result.optimization
      };
    } else {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ URL:', error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
 */
async function downloadImageWithRedirects(url, maxRedirects = 5) {
  return new Promise((resolve, reject) => {
    const downloadImage = (currentUrl, redirectCount = 0) => {
      if (redirectCount > maxRedirects) {
        reject(new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤'));
        return;
      }
      
      const urlObj = new URL(currentUrl);
      const client = urlObj.protocol === 'https:' ? https : http;
      
      const request = client.get(currentUrl, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
          'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8'
        },
        timeout: 30000
      }, (response) => {
        if (response.statusCode >= 300 && response.statusCode < 400 && response.headers.location) {
          console.log(`üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç ${response.statusCode}: ${response.headers.location}`);
          downloadImage(response.headers.location, redirectCount + 1);
          return;
        }
        
        if (response.statusCode !== 200) {
          reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));
          return;
        }
        
        const chunks = [];
        response.on('data', chunk => chunks.push(chunk));
        response.on('end', () => {
          const buffer = Buffer.concat(chunks);
          console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${(buffer.length / 1024).toFixed(1)}KB`);
          resolve(buffer);
        });
        response.on('error', reject);
      });
      
      request.on('error', reject);
      request.on('timeout', () => {
        request.destroy();
        reject(new Error('Timeout –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
      });
    };
    
    downloadImage(url);
  });
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ SVG –¥–æ 20–ú–ë
 */
async function optimizeSVGSize(svgContent, maxSize) {
  console.log('üóúÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ SVG...');
  
  let optimized = svgContent;
  
  // –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∏ –ø—Ä–æ–±–µ–ª—ã
  optimized = optimized
    .replace(/\s+/g, ' ') // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
    .replace(/>\s+</g, '><') // –ü—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
    .replace(/\s+\/>/g, '/>') // –ü—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Ç–µ–≥–∞–º–∏
    .replace(/="([^"]*?)"/g, (match, value) => {
      // –û–∫—Ä—É–≥–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      if (/^-?\d*\.?\d+$/.test(value)) {
        return `="${parseFloat(value).toFixed(2)}"`;
      }
      return match;
    });
  
  // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —É–ø—Ä–æ—â–∞–µ–º –ø—É—Ç–∏
  if (Buffer.byteLength(optimized, 'utf8') > maxSize) {
    console.log('üîß –£–ø—Ä–æ—â–µ–Ω–∏–µ –ø—É—Ç–µ–π SVG...');
    
    // –£–ø—Ä–æ—â–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—É—Ç—è—Ö
    optimized = optimized.replace(/d="([^"]+)"/g, (match, path) => {
      const simplified = path.replace(/(\d+\.\d{3,})/g, (num) => {
        return parseFloat(num).toFixed(1);
      });
      return `d="${simplified}"`;
    });
  }
  
  const finalSize = Buffer.byteLength(optimized, 'utf8');
  console.log(`üìè –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${(finalSize / 1024 / 1024).toFixed(2)}–ú–ë`);
  
  return optimized;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è)
async function advancedVectorize(imageBuffer, options = {}) {
  try {
    console.log(`üéØ –í–´–ë–û–† –ê–õ–ì–û–†–ò–¢–ú–ê –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–ò`);
    console.log(`   –ö–∞—á–µ—Å—Ç–≤–æ: ${options.quality || 'standard'}`);
    console.log(`   –¢–∏–ø: ${options.optimizeFor || 'web'}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ —Ü–≤–µ—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const needsColorVectorization = 
      options.quality === 'silkscreen' ||
      options.quality === 'ultra' ||
      options.optimizeFor === 'silkscreen' ||
      options.optimizeFor === 'print' ||
      (options.colors && options.colors !== 'mono');
    
    if (needsColorVectorization) {
      console.log(`üé® –í–´–ë–†–ê–ù: –¶–≤–µ—Ç–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º silkscreenVectorize`);
      return await silkscreenVectorize(imageBuffer, options);
    } else {
      console.log(`‚ö´ –í–´–ë–†–ê–ù: –ú–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º createRealSVG`);
      return await createRealSVG(imageBuffer, options);
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:`, error);
    // Fallback –∫ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–æ–º—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return await silkscreenVectorize(imageBuffer, options);
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π SVG —á–µ—Ä–µ–∑ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function createRealSVG(imageBuffer, settings) {
  const sharp = require('sharp');
  const potrace = require('potrace');
  
  try {
    console.log(`üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
    console.log(`üìä –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞: ${(imageBuffer.length / 1024).toFixed(1)}KB`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    const metadata = await sharp(imageBuffer).metadata();
    console.log(`üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, {
      width: metadata.width,
      height: metadata.height,
      format: metadata.format,
      channels: metadata.channels,
      density: metadata.density,
      hasAlpha: metadata.hasAlpha
    });
    
    const originalWidth = metadata.width;
    const originalHeight = metadata.height;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (!originalWidth || !originalHeight || originalWidth < 1 || originalHeight < 1) {
      throw new Error(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${originalWidth}x${originalHeight}`);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
    const maxSize = settings.maxSize || 2400; // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    let targetWidth = originalWidth;
    let targetHeight = originalHeight;
    
    // –î–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    const isHighQuality = settings.quality === 'ultra' || settings.quality === 'silkscreen';
    const actualMaxSize = isHighQuality ? 1500 : maxSize;
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
    if (originalWidth > actualMaxSize || originalHeight > actualMaxSize) {
      const scale = Math.min(actualMaxSize / originalWidth, actualMaxSize / originalHeight);
      targetWidth = Math.round(originalWidth * scale);
      targetHeight = Math.round(originalHeight * scale);
    }
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const minSize = 400;
    if (targetWidth < minSize && targetHeight < minSize) {
      const scale = Math.max(minSize / targetWidth, minSize / targetHeight);
      targetWidth = Math.round(targetWidth * scale);
      targetHeight = Math.round(targetHeight * scale);
    }
    
    console.log(`üñºÔ∏è –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${originalWidth}x${originalHeight}`);
    console.log(`üéØ –¶–µ–ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${targetWidth}x${targetHeight}`);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    console.log(`‚öôÔ∏è –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ (${settings.quality})...`);
    
    let processedBuffer;
    
    if (settings.quality === 'silkscreen' || settings.quality === 'ultra') {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
      processedBuffer = await sharp(imageBuffer)
        .resize(targetWidth, targetHeight, {
          kernel: sharp.kernel.lanczos3,
          fit: 'inside',
          withoutEnlargement: false
        })
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å –¥–ª—è –ª—É—á—à–∏—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤
        .sharpen({ sigma: 1.0, flat: 1.0, jagged: 2.0 })
        // –£–ª—É—á—à–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        .normalize({ lower: 5, upper: 95 })
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale –¥–ª—è –ª—É—á—à–µ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        .grayscale()
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è —à—É–º–∞
        .blur(0.3)
        .png({ 
          compressionLevel: 0,
          adaptiveFiltering: false,
          palette: false
        })
        .toBuffer();
    } else {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      processedBuffer = await sharp(imageBuffer)
        .resize(targetWidth, targetHeight, {
          kernel: sharp.kernel.lanczos2,
          fit: 'inside'
        })
        .normalize()
        .png()
        .toBuffer();
    }
    
    console.log(`üìä –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞: ${(processedBuffer.length / 1024).toFixed(1)}KB`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—É—Ñ–µ—Ä –Ω–µ –ø—É—Å—Ç–æ–π
    if (processedBuffer.length === 0) {
      throw new Error('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–π');
    }
    
    console.log(`‚öôÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞: ${settings.quality}`);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è potrace –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
    const potraceOptions = getPotraceOptions(settings.quality);
    console.log(`üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã potrace:`, potraceOptions);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    return new Promise((resolve, reject) => {
      console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º potrace.trace...`);
      
      potrace.trace(processedBuffer, potraceOptions, (err, svg) => {
        if (err) {
          console.error('‚ùå –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê POTRACE:');
          console.error('   –¢–∏–ø –æ—à–∏–±–∫–∏:', typeof err);
          console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', err.message || err);
          console.error('   –°—Ç–µ–∫:', err.stack || '–Ω–µ—Ç —Å—Ç–µ–∫–∞');
          console.error('   –ö–æ–¥ –æ—à–∏–±–∫–∏:', err.code || '–Ω–µ—Ç –∫–æ–¥–∞');
          console.error('   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã potrace:', potraceOptions);
          console.error('   –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞:', processedBuffer.length);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ potrace
          resolve(createFallbackSVG(targetWidth, targetHeight, settings));
          return;
        }
        
        console.log(`‚úÖ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ potrace –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        console.log(`üìè –î–ª–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ SVG: ${svg ? svg.length : 0} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        if (!svg || svg.length === 0) {
          console.error('‚ùå Potrace –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π SVG');
          resolve(createFallbackSVG(targetWidth, targetHeight, settings));
          return;
        }
        
        // –û—á–∏—â–∞–µ–º –∏ —É–ª—É—á—à–∞–µ–º SVG
        const cleanedSVG = cleanAndOptimizeSVG(svg, targetWidth, targetHeight, settings);
        console.log(`‚úÖ SVG –æ—á–∏—â–µ–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω`);
        resolve(cleanedSVG);
      });
    });
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('   –°—Ç–µ–∫:', error.stack);
    console.error('   –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞:', imageBuffer ? imageBuffer.length : '–Ω–µ—Ç –±—É—Ñ–µ—Ä–∞');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    return createFallbackSVG(400, 400, settings);
  }
}

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–æ–≥–¥–∞ potrace –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
 */
async function tryAlternativeVectorization(imageBuffer, width, height, settings) {
  const sharp = require('sharp');
  
  try {
    console.log(`üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${width}x${height}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const { data, info } = await sharp(imageBuffer)
      .resize(width, height, { fit: 'inside' })
      .grayscale()
      .threshold(128) // –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
      .raw()
      .toBuffer({ resolveWithObject: true });
    
    console.log(`üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${data.length} –±–∞–π—Ç, ${info.width}x${info.height}`);
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—É—Ä–æ–≤
    const paths = [];
    const visited = new Set();
    
    for (let y = 0; y < info.height - 1; y++) {
      for (let x = 0; x < info.width - 1; x++) {
        const idx = y * info.width + x;
        
        if (!visited.has(idx) && data[idx] < 128) { // –¢–µ–º–Ω—ã–π –ø–∏–∫—Å–µ–ª—å
          const contour = traceContour(data, info.width, info.height, x, y, visited);
          if (contour.length > 10) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç—É—Ä–∞
            paths.push(simplifyPath(contour));
          }
        }
      }
    }
    
    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${paths.length} –∫–æ–Ω—Ç—É—Ä–æ–≤`);
    
    // –°–æ–∑–¥–∞–µ–º SVG –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤
    const pathElements = paths.slice(0, 50).map((path, i) => { // –ú–∞–∫—Å–∏–º—É–º 50 –∫–æ–Ω—Ç—É—Ä–æ–≤
      const pathData = path.map((point, j) => 
        j === 0 ? `M ${point.x} ${point.y}` : `L ${point.x} ${point.y}`
      ).join(' ') + ' Z';
      
      return `<path d="${pathData}" fill="#000000" opacity="0.8"/>`;
    }).join('\n  ');
    
    const svg = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
  ${pathElements}
  <metadata>
    <title>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</title>
    <description>–ö–æ–Ω—Ç—É—Ä–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, ${paths.length} –æ–±—ä–µ–∫—Ç–æ–≤</description>
  </metadata>
</svg>`;
    
    console.log(`‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞`);
    return svg;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    throw error;
  }
}

/**
 * –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∫–æ–Ω—Ç—É—Ä–∞ –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏
 */
function traceContour(data, width, height, startX, startY, visited) {
  const contour = [];
  const directions = [
    [-1, -1], [0, -1], [1, -1],
    [-1,  0],          [1,  0],
    [-1,  1], [0,  1], [1,  1]
  ];
  
  let x = startX;
  let y = startY;
  let steps = 0;
  const maxSteps = Math.min(width * height, 1000); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
  
  while (steps < maxSteps) {
    const idx = y * width + x;
    
    if (visited.has(idx) || x < 0 || x >= width || y < 0 || y >= height) {
      break;
    }
    
    if (data[idx] >= 128) { // –°–≤–µ—Ç–ª—ã–π –ø–∏–∫—Å–µ–ª—å - –≥—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç—É—Ä–∞
      break;
    }
    
    visited.add(idx);
    contour.push({ x, y });
    
    // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–º–Ω—ã–π –ø–∏–∫—Å–µ–ª—å
    let found = false;
    for (const [dx, dy] of directions) {
      const nx = x + dx;
      const ny = y + dy;
      const nidx = ny * width + nx;
      
      if (nx >= 0 && nx < width && ny >= 0 && ny < height && 
          !visited.has(nidx) && data[nidx] < 128) {
        x = nx;
        y = ny;
        found = true;
        break;
      }
    }
    
    if (!found) break;
    steps++;
  }
  
  return contour;
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–∏–µ –ø—É—Ç–∏ - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Ç–æ—á–∫–∏
 */
function simplifyPath(contour, tolerance = 2) {
  if (contour.length <= 2) return contour;
  
  const simplified = [contour[0]];
  
  for (let i = 1; i < contour.length - 1; i++) {
    const prev = contour[i - 1];
    const curr = contour[i];
    const next = contour[i + 1];
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–∏
    const distance = pointToLineDistance(curr, prev, next);
    
    if (distance > tolerance) {
      simplified.push(curr);
    }
  }
  
  simplified.push(contour[contour.length - 1]);
  return simplified;
}

/**
 * –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ç–æ—á–∫–∏ –¥–æ –ª–∏–Ω–∏–∏
 */
function pointToLineDistance(point, lineStart, lineEnd) {
  const A = point.x - lineStart.x;
  const B = point.y - lineStart.y;
  const C = lineEnd.x - lineStart.x;
  const D = lineEnd.y - lineStart.y;
  
  const dot = A * C + B * D;
  const lenSq = C * C + D * D;
  
  if (lenSq === 0) return Math.sqrt(A * A + B * B);
  
  const param = dot / lenSq;
  
  let xx, yy;
  if (param < 0) {
    xx = lineStart.x;
    yy = lineStart.y;
  } else if (param > 1) {
    xx = lineEnd.x;
    yy = lineEnd.y;
  } else {
    xx = lineStart.x + param * C;
    yy = lineStart.y + param * D;
  }
  
  const dx = point.x - xx;
  const dy = point.y - yy;
  return Math.sqrt(dx * dx + dy * dy);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ potrace –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
 */
function getPotraceOptions(quality) {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ - –≤—ã—Å–æ–∫–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—É—Ä–æ–≤
  switch (quality) {
    case 'ultra':
      return {
        threshold: 110,           // –ë–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
        turdSize: 1,             // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–ª–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        optTolerance: 0.1,       // –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∫—Ä–∏–≤—ã—Ö
        alphaMax: 1.0,           // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª–∞–¥–∫–æ—Å—Ç—å
        optCurve: true,          // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫—Ä–∏–≤—ã—Ö
        turnPolicy: 'minority'   // –ü–æ–ª–∏—Ç–∏–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ –¥–ª—è –ª—É—á—à–∏—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤
      };
    case 'high':
      return {
        threshold: 120,
        turdSize: 2,
        optTolerance: 0.15,
        alphaMax: 1.0,
        optCurve: true,
        turnPolicy: 'minority'
      };
    case 'standard':
    default:
      return {
        threshold: 130,
        turdSize: 3,
        optTolerance: 0.2,
        alphaMax: 0.8,
        optCurve: true,
        turnPolicy: 'minority'
      };
    case 'silkscreen':          // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
      return {
        threshold: 105,          // –û—á–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π
        turdSize: 1,            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–∂–µ —Å–∞–º—ã–µ –º–µ–ª–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        optTolerance: 0.05,     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        alphaMax: 1.0,
        optCurve: true,
        turnPolicy: 'minority'
      };
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç SVG –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
 */
function cleanAndOptimizeSVG(svg, width, height, settings) {
  try {
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
    let optimizedSVG = svg;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ viewBox
    optimizedSVG = optimizedSVG.replace(
      /<svg[^>]*>/,
      `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">`
    );
    
    // –î–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—É—Ç–∏
    if (settings.quality === 'silkscreen' || settings.quality === 'ultra') {
      // –£–ø—Ä–æ—â–∞–µ–º –æ—á–µ–Ω—å –º–µ–ª–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      optimizedSVG = optimizedSVG.replace(/d="[^"]*"/g, (match) => {
        const path = match.slice(3, -1);
        // –£–¥–∞–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã (–º–µ–Ω—å—à–µ 2 –ø–∏–∫—Å–µ–ª–µ–π)
        const simplifiedPath = path.replace(/[ML]\s*[\d.-]+\s*[\d.-]+\s*(?=[ML])/g, (segment, offset, string) => {
          const nextSegment = string.slice(offset + segment.length).match(/^[ML]\s*[\d.-]+\s*[\d.-]+/);
          if (nextSegment) {
            const coords1 = segment.match(/([\d.-]+)\s+([\d.-]+)/);
            const coords2 = nextSegment[0].match(/([\d.-]+)\s+([\d.-]+)/);
            if (coords1 && coords2) {
              const dist = Math.sqrt(
                Math.pow(parseFloat(coords2[1]) - parseFloat(coords1[1]), 2) +
                Math.pow(parseFloat(coords2[2]) - parseFloat(coords1[2]), 2)
              );
              if (dist < 2) return ''; // –£–¥–∞–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã
            }
          }
          return segment;
        });
        return `d="${simplifiedPath}"`;
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—á–∞—Ç–∏
      optimizedSVG = optimizedSVG.replace(
        /<svg([^>]*)>/,
        `<svg$1>
  <defs>
    <style>
      .silkscreen-path {
        fill-rule: evenodd;
        stroke-linejoin: round;
        stroke-linecap: round;
      }
    </style>
  </defs>`
      );
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å –∫ –ø—É—Ç—è–º
      optimizedSVG = optimizedSVG.replace(/<path/g, '<path class="silkscreen-path"');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const quality = settings.quality === 'silkscreen' ? '—à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è' : settings.quality;
    optimizedSVG = optimizedSVG.replace(/<\/svg>/, `
  <metadata>
    <title>–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏</title>
    <description>–ö–∞—á–µ—Å—Ç–≤–æ: ${quality}, –†–∞–∑–º–µ—Ä: ${width}x${height}, –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—á–∞—Ç–∏</description>
    <keywords>silkscreen, –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –ø–µ—á–∞—Ç—å, potrace</keywords>
  </metadata>
</svg>`);
    
    return optimizedSVG;
  } catch (error) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SVG:', error);
    return svg;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É SVG –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
 */
function createFallbackSVG(width, height, settings) {
  console.log('üîÑ –°–æ–∑–¥–∞–µ–º fallback SVG');
  
  return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="#f8f9fa"/>
  <rect x="20" y="20" width="${width-40}" height="${height-40}" fill="none" stroke="#6c757d" stroke-width="2" stroke-dasharray="5,5"/>
  <text x="${width/2}" y="${height/2-10}" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" fill="#6c757d">
    –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  </text>
  <text x="${width/2}" y="${height/2+10}" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" fill="#6c757d">
    ${settings.quality} –∫–∞—á–µ—Å—Ç–≤–æ
  </text>
  <metadata>
    <title>Fallback –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</title>
    <description>–†–µ–∑–µ—Ä–≤–Ω—ã–π SVG –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏</description>
  </metadata>
</svg>`;
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –∑–∞ —Ä–∞–∑
 */
async function batchVectorize(imageBuffers, options = {}) {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
  if (imageBuffers.length === 0) return [];
  
  const { buffer, name } = imageBuffers[0];
  console.log(`–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: ${name}`);
  
  try {
    const result = await vectorizeImage(buffer, name, options);
    return [{ ...result, originalName: name }];
  } catch (error) {
    return [{
      success: false,
      error: error.message,
      originalName: name
    }];
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
 */
async function vectorizeImage(imageBuffer, originalName = 'image', options = {}) {
  try {
    await ensureDirectories();
    
    const imageId = generateId();
    const { outputFormat = 'svg', quality = 'standard' } = options;
    const formatInfo = OUTPUT_FORMATS[outputFormat] || OUTPUT_FORMATS.svg;
    const filename = `vectorized_${imageId}${formatInfo.extension}`;
    const outputPath = path.join(outputDir, filename);
    
    console.log(`üé® –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${originalName}`);
    console.log(`üìä –ö–∞—á–µ—Å—Ç–≤–æ: ${quality}, –§–æ—Ä–º–∞—Ç: ${outputFormat}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
    const vectorResult = await silkscreenVectorize(imageBuffer, options);
    
    if (!vectorResult.success) {
      throw new Error('–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await fs.writeFile(outputPath, vectorResult.svgContent, 'utf8');
    
    console.log(`‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${filename}`);
    console.log(`üéØ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${vectorResult.detectedType}`);
    console.log(`‚ö° –ö–∞—á–µ—Å—Ç–≤–æ: ${vectorResult.quality}`);
    
    return {
      success: true,
      filename,
      filepath: outputPath,
      svgContent: vectorResult.svgContent,
      detectedType: vectorResult.detectedType,
      quality: vectorResult.quality,
      settings: vectorResult.settings,
      outputFormat,
      message: `–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (${vectorResult.quality}, ${vectorResult.detectedType})`
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return {
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    };
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */
async function generatePreviews(imageBuffer, originalName = 'image') {
  const previews = [];
  const qualities = ['draft', 'standard', 'premium'];
  
  console.log(`üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è: ${originalName}`);
  
  for (const quality of qualities) {
    try {
      const result = await silkscreenVectorize(imageBuffer, { quality });
      if (result.success) {
        previews.push({
          quality,
          qualityName: QUALITY_PRESETS[quality].name,
          description: QUALITY_PRESETS[quality].description,
          svgContent: result.svgContent,
          detectedType: result.detectedType,
          settings: result.settings
        });
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é ${quality}:`, error.message);
    }
  }
  
  return {
    success: previews.length > 0,
    previews,
    totalGenerated: previews.length
  };
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
 */
async function convertToFormat(svgContent, targetFormat, filename) {
  try {
    const formatInfo = OUTPUT_FORMATS[targetFormat];
    if (!formatInfo) {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${targetFormat}`);
    }
    
    const outputPath = path.join(outputDir, filename);
    
    switch (targetFormat) {
      case 'svg':
        await fs.writeFile(outputPath, svgContent, 'utf8');
        break;
        
      case 'eps':
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ EPS —á–µ—Ä–µ–∑ –æ–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ
        const epsContent = `%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 800 600
%%Creator: Advanced Vectorizer
%%Title: ${filename}
%%EndComments
/svgdict 100 dict def
svgdict begin
${svgContent}
end
%%EOF`;
        await fs.writeFile(outputPath, epsContent, 'utf8');
        break;
        
      case 'pdf':
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è PDF –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è SVG
        const pdfContent = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj
2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj
3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length ${svgContent.length}
>>
stream
${svgContent}
endstream
endobj
xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000206 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
${250 + svgContent.length}
%%EOF`;
        await fs.writeFile(outputPath, pdfContent, 'utf8');
        break;
        
      default:
        throw new Error(`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ ${targetFormat} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`);
    }
    
    return {
      success: true,
      filename,
      filepath: outputPath,
      format: targetFormat,
      mimeType: formatInfo.mimeType
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ú–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
 */
async function multiFormatVectorize(imageBuffer, originalName = 'image', options = {}) {
  try {
    const { formats = ['svg'], quality = 'standard' } = options;
    const results = [];
    
    console.log(`üé® –ú–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${originalName}`);
    console.log(`üìÅ –§–æ—Ä–º–∞—Ç—ã: ${formats.join(', ')}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º SVG
    const vectorResult = await silkscreenVectorize(imageBuffer, { ...options, outputFormat: 'svg' });
    
    if (!vectorResult.success) {
      throw new Error('–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    for (const format of formats) {
      const imageId = generateId();
      const formatInfo = OUTPUT_FORMATS[format] || OUTPUT_FORMATS.svg;
      const filename = `vectorized_${imageId}${formatInfo.extension}`;
      
      const convertResult = await convertToFormat(vectorResult.svgContent, format, filename);
      
      if (convertResult.success) {
        results.push({
          format,
          filename: convertResult.filename,
          filepath: convertResult.filepath,
          mimeType: convertResult.mimeType,
          description: formatInfo.description
        });
      }
    }
    
    return {
      success: results.length > 0,
      originalName,
      detectedType: vectorResult.detectedType,
      quality: vectorResult.quality,
      formats: results,
      svgContent: vectorResult.svgContent,
      message: `–°–æ–∑–¥–∞–Ω–æ ${results.length} —Ñ–æ—Ä–º–∞—Ç–æ–≤`
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SVG –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
async function optimizeForUsage(svgContent, usage = 'web') {
  try {
    let optimizedSvg = svgContent;
    
    switch (usage) {
      case 'web':
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–µ–±–∞ - –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
        optimizedSvg = svgContent
          .replace(/\s+/g, ' ')
          .replace(/>\s+</g, '><')
          .trim();
        break;
        
      case 'print':
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ - –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        optimizedSvg = svgContent.replace(
          /<svg([^>]*)>/,
          '<svg$1 xmlns:xlink="http://www.w3.org/1999/xlink" print-quality="high">'
        );
        break;
        
      case 'logo':
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ - —á–µ—Ç–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã
        optimizedSvg = svgContent.replace(
          /stroke-width="[^"]*"/g,
          'stroke-width="2"'
        );
        break;
        
      case 'icon':
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–∫–æ–Ω–æ–∫ - —É–ø—Ä–æ—â–µ–Ω–∏–µ
        optimizedSvg = svgContent
          .replace(/opacity="[^"]*"/g, '')
          .replace(/\s+/g, ' ');
        break;
    }
    
    return {
      success: true,
      optimizedSvg,
      usage,
      originalSize: svgContent.length,
      optimizedSize: optimizedSvg.length,
      compressionRatio: ((svgContent.length - optimizedSvg.length) / svgContent.length * 100).toFixed(1)
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –æ–ø—Ü–∏–π
 */
async function professionalVectorize(imageBuffer, originalName = 'image', options = {}) {
  const {
    quality = 'premium',
    formats = ['svg'],
    generatePreviews: shouldGeneratePreviews = false,
    optimizeFor = 'web',
    includeMetadata = true
  } = options;
  
  try {
    await ensureDirectories();
    console.log(`üéØ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${originalName}`);
    
    const results = {
      originalName,
      timestamp: new Date().toISOString(),
      success: true
    };
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if (shouldGeneratePreviews) {
      console.log('üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é...');
      const previewResult = await generatePreviews(imageBuffer, originalName);
      results.previews = previewResult.previews;
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    console.log('üîÑ –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const mainResult = await multiFormatVectorize(imageBuffer, originalName, {
      quality,
      formats,
      ...options
    });
    
    if (!mainResult.success) {
      throw new Error(mainResult.error);
    }
    
    results.main = mainResult;
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if (optimizeFor && mainResult.svgContent) {
      console.log(`‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è: ${optimizeFor}`);
      const optimizationResult = await optimizeForUsage(mainResult.svgContent, optimizeFor);
      results.optimization = optimizationResult;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    if (includeMetadata) {
      results.metadata = {
        detectedType: mainResult.detectedType,
        quality: mainResult.quality,
        formatsCount: mainResult.formats.length,
        processingTime: Date.now(),
        version: '2.0'
      };
    }
    
    console.log(`‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤: ${mainResult.formats.length}`);
    
    return results;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return {
      success: false,
      error: error.message,
      originalName
    };
  }
}

/**
 * –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
 */
async function vectorizeFromUrl(imageUrl, options = {}) {
  try {
    console.log(`üåê –ù–∞—á–∏–Ω–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ URL: ${imageUrl.substring(0, 100)}...`);
    
    // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const https = require('https');
    const http = require('http');
    
    const downloadImage = (url) => {
      return new Promise((resolve, reject) => {
        const client = url.startsWith('https') ? https : http;
        
        client.get(url, (response) => {
          if (response.statusCode !== 200) {
            reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));
            return;
          }
          
          const chunks = [];
          response.on('data', (chunk) => chunks.push(chunk));
          response.on('end', () => {
            const buffer = Buffer.concat(chunks);
            resolve(buffer);
          });
        }).on('error', reject);
      });
    };
    
    const imageBuffer = await downloadImage(imageUrl);
    console.log(`üì• –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ: ${(imageBuffer.length / 1024).toFixed(1)}KB`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let originalName = 'downloaded_image';
    try {
      const urlObj = new URL(imageUrl);
      const pathname = urlObj.pathname;
      if (pathname && pathname !== '/') {
        originalName = path.basename(pathname) || 'downloaded_image';
      }
    } catch (e) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    console.log(`üéØ –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: ${originalName}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const result = await vectorizeImage(imageBuffer, originalName, options);
    
    if (result.success) {
      console.log(`‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ URL –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result.filename}`);
      return {
        success: true,
        filename: result.filename,
        filepath: result.filepath,
        svgContent: result.svgContent,
        detectedType: result.detectedType,
        quality: result.quality,
        settings: result.settings,
        optimization: result.optimization,
        sourceUrl: imageUrl,
        message: `–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ URL –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (${result.quality}, ${result.detectedType})`
      };
    } else {
      throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ URL:', error);
    return {
      success: false,
      error: error.message,
      sourceUrl: imageUrl
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
module.exports = {
  vectorizeImage,
  vectorizeFromUrl,
  batchVectorize,
  silkscreenVectorize,
  advancedVectorize,
  preprocessImageForSilkscreen,
  quantizeColorsAI,
  createSilkscreenSVG,
  extractDominantColors,
  createColorMask,
  createAdobeColorMask,
  vectorizeColorLayer,
  combineColorLayers,
  createMonochromeBackup,
  optimizeSVGSize,
  detectContentType,
  generatePreviews,
  convertToFormat,
  multiFormatVectorize,
  optimizeForUsage,
  professionalVectorize,
  vectorizeFromUrl,
  silkscreenVectorize,
  ADOBE_SILKSCREEN_PRESET,
  OUTPUT_FORMATS,
  CONTENT_TYPES
};