/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ AI-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
 */

const sharp = require('sharp');
const potrace = require('potrace');
const path = require('path');
const fs = require('fs').promises;
const crypto = require('crypto');

// –£—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const QUALITY_PRESETS = {
  draft: {
    name: '–ß–µ—Ä–Ω–æ–≤–∏–∫',
    description: '–ë—ã—Å—Ç—Ä–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞',
    settings: {
      maxSize: 400,
      threshold: 140,
      optTolerance: 1.0,
      turdSize: 150,
      alphaMax: 0.8,
      optCurve: false
    }
  },
  standard: {
    name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç',
    description: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å',
    settings: {
      maxSize: 800,
      threshold: 128,
      optTolerance: 0.4,
      turdSize: 100,
      alphaMax: 1.0,
      optCurve: true
    }
  },
  premium: {
    name: '–ü—Ä–µ–º–∏—É–º',
    description: '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
    settings: {
      maxSize: 1200,
      threshold: 120,
      optTolerance: 0.2,
      turdSize: 50,
      alphaMax: 1.3,
      optCurve: true
    }
  },
  ultra: {
    name: '–£–ª—å—Ç—Ä–∞',
    description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–µ—á–∞—Ç–∏ –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π',
    settings: {
      maxSize: 1600,
      threshold: 115,
      optTolerance: 0.1,
      turdSize: 25,
      alphaMax: 1.5,
      optCurve: true
    }
  }
};

// –¢–∏–ø—ã –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
const OUTPUT_FORMATS = {
  svg: {
    extension: '.svg',
    mimeType: 'image/svg+xml',
    description: '–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞'
  },
  eps: {
    extension: '.eps',
    mimeType: 'application/postscript',
    description: 'Encapsulated PostScript (–ø–µ—á–∞—Ç—å)'
  },
  pdf: {
    extension: '.pdf',
    mimeType: 'application/pdf',
    description: '–í–µ–∫—Ç–æ—Ä–Ω—ã–π PDF –¥–æ–∫—É–º–µ–Ω—Ç'
  }
};

// –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const CONTENT_TYPES = {
  logo: {
    name: '–õ–æ–≥–æ—Ç–∏–ø',
    optimizations: {
      threshold: 130,
      optTolerance: 0.3,
      turdSize: 75,
      colorReduction: true,
      maxColors: 4
    }
  },
  photo: {
    name: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
    optimizations: {
      threshold: 120,
      optTolerance: 0.2,
      turdSize: 40,
      colorReduction: false,
      maxColors: 12
    }
  },
  artwork: {
    name: '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
    optimizations: {
      threshold: 125,
      optTolerance: 0.15,
      turdSize: 30,
      colorReduction: false,
      maxColors: 8
    }
  },
  text: {
    name: '–¢–µ–∫—Å—Ç/–°—Ö–µ–º–∞',
    optimizations: {
      threshold: 140,
      optTolerance: 0.5,
      turdSize: 100,
      colorReduction: true,
      maxColors: 2
    }
  }
};

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
const outputDir = path.join(__dirname, 'output', 'vectorizer');

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
async function ensureDirectories() {
  try {
    await fs.mkdir(outputDir, { recursive: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:', error);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
function generateId() {
  return crypto.randomBytes(8).toString('hex');
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function detectContentType(imageBuffer) {
  try {
    const metadata = await sharp(imageBuffer).metadata();
    const stats = await sharp(imageBuffer).stats();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const { width, height, channels } = metadata;
    const aspectRatio = width / height;
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
    if (channels === 1 || (stats.channels[0].mean > 200 && stats.channels[0].std < 50)) {
      return 'text'; // –ß–µ—Ä–Ω–æ-–±–µ–ª–æ–µ —Å –≤—ã—Å–æ–∫–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º
    } else if (aspectRatio > 2 || aspectRatio < 0.5) {
      return 'logo'; // –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
    } else if (width > 1500 && height > 1500) {
      return 'photo'; // –ë–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    } else {
      return 'artwork'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  } catch (error) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º artwork');
    return 'artwork';
  }
}

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
 */
async function advancedVectorize(imageBuffer, options = {}) {
  const {
    quality = 'standard',
    contentType = null,
    outputFormat = 'svg',
    autoOptimize = true
  } = options;
  
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    const detectedType = contentType || (autoOptimize ? await detectContentType(imageBuffer) : 'artwork');
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    const qualitySettings = QUALITY_PRESETS[quality] || QUALITY_PRESETS.standard;
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentOptimizations = CONTENT_TYPES[detectedType]?.optimizations || {};
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const finalSettings = {
      ...qualitySettings.settings,
      ...contentOptimizations
    };
    
    console.log(`–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –∫–∞—á–µ—Å—Ç–≤–æ=${quality}, —Ç–∏–ø=${detectedType}, —Ñ–æ—Ä–º–∞—Ç=${outputFormat}`);
    
    // –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const processedImage = await sharp(imageBuffer)
      .resize(finalSettings.maxSize, finalSettings.maxSize, { 
        fit: 'inside', 
        withoutEnlargement: true 
      })
      .sharpen({ sigma: 1.2 })
      .normalise()
      .png()
      .toBuffer();
    
    // –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const svgContent = await new Promise((resolve, reject) => {
      potrace.trace(processedImage, {
        background: '#FFFFFF',
        color: '#000000',
        threshold: finalSettings.threshold,
        optTolerance: finalSettings.optTolerance,
        turdSize: finalSettings.turdSize,
        turnPolicy: potrace.Potrace.TURNPOLICY_MINORITY,
        alphaMax: finalSettings.alphaMax,
        optCurve: finalSettings.optCurve,
        flipColors: false
      }, (err, svg) => {
        if (err) reject(err);
        else resolve(svg);
      });
    });
    
    return {
      success: true,
      svgContent,
      settings: finalSettings,
      detectedType,
      quality: qualitySettings.name
    };
    
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
  }
}

/**
 * –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
async function batchVectorize(imageBuffers, options = {}) {
  const results = [];
  
  for (let i = 0; i < imageBuffers.length; i++) {
    const { buffer, name } = imageBuffers[i];
    console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${i + 1}/${imageBuffers.length}: ${name}`);
    
    try {
      const result = await vectorizeImage(buffer, name, options);
      results.push({ ...result, originalName: name });
    } catch (error) {
      results.push({
        success: false,
        error: error.message,
        originalName: name
      });
    }
  }
  
  return results;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
 */
async function vectorizeImage(imageBuffer, originalName = 'image', options = {}) {
  try {
    await ensureDirectories();
    
    const imageId = generateId();
    const { outputFormat = 'svg', quality = 'standard' } = options;
    const formatInfo = OUTPUT_FORMATS[outputFormat] || OUTPUT_FORMATS.svg;
    const filename = `vectorized_${imageId}${formatInfo.extension}`;
    const outputPath = path.join(outputDir, filename);
    
    console.log(`üé® –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${originalName}`);
    console.log(`üìä –ö–∞—á–µ—Å—Ç–≤–æ: ${quality}, –§–æ—Ä–º–∞—Ç: ${outputFormat}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const vectorResult = await advancedVectorize(imageBuffer, options);
    
    if (!vectorResult.success) {
      throw new Error('–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await fs.writeFile(outputPath, vectorResult.svgContent, 'utf8');
    
    console.log(`‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${filename}`);
    console.log(`üéØ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${vectorResult.detectedType}`);
    console.log(`‚ö° –ö–∞—á–µ—Å—Ç–≤–æ: ${vectorResult.quality}`);
    
    return {
      success: true,
      filename,
      filepath: outputPath,
      svgContent: vectorResult.svgContent,
      detectedType: vectorResult.detectedType,
      quality: vectorResult.quality,
      settings: vectorResult.settings,
      outputFormat,
      message: `–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (${vectorResult.quality}, ${vectorResult.detectedType})`
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return {
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    };
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */
async function generatePreviews(imageBuffer, originalName = 'image') {
  const previews = [];
  const qualities = ['draft', 'standard', 'premium'];
  
  console.log(`üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è: ${originalName}`);
  
  for (const quality of qualities) {
    try {
      const result = await advancedVectorize(imageBuffer, { quality });
      if (result.success) {
        previews.push({
          quality,
          qualityName: QUALITY_PRESETS[quality].name,
          description: QUALITY_PRESETS[quality].description,
          svgContent: result.svgContent,
          detectedType: result.detectedType,
          settings: result.settings
        });
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é ${quality}:`, error.message);
    }
  }
  
  return {
    success: previews.length > 0,
    previews,
    totalGenerated: previews.length
  };
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
 */
async function convertToFormat(svgContent, targetFormat, filename) {
  try {
    const formatInfo = OUTPUT_FORMATS[targetFormat];
    if (!formatInfo) {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${targetFormat}`);
    }
    
    const outputPath = path.join(outputDir, filename);
    
    switch (targetFormat) {
      case 'svg':
        await fs.writeFile(outputPath, svgContent, 'utf8');
        break;
        
      case 'eps':
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ EPS —á–µ—Ä–µ–∑ –æ–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ
        const epsContent = `%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 800 600
%%Creator: Advanced Vectorizer
%%Title: ${filename}
%%EndComments
/svgdict 100 dict def
svgdict begin
${svgContent}
end
%%EOF`;
        await fs.writeFile(outputPath, epsContent, 'utf8');
        break;
        
      case 'pdf':
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è PDF –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è SVG
        const pdfContent = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj
2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj
3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length ${svgContent.length}
>>
stream
${svgContent}
endstream
endobj
xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000206 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
${250 + svgContent.length}
%%EOF`;
        await fs.writeFile(outputPath, pdfContent, 'utf8');
        break;
        
      default:
        throw new Error(`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ ${targetFormat} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`);
    }
    
    return {
      success: true,
      filename,
      filepath: outputPath,
      format: targetFormat,
      mimeType: formatInfo.mimeType
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ú–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
 */
async function multiFormatVectorize(imageBuffer, originalName = 'image', options = {}) {
  try {
    const { formats = ['svg'], quality = 'standard' } = options;
    const results = [];
    
    console.log(`üé® –ú–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${originalName}`);
    console.log(`üìÅ –§–æ—Ä–º–∞—Ç—ã: ${formats.join(', ')}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º SVG
    const vectorResult = await advancedVectorize(imageBuffer, { ...options, outputFormat: 'svg' });
    
    if (!vectorResult.success) {
      throw new Error('–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    for (const format of formats) {
      const imageId = generateId();
      const formatInfo = OUTPUT_FORMATS[format] || OUTPUT_FORMATS.svg;
      const filename = `vectorized_${imageId}${formatInfo.extension}`;
      
      const convertResult = await convertToFormat(vectorResult.svgContent, format, filename);
      
      if (convertResult.success) {
        results.push({
          format,
          filename: convertResult.filename,
          filepath: convertResult.filepath,
          mimeType: convertResult.mimeType,
          description: formatInfo.description
        });
      }
    }
    
    return {
      success: results.length > 0,
      originalName,
      detectedType: vectorResult.detectedType,
      quality: vectorResult.quality,
      formats: results,
      svgContent: vectorResult.svgContent,
      message: `–°–æ–∑–¥–∞–Ω–æ ${results.length} —Ñ–æ—Ä–º–∞—Ç–æ–≤`
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SVG –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
async function optimizeForUsage(svgContent, usage = 'web') {
  try {
    let optimizedSvg = svgContent;
    
    switch (usage) {
      case 'web':
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–µ–±–∞ - –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
        optimizedSvg = svgContent
          .replace(/\s+/g, ' ')
          .replace(/>\s+</g, '><')
          .trim();
        break;
        
      case 'print':
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ - –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        optimizedSvg = svgContent.replace(
          /<svg([^>]*)>/,
          '<svg$1 xmlns:xlink="http://www.w3.org/1999/xlink" print-quality="high">'
        );
        break;
        
      case 'logo':
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ - —á–µ—Ç–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã
        optimizedSvg = svgContent.replace(
          /stroke-width="[^"]*"/g,
          'stroke-width="2"'
        );
        break;
        
      case 'icon':
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–∫–æ–Ω–æ–∫ - —É–ø—Ä–æ—â–µ–Ω–∏–µ
        optimizedSvg = svgContent
          .replace(/opacity="[^"]*"/g, '')
          .replace(/\s+/g, ' ');
        break;
    }
    
    return {
      success: true,
      optimizedSvg,
      usage,
      originalSize: svgContent.length,
      optimizedSize: optimizedSvg.length,
      compressionRatio: ((svgContent.length - optimizedSvg.length) / svgContent.length * 100).toFixed(1)
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –æ–ø—Ü–∏–π
 */
async function professionalVectorize(imageBuffer, originalName = 'image', options = {}) {
  const {
    quality = 'premium',
    formats = ['svg'],
    generatePreviews: shouldGeneratePreviews = false,
    optimizeFor = 'web',
    includeMetadata = true
  } = options;
  
  try {
    await ensureDirectories();
    console.log(`üéØ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${originalName}`);
    
    const results = {
      originalName,
      timestamp: new Date().toISOString(),
      success: true
    };
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if (shouldGeneratePreviews) {
      console.log('üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é...');
      const previewResult = await generatePreviews(imageBuffer, originalName);
      results.previews = previewResult.previews;
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    console.log('üîÑ –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const mainResult = await multiFormatVectorize(imageBuffer, originalName, {
      quality,
      formats,
      ...options
    });
    
    if (!mainResult.success) {
      throw new Error(mainResult.error);
    }
    
    results.main = mainResult;
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if (optimizeFor && mainResult.svgContent) {
      console.log(`‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è: ${optimizeFor}`);
      const optimizationResult = await optimizeForUsage(mainResult.svgContent, optimizeFor);
      results.optimization = optimizationResult;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    if (includeMetadata) {
      results.metadata = {
        detectedType: mainResult.detectedType,
        quality: mainResult.quality,
        formatsCount: mainResult.formats.length,
        processingTime: Date.now(),
        version: '2.0'
      };
    }
    
    console.log(`‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤: ${mainResult.formats.length}`);
    
    return results;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return {
      success: false,
      error: error.message,
      originalName
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
module.exports = {
  vectorizeImage,
  batchVectorize,
  advancedVectorize,
  detectContentType,
  generatePreviews,
  convertToFormat,
  multiFormatVectorize,
  optimizeForUsage,
  professionalVectorize,
  QUALITY_PRESETS,
  OUTPUT_FORMATS,
  CONTENT_TYPES
};