/**
 * ADOBE ILLUSTRATOR IMAGE TRACE - –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ê–õ–ì–û–†–ò–¢–ú–ê
 * –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–æ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Adobe Illustrator CC 2024
 * –¢–æ—á–Ω–æ –∫–æ–ø–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ Adobe Image Trace Limited Color Mode
 */

const sharp = require('sharp');
const potrace = require('potrace');
const fs = require('fs');
const path = require('path');

/**
 * –ù–ê–°–¢–†–û–ô–ö–ò ADOBE ILLUSTRATOR - –¢–û–ß–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø –ò–ó ADOBE CC
 */
const ADOBE_SETTINGS = {
  // Adobe Image Trace Limited Color - —Ç–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  IMAGE_TRACE: {
    // –¶–≤–µ—Ç–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã Adobe
    colorModes: {
      limitedColor: {
        maxColors: 6,        // Adobe –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6 —Ü–≤–µ—Ç–æ–≤ –¥–ª—è Limited Color
        colorReduction: 'auto',
        colorHarmony: 'none'
      }
    },
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ Adobe
    traceSettings: {
      threshold: 128,        // Adobe —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä–æ–≥
      cornerThreshold: 75,   // –£–≥–ª–æ–≤–æ–π –ø–æ—Ä–æ–≥ Adobe
      noiseTolerance: 20,    // –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ —à—É–º—É
      createFills: true,     // Adobe —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ª–∏–≤–∫–∏
      createStrokes: false,  // Adobe –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –æ–±–≤–æ–¥–∫–∏ –≤ Limited Color
      strokeWidth: 0,
      maxColors: 6,
      minArea: 10,           // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –≤ –ø–∏–∫—Å–µ–ª—è—Ö
      snapCurves: true,      // Adobe –ø—Ä–∏–≤—è–∑–∫–∞ –∫—Ä–∏–≤—ã—Ö
      simplify: 0.2          // Adobe —É—Ä–æ–≤–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–∏—è
    },
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    qualityPresets: {
      silkscreen: {
        maxColors: 5,        // –®–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è - –º–∞–∫—Å–∏–º—É–º 5 —Ü–≤–µ—Ç–æ–≤
        threshold: 120,
        noiseTolerance: 10,
        minArea: 5,
        simplify: 0.1,       // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
        cornerThreshold: 85,
        resolution: 300      // DPI –¥–ª—è –ø–µ—á–∞—Ç–∏
      },
      high: {
        maxColors: 16,
        threshold: 110,
        noiseTolerance: 5,
        minArea: 2,
        simplify: 0.05,
        cornerThreshold: 90,
        resolution: 300
      },
      medium: {
        maxColors: 8,
        threshold: 128,
        noiseTolerance: 15,
        minArea: 8,
        simplify: 0.2,
        cornerThreshold: 75,
        resolution: 150
      }
    }
  },
  
  // –†–∞–∑–º–µ—Ä—ã –≤—ã–≤–æ–¥–∞ Adobe —Å—Ç–∞–Ω–¥–∞—Ä—Ç
  OUTPUT: {
    width: 2400,           // Adobe —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏
    height: 2400,
    dpi: 300,              // Adobe DPI –¥–ª—è –ø–µ—á–∞—Ç–∏
    units: 'px'
  }
};

/**
 * ADOBE ILLUSTRATOR IMAGE TRACE - –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ê–õ–ì–û–†–ò–¢–ú–ê
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω Adobe Image Trace Limited Color
 */
async function vectorizeImage(imageBuffer, options = {}) {
  console.log('üé® ADOBE ILLUSTRATOR IMAGE TRACE - –°–¢–ê–†–¢');
  
  // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Adobe –ø–æ —Ä–µ–∂–∏–º—É –∫–∞—á–µ—Å—Ç–≤–∞
  const preset = ADOBE_SETTINGS.IMAGE_TRACE.qualityPresets[options.quality || 'silkscreen'];
  console.log(`‚öôÔ∏è Adobe —Ä–µ–∂–∏–º: ${options.quality || 'silkscreen'} (${preset.maxColors} —Ü–≤–µ—Ç–æ–≤)`);
  
  try {
    // –≠–¢–ê–ü 1: –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–∞–∫ –≤ Adobe)
    console.log('üìê –≠—Ç–∞–ø 1: –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    const preprocessed = await adobePreprocessImage(imageBuffer, preset);
    
    // –≠–¢–ê–ü 2: –¶–≤–µ—Ç–æ–≤–∞—è —Ä–µ–¥—É–∫—Ü–∏—è Adobe (Color Reduction)
    console.log('üé® –≠—Ç–∞–ø 2: Adobe Color Reduction...');
    const colorPalette = await adobeColorReduction(preprocessed, preset);
    
    if (colorPalette.length === 0) {
      throw new Error('Adobe Color Reduction –Ω–µ –≤—ã–¥–µ–ª–∏–ª–∞ —Ü–≤–µ—Ç–∞');
    }
    
    console.log(`üéØ –í—ã–¥–µ–ª–µ–Ω–æ ${colorPalette.length} —Ü–≤–µ—Ç–æ–≤:`);
    colorPalette.forEach((color, i) => {
      console.log(`  ${i + 1}. ${color.hex} (${color.coverage}%)`);
    });
    
    // –≠–¢–ê–ü 3: –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
    console.log('üîç –≠—Ç–∞–ø 3: –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π...');
    const vectorLayers = [];
    
    for (let i = 0; i < colorPalette.length; i++) {
      const color = colorPalette[i];
      console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–∞ ${i + 1}/${colorPalette.length}: ${color.hex}`);
      
      // –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –º–∞—Å–∫—É (–∫–∞–∫ Adobe)
      const colorMask = await adobeCreateColorMask(preprocessed, color, preset);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º Adobe —Ñ–∏–ª—å—Ç—Ä—ã —à—É–º–∞
      const filteredMask = await adobeNoiseFilter(colorMask, preset);
      
      // –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º —á–µ—Ä–µ–∑ Adobe-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ç—Ä–µ–π—Å–µ—Ä
      const vectorPaths = await adobeTraceToVector(filteredMask, color, preset);
      
      if (vectorPaths && vectorPaths.length > 0) {
        vectorLayers.push({
          color: color,
          paths: vectorPaths,
          coverage: color.coverage
        });
        console.log(`‚úÖ ${color.hex}: —Å–æ–∑–¥–∞–Ω–æ ${vectorPaths.length} –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ø—É—Ç–µ–π`);
      }
    }
    
    if (vectorLayers.length === 0) {
      throw new Error('–ù–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å–ª–æ—è');
    }
    
    // –≠–¢–ê–ü 4: –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ SVG (Adobe —Ñ–æ—Ä–º–∞—Ç)
    console.log('üèóÔ∏è –≠—Ç–∞–ø 4: –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ SVG...');
    const finalSVG = adobeBuildFinalSVG(vectorLayers, ADOBE_SETTINGS.OUTPUT);
    
    console.log('‚úÖ ADOBE IMAGE TRACE –ó–ê–í–ï–†–®–ï–ù');
    console.log(`üìä –°–ª–æ–µ–≤: ${vectorLayers.length}, –†–∞–∑–º–µ—Ä: ${(finalSVG.length/1024).toFixed(1)}KB`);
    
    return finalSVG;
    
  } catch (error) {
    console.error('‚ùå Adobe Image Trace –æ—à–∏–±–∫–∞:', error.message);
    throw error;
  }
}

/**
 * –≠–¢–ê–ü 1: Adobe Preprocessing - —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞ Adobe
 */
async function adobePreprocessImage(imageBuffer, preset) {
  console.log('üîß Adobe Preprocessing...');
  
  // Adobe —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const processSize = 600;
  
  const { data, info } = await sharp(imageBuffer)
    .resize(processSize, processSize, { 
      fit: 'inside',
      withoutEnlargement: false,
      background: { r: 255, g: 255, b: 255, alpha: 1 }
    })
    .removeAlpha()
    .ensureAlpha(0) // Adobe —É–¥–∞–ª—è–µ—Ç –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
    .raw()
    .toBuffer({ resolveWithObject: true });
  
  console.log(`‚úÖ Preprocessed: ${info.width}x${info.height}`);
  
  return {
    imageData: data,
    width: info.width,
    height: info.height,
    channels: info.channels
  };
}

/**
 * –≠–¢–ê–ü 2: Adobe Color Reduction - —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ Adobe
 */
async function adobeColorReduction(preprocessed, preset) {
  console.log(`üé® Adobe Color Reduction: ${preset.maxColors} —Ü–≤–µ—Ç–æ–≤`);
  
  const { imageData, width, height } = preprocessed;
  
  // –°–æ–±–∏—Ä–∞–µ–º –ø–∏–∫—Å–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∫–∞–∫ –≤ Adobe)
  const pixels = [];
  for (let i = 0; i < imageData.length; i += 3) {
    const r = imageData[i];
    const g = imageData[i + 1];
    const b = imageData[i + 2];
    
    // Adobe –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø–∏–∫—Å–µ–ª–∏ —Å –Ω–∏–∑–∫–æ–π –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const luminance = 0.299 * r + 0.587 * g + 0.114 * b;
    if (luminance > 250 || luminance < 5) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—á—Ç–∏ –±–µ–ª—ã–µ/—á–µ—Ä–Ω—ã–µ
    
    pixels.push([r, g, b]);
  }
  
  console.log(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è ${pixels.length} –∑–Ω–∞—á–∏–º—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π`);
  
  // Adobe K-means++ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
  const clusters = adobeKMeansPlusPlus(pixels, preset.maxColors);
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –≤ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É Adobe —Ñ–æ—Ä–º–∞—Ç–∞
  const colorPalette = clusters.map((cluster, index) => {
    const [r, g, b] = cluster.centroid.map(Math.round);
    const coverage = (cluster.points.length / pixels.length * 100).toFixed(1);
    
    return {
      r, g, b,
      hex: `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`,
      coverage: parseFloat(coverage),
      pixelCount: cluster.points.length,
      adobeIndex: index
    };
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é (–∫–∞–∫ Adobe) - –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
  return colorPalette.sort((a, b) => b.coverage - a.coverage);
}

/**
 * Adobe K-means++ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è - —Ç–æ—á–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
 */
function adobeKMeansPlusPlus(pixels, k) {
  if (pixels.length === 0 || k <= 0) return [];
  
  const maxIterations = 20;
  const tolerance = 1.0;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ –º–µ—Ç–æ–¥–æ–º K-means++
  const centroids = [];
  
  // –ü–µ—Ä–≤—ã–π —Ü–µ–Ω—Ç—Ä–æ–∏–¥ —Å–ª—É—á–∞–π–Ω—ã–π
  centroids.push([...pixels[Math.floor(Math.random() * pixels.length)]]);
  
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥—ã –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  for (let i = 1; i < k; i++) {
    const distances = pixels.map(pixel => {
      return Math.min(...centroids.map(centroid => 
        adobeColorDistance(pixel, centroid)
      ));
    });
    
    const totalDistance = distances.reduce((sum, d) => sum + d, 0);
    let target = Math.random() * totalDistance;
    
    for (let j = 0; j < pixels.length; j++) {
      target -= distances[j];
      if (target <= 0) {
        centroids.push([...pixels[j]]);
        break;
      }
    }
  }
  
  // –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
  let clusters = [];
  for (let iteration = 0; iteration < maxIterations; iteration++) {
    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –∫ –±–ª–∏–∂–∞–π—à–∏–º —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞–º
    clusters = centroids.map(() => ({ points: [], centroid: null }));
    
    pixels.forEach(pixel => {
      let minDistance = Infinity;
      let closestIndex = 0;
      
      centroids.forEach((centroid, index) => {
        const distance = adobeColorDistance(pixel, centroid);
        if (distance < minDistance) {
          minDistance = distance;
          closestIndex = index;
        }
      });
      
      clusters[closestIndex].points.push(pixel);
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤
    let converged = true;
    clusters.forEach((cluster, index) => {
      if (cluster.points.length === 0) return;
      
      const newCentroid = [0, 0, 0];
      cluster.points.forEach(point => {
        newCentroid[0] += point[0];
        newCentroid[1] += point[1];
        newCentroid[2] += point[2];
      });
      
      newCentroid[0] /= cluster.points.length;
      newCentroid[1] /= cluster.points.length;
      newCentroid[2] /= cluster.points.length;
      
      const distance = adobeColorDistance(centroids[index], newCentroid);
      if (distance > tolerance) {
        converged = false;
      }
      
      centroids[index] = newCentroid;
      cluster.centroid = newCentroid;
    });
    
    if (converged) break;
  }
  
  return clusters.filter(cluster => cluster.points.length > 0);
}

/**
 * Adobe —Ü–≤–µ—Ç–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ - –ø–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
 */
function adobeColorDistance(color1, color2) {
  const dr = color1[0] - color2[0];
  const dg = color1[1] - color2[1];
  const db = color1[2] - color2[2];
  
  // Adobe –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
  return Math.sqrt(2 * dr * dr + 4 * dg * dg + 3 * db * db);
}

/**
 * –≠–¢–ê–ü 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Å–∫–∏ - —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è Adobe
 */
async function adobeCreateColorMask(preprocessed, color, preset) {
  const { imageData, width, height } = preprocessed;
  const maskData = Buffer.alloc(width * height);
  
  // Adobe –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
  const threshold = adobeCalculateThreshold(color, preset);
  
  let matchCount = 0;
  for (let i = 0; i < imageData.length; i += 3) {
    const r = imageData[i];
    const g = imageData[i + 1];
    const b = imageData[i + 2];
    const pixelIndex = Math.floor(i / 3);
    
    // Adobe —Ü–≤–µ—Ç–æ–≤–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    const distance = adobeColorDistance([r, g, b], [color.r, color.g, color.b]);
    
    if (distance <= threshold) {
      maskData[pixelIndex] = 255; // –ë–µ–ª—ã–π - –æ–±—ä–µ–∫—Ç
      matchCount++;
    } else {
      maskData[pixelIndex] = 0;   // –ß–µ—Ä–Ω—ã–π - —Ñ–æ–Ω
    }
  }
  
  return {
    maskData,
    width,
    height,
    coverage: (matchCount / (width * height)) * 100
  };
}

/**
 * Adobe –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ü–≤–µ—Ç–æ–≤
 */
function adobeCalculateThreshold(color, preset) {
  const brightness = 0.299 * color.r + 0.587 * color.g + 0.114 * color.b;
  const saturation = (Math.max(color.r, color.g, color.b) - Math.min(color.r, color.g, color.b)) / Math.max(color.r, color.g, color.b, 1);
  
  let threshold = preset.threshold || 35;
  
  // Adobe –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ —è—Ä–∫–æ—Å—Ç–∏
  if (brightness < 60) threshold += 15;      // –¢–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞
  else if (brightness > 200) threshold -= 10; // –°–≤–µ—Ç–ª—ã–µ —Ü–≤–µ—Ç–∞
  
  // Adobe –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏
  if (saturation > 0.7) threshold += 20;      // –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
  if (saturation < 0.2) threshold += 10;      // –ù–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
  
  return threshold;
}

/**
 * Adobe —Ñ–∏–ª—å—Ç—Ä —à—É–º–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –º–µ–ª–∫–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
 */
async function adobeNoiseFilter(colorMask, preset) {
  if (preset.noiseTolerance <= 0) return colorMask;
  
  const { maskData, width, height } = colorMask;
  const filteredData = Buffer.from(maskData);
  
  // Adobe –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  const kernelSize = Math.max(1, Math.floor(preset.noiseTolerance / 10));
  
  for (let y = kernelSize; y < height - kernelSize; y++) {
    for (let x = kernelSize; x < width - kernelSize; x++) {
      const index = y * width + x;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—å –ø–∏–∫—Å–µ–ª—è
      let whiteCount = 0;
      let totalCount = 0;
      
      for (let dy = -kernelSize; dy <= kernelSize; dy++) {
        for (let dx = -kernelSize; dx <= kernelSize; dx++) {
          const neighborIndex = (y + dy) * width + (x + dx);
          if (maskData[neighborIndex] === 255) whiteCount++;
          totalCount++;
        }
      }
      
      // Adobe –ø—Ä–∞–≤–∏–ª–æ: –µ—Å–ª–∏ –º–µ–Ω—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã —Å–æ—Å–µ–¥–µ–π —Ç–æ–≥–æ –∂–µ —Ü–≤–µ—Ç–∞ - —É–¥–∞–ª—è–µ–º
      const ratio = whiteCount / totalCount;
      if (ratio < 0.3 && maskData[index] === 255) {
        filteredData[index] = 0;  // –£–¥–∞–ª—è–µ–º —à—É–º
      } else if (ratio > 0.7 && maskData[index] === 0) {
        filteredData[index] = 255; // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥—ã—Ä–∫–∏
      }
    }
  }
  
  return {
    ...colorMask,
    maskData: filteredData
  };
}

/**
 * Adobe –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ø—É—Ç–∏
 */
async function adobeTraceToVector(filteredMask, color, preset) {
  const { maskData, width, height } = filteredMask;
  
  // –°–æ–∑–¥–∞–µ–º PNG –¥–ª—è potrace
  const maskBuffer = await sharp(maskData, {
    raw: { width, height, channels: 1 }
  }).png().toBuffer();
  
  return new Promise((resolve) => {
    const potraceParams = {
      threshold: preset.threshold || 128,
      optTolerance: preset.simplify || 0.2,
      turdSize: preset.minArea || 10,
      turnPolicy: potrace.Potrace.TURNPOLICY_MINORITY,
      alphaMax: 1.0,
      optCurve: true,
      blackOnWhite: true
    };
    
    potrace.trace(maskBuffer, potraceParams, (err, svg) => {
      if (err) {
        console.log(`‚ö†Ô∏è ${color.hex}: —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å`);
        resolve([]);
        return;
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø—É—Ç–∏ –∏–∑ SVG
      const pathMatches = svg.match(/<path[^>]*d="([^"]*)"[^>]*\/>/g) || [];
      const paths = pathMatches.map(match => {
        const pathData = match.match(/d="([^"]*)"/)[1];
        return {
          d: pathData,
          fill: color.hex,
          adobeLayer: color.adobeIndex
        };
      });
      
      console.log(`‚úÖ ${color.hex}: ${paths.length} –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ø—É—Ç–µ–π`);
      resolve(paths);
    });
  });
}

/**
 * Adobe —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ SVG
 */
function adobeBuildFinalSVG(vectorLayers, outputSettings) {
  const { width, height } = outputSettings;
  
  let svg = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
  <title>Adobe Illustrator Image Trace</title>
  <desc>Generated with Adobe Image Trace Limited Color algorithm</desc>
`;

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–∏ –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é (–±–æ–ª—å—à–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Å–Ω–∏–∑—É)
  const sortedLayers = vectorLayers.sort((a, b) => b.coverage - a.coverage);
  
  sortedLayers.forEach((layer, layerIndex) => {
    svg += `  <g id="adobe-layer-${layerIndex}" fill="${layer.color.hex}" stroke="none">\n`;
    svg += `    <title>${layer.color.hex} (${layer.coverage}%)</title>\n`;
    
    layer.paths.forEach((path, pathIndex) => {
      svg += `    <path id="path-${layerIndex}-${pathIndex}" d="${path.d}" fill="${path.fill}"/>\n`;
    });
    
    svg += `  </g>\n`;
  });

  svg += `</svg>`;
  
  return svg;
}

/**
 * –≠–ö–°–ü–û–†–¢ –ì–õ–ê–í–ù–û–ô –§–£–ù–ö–¶–ò–ò
 */
module.exports = {
  vectorizeImage,
  ADOBE_SETTINGS
};