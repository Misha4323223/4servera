/**
 * ADOBE ILLUSTRATOR IMAGE TRACE - –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –ø–æ —à–∞–±–ª–æ–Ω—É Adobe Illustrator Limited Color
 */

const sharp = require('sharp');
const potrace = require('potrace');
const fs = require('fs');
const path = require('path');

/**
 * ADOBE ILLUSTRATOR SETTINGS - —Ç–æ—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
 */
const ADOBE_SETTINGS = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Adobe Image Trace
  LIMITED_COLOR: {
    maxColors: 5,
    threshold: 128,
    turdSize: 2,
    alphaMax: 1.0,
    optTolerance: 0.2,
    optCurve: true
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
  QUALITY_MODES: {
    silkscreen: { maxColors: 5, simplify: true, highQuality: false },
    high: { maxColors: 8, simplify: false, highQuality: true },
    medium: { maxColors: 6, simplify: true, highQuality: true },
    low: { maxColors: 4, simplify: true, highQuality: false }
  },
  
  // –†–∞–∑–º–µ—Ä—ã –≤—ã–≤–æ–¥–∞
  OUTPUT_SIZE: {
    width: 2400,
    height: 2400
  }
};

/**
 * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–ò - Adobe Illustrator Image Trace
 */
async function vectorizeImage(imageBuffer, options = {}) {
  console.log('\nüé® === ADOBE ILLUSTRATOR IMAGE TRACE –ó–ê–ü–£–°–ö ===');
  
  const settings = {
    ...ADOBE_SETTINGS.LIMITED_COLOR,
    ...ADOBE_SETTINGS.QUALITY_MODES[options.quality || 'silkscreen']
  };
  
  console.log(`‚öôÔ∏è ADOBE: –†–µ–∂–∏–º ${options.quality || 'silkscreen'}, ${settings.maxColors} —Ü–≤–µ—Ç–æ–≤`);
  
  try {
    // –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ Adobe
    const processedImage = await prepareImageForAdobe(imageBuffer);
    console.log(`üìê ADOBE: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${processedImage.width}x${processedImage.height}`);
    
    // –≠—Ç–∞–ø 2: Adobe K-means —Ü–≤–µ—Ç–æ–≤–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
    const colorPalette = await extractAdobeColors(processedImage.data, processedImage.info, settings.maxColors);
    console.log(`üé® ADOBE: –ò–∑–≤–ª–µ—á–µ–Ω–æ ${colorPalette.length} —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
    
    if (colorPalette.length === 0) {
      throw new Error('Adobe –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞—à–ª–∞ —Ü–≤–µ—Ç–∞');
    }
    
    // –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö –º–∞—Å–æ–∫ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const vectorPaths = [];
    
    for (let i = 0; i < colorPalette.length; i++) {
      const color = colorPalette[i];
      console.log(`\nüîÑ ADOBE TRACE: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–∞ ${i + 1}/${colorPalette.length}: ${color.hex}`);
      
      // –°–æ–∑–¥–∞–µ–º Adobe-—Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –º–∞—Å–∫—É
      const maskResult = await createAdobeMask(processedImage.data, processedImage.info, color, settings);
      
      if (maskResult.coverage < 0.5) {
        console.log(`‚ö†Ô∏è ADOBE: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${color.hex} - –ø–æ–∫—Ä—ã—Ç–∏–µ ${maskResult.coverage}%`);
        continue;
      }
      
      // –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º –º–∞—Å–∫—É —á–µ—Ä–µ–∑ Potrace (–∫–∞–∫ –≤ Adobe)
      const vectorPath = await adobePotrace(maskResult.maskBuffer, color, settings);
      
      if (vectorPath && vectorPath.pathData && vectorPath.pathData.length > 10) {
        vectorPaths.push(vectorPath);
        console.log(`‚úÖ ADOBE: ${color.hex} —É—Å–ø–µ—à–Ω–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (${vectorPath.pathData.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      } else {
        console.log(`‚ùå ADOBE: ${color.hex} –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å`);
      }
    }
    
    if (vectorPaths.length === 0) {
      throw new Error('Adobe –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–ª–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞');
    }
    
    // –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ SVG –≤ —Å—Ç–∏–ª–µ Adobe Illustrator
    const svgContent = buildAdobeSVG(vectorPaths, ADOBE_SETTINGS.OUTPUT_SIZE);
    
    console.log(`\n‚úÖ === ADOBE ILLUSTRATOR TRACE –ó–ê–í–ï–†–®–ï–ù ===`);
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ –∫–æ–Ω—Ç—É—Ä–æ–≤: ${vectorPaths.length}`);
    console.log(`üìè –†–∞–∑–º–µ—Ä SVG: ${svgContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`üéØ –ö–∞—á–µ—Å—Ç–≤–æ: Adobe Illustrator Limited Color`);
    
    return svgContent;
    
  } catch (error) {
    console.error(`‚ùå ADOBE ILLUSTRATOR TRACE –û–®–ò–ë–ö–ê:`, error.message);
    throw error;
  }
}

/**
 * –≠–¢–ê–ü 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ Adobe Illustrator
 */
async function prepareImageForAdobe(imageBuffer) {
  console.log('üîß ADOBE PREP: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
  
  // Adobe –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const targetSize = 400;
  
  const { data, info } = await sharp(imageBuffer)
    .resize(targetSize, targetSize, { 
      fit: 'inside', 
      withoutEnlargement: false,
      background: { r: 255, g: 255, b: 255, alpha: 1 }
    })
    .removeAlpha() // Adobe –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é –≤ Limited Color
    .raw()
    .toBuffer({ resolveWithObject: true });
  
  console.log(`‚úÖ ADOBE PREP: ${info.width}x${info.height}, ${info.channels} –∫–∞–Ω–∞–ª–æ–≤`);
  
  return { data, info };
}

/**
 * –≠–¢–ê–ü 2: Adobe K-means —Ü–≤–µ—Ç–æ–≤–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
 */
async function extractAdobeColors(imageData, imageInfo, maxColors) {
  console.log(`üé® ADOBE K-MEANS: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ ${maxColors} —Ü–≤–µ—Ç–æ–≤...`);
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∏–∫—Å–µ–ª–∏
  const pixels = [];
  for (let i = 0; i < imageData.length; i += 3) {
    const r = imageData[i];
    const g = imageData[i + 1];
    const b = imageData[i + 2];
    pixels.push([r, g, b]);
  }
  
  console.log(`üìä ADOBE K-MEANS: –ê–Ω–∞–ª–∏–∑ ${pixels.length} –ø–∏–∫—Å–µ–ª–µ–π`);
  
  // Adobe K-means –∞–ª–≥–æ—Ä–∏—Ç–º
  const clusters = performAdobeKMeans(pixels, maxColors);
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Adobe —Ñ–æ—Ä–º–∞—Ç
  const colorPalette = clusters
    .filter(cluster => cluster.pixels.length > 0)
    .map(cluster => {
      const [r, g, b] = cluster.center;
      const coverage = (cluster.pixels.length / pixels.length) * 100;
      
      return {
        r: Math.round(r),
        g: Math.round(g),
        b: Math.round(b),
        hex: `#${Math.round(r).toString(16).padStart(2, '0')}${Math.round(g).toString(16).padStart(2, '0')}${Math.round(b).toString(16).padStart(2, '0')}`,
        coverage: parseFloat(coverage.toFixed(2)),
        pixelCount: cluster.pixels.length
      };
    })
    .sort((a, b) => b.coverage - a.coverage); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é –∫–∞–∫ –≤ Adobe
  
  colorPalette.forEach((color, index) => {
    console.log(`  ${index + 1}. ${color.hex} (${color.coverage}%)`);
  });
  
  return colorPalette;
}

/**
 * Adobe K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è - —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
 */
function performAdobeKMeans(pixels, k, maxIterations = 20) {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–æ–≤ –º–µ—Ç–æ–¥–æ–º k-means++
  let centers = initializeAdobeCenters(pixels, k);
  
  let assignments = new Array(pixels.length);
  let converged = false;
  let iteration = 0;
  
  while (!converged && iteration < maxIterations) {
    converged = true;
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª–µ–π –∫ –±–ª–∏–∂–∞–π—à–∏–º —Ü–µ–Ω—Ç—Ä–∞–º
    for (let i = 0; i < pixels.length; i++) {
      const pixel = pixels[i];
      let minDistance = Infinity;
      let closestCenter = 0;
      
      for (let j = 0; j < centers.length; j++) {
        // Adobe –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        const distance = adobeColorDistance(pixel, centers[j]);
        if (distance < minDistance) {
          minDistance = distance;
          closestCenter = j;
        }
      }
      
      if (assignments[i] !== closestCenter) {
        assignments[i] = closestCenter;
        converged = false;
      }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–≤
    for (let j = 0; j < centers.length; j++) {
      const clusterPixels = pixels.filter((_, i) => assignments[i] === j);
      if (clusterPixels.length > 0) {
        const newCenter = [0, 0, 0];
        for (const pixel of clusterPixels) {
          newCenter[0] += pixel[0];
          newCenter[1] += pixel[1];
          newCenter[2] += pixel[2];
        }
        centers[j] = [
          newCenter[0] / clusterPixels.length,
          newCenter[1] / clusterPixels.length,
          newCenter[2] / clusterPixels.length
        ];
      }
    }
    
    iteration++;
  }
  
  console.log(`üîç ADOBE K-MEANS: –°—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞ ${iteration} –∏—Ç–µ—Ä–∞—Ü–∏–π`);
  
  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
  return centers.map((center, index) => ({
    center,
    pixels: pixels.filter((_, i) => assignments[i] === index)
  }));
}

/**
 * Adobe –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –º–µ—Ç–æ–¥–æ–º k-means++
 */
function initializeAdobeCenters(pixels, k) {
  const centers = [];
  
  // –ü–µ—Ä–≤—ã–π —Ü–µ–Ω—Ç—Ä —Å–ª—É—á–∞–π–Ω–æ
  centers.push([...pixels[Math.floor(Math.random() * pixels.length)]]);
  
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  for (let i = 1; i < k; i++) {
    let maxDistance = -1;
    let bestPixel = null;
    
    for (const pixel of pixels) {
      let minDistanceToCenter = Infinity;
      for (const center of centers) {
        const distance = adobeColorDistance(pixel, center);
        minDistanceToCenter = Math.min(minDistanceToCenter, distance);
      }
      
      if (minDistanceToCenter > maxDistance) {
        maxDistance = minDistanceToCenter;
        bestPixel = pixel;
      }
    }
    
    if (bestPixel) {
      centers.push([...bestPixel]);
    }
  }
  
  return centers;
}

/**
 * Adobe –ø–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–≤–µ—Ç–∞–º–∏
 */
function adobeColorDistance(color1, color2) {
  const deltaR = color1[0] - color2[0];
  const deltaG = color1[1] - color2[1];
  const deltaB = color1[2] - color2[2];
  
  // Adobe —Ñ–æ—Ä–º—É–ª–∞ –ø–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  return Math.sqrt(
    2 * deltaR * deltaR +
    4 * deltaG * deltaG +
    3 * deltaB * deltaB
  );
}

/**
 * –≠–¢–ê–ü 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Å–∫–∏ –≤ —Å—Ç–∏–ª–µ Adobe
 */
async function createAdobeMask(imageData, imageInfo, targetColor, settings) {
  console.log(`üéØ ADOBE MASK: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è ${targetColor.hex}`);
  
  const { width, height } = imageInfo;
  const maskData = Buffer.alloc(width * height);
  
  // Adobe –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥
  const threshold = calculateAdobeThreshold(targetColor);
  
  let matchedPixels = 0;
  
  for (let i = 0; i < imageData.length; i += 3) {
    const r = imageData[i];
    const g = imageData[i + 1];
    const b = imageData[i + 2];
    
    const pixelIndex = Math.floor(i / 3);
    
    // Adobe –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
    const distance = adobeColorDistance([r, g, b], [targetColor.r, targetColor.g, targetColor.b]);
    
    if (distance <= threshold) {
      maskData[pixelIndex] = 255;
      matchedPixels++;
    } else {
      maskData[pixelIndex] = 0;
    }
  }
  
  const coverage = (matchedPixels / (width * height)) * 100;
  
  // –°–æ–∑–¥–∞–µ–º PNG –º–∞—Å–∫—É –¥–ª—è Potrace
  const maskBuffer = await sharp(maskData, {
    raw: { width, height, channels: 1 }
  }).png().toBuffer();
  
  console.log(`üìä ADOBE MASK: ${targetColor.hex} –ø–æ–∫—Ä—ã—Ç–∏–µ ${coverage.toFixed(2)}%`);
  
  return {
    maskBuffer,
    coverage: parseFloat(coverage.toFixed(2))
  };
}

/**
 * Adobe –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
 */
function calculateAdobeThreshold(color) {
  const brightness = color.r * 0.299 + color.g * 0.587 + color.b * 0.114;
  const saturation = (Math.max(color.r, color.g, color.b) - Math.min(color.r, color.g, color.b)) / Math.max(color.r, color.g, color.b, 1);
  
  let threshold = 35; // Adobe –±–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥
  
  // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ —è—Ä–∫–æ—Å—Ç–∏
  if (brightness < 60) threshold = 45;      // –¢–µ–º–Ω—ã–µ
  else if (brightness > 200) threshold = 30; // –°–≤–µ—Ç–ª—ã–µ
  
  // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏  
  if (saturation > 0.7) threshold += 10;     // –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ
  if (saturation < 0.2) threshold += 15;     // –ù–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ
  
  return threshold;
}

/**
 * –≠–¢–ê–ü 4: Adobe Potrace –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
 */
async function adobePotrace(maskBuffer, color, settings) {
  console.log(`üîç ADOBE POTRACE: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ ${color.hex}`);
  
  return new Promise((resolve, reject) => {
    const potraceParams = {
      threshold: settings.threshold,
      optTolerance: settings.optTolerance,
      turdSize: settings.turdSize,
      turnPolicy: potrace.Potrace.TURNPOLICY_MINORITY,
      alphaMax: settings.alphaMax,
      optCurve: settings.optCurve
    };
    
    potrace.trace(maskBuffer, potraceParams, (err, svg) => {
      if (err) {
        console.error(`‚ùå ADOBE POTRACE: –û—à–∏–±–∫–∞ ${color.hex}:`, err.message);
        resolve(null);
        return;
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º path –∏–∑ SVG
      const pathMatch = svg.match(/<path[^>]*d="([^"]*)"[^>]*\/>/);
      if (pathMatch && pathMatch[1]) {
        const pathData = pathMatch[1];
        console.log(`‚úÖ ADOBE POTRACE: ${color.hex} - ${pathData.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        resolve({
          pathData,
          color: color.hex,
          coverage: color.coverage
        });
      } else {
        console.log(`‚ö†Ô∏è ADOBE POTRACE: ${color.hex} - –∫–æ–Ω—Ç—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        resolve(null);
      }
    });
  });
}

/**
 * –≠–¢–ê–ü 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ Adobe SVG
 */
function buildAdobeSVG(vectorPaths, outputSize) {
  console.log(`üèóÔ∏è ADOBE SVG: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ${outputSize.width}x${outputSize.height}`);
  
  let svg = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${outputSize.width}" height="${outputSize.height}" viewBox="0 0 ${outputSize.width} ${outputSize.height}" xmlns="http://www.w3.org/2000/svg">
  <title>Adobe Illustrator Image Trace (${vectorPaths.length} colors)</title>
  <desc>Generated with Adobe Illustrator Limited Color algorithm - BOOOMERANGS AI</desc>
  <defs>
    <style>
      .vector-path { stroke: none; fill-rule: evenodd; }
    </style>
  </defs>
`;

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ü–≤–µ—Ç–æ–≤–æ–π —Å–ª–æ–π
  vectorPaths.forEach((path, index) => {
    const layerName = `adobe-color-${index + 1}`;
    svg += `  <g id="${layerName}" class="color-layer">
    <title>Color ${path.color} (${path.coverage}% coverage)</title>
    <path class="vector-path" d="${path.pathData}" fill="${path.color}" opacity="1"/>
  </g>
`;
  });

  svg += `</svg>`;
  
  console.log(`‚úÖ ADOBE SVG: –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª ${svg.length} —Å–∏–º–≤–æ–ª–æ–≤`);
  
  return svg;
}

/**
 * –≠–ö–°–ü–û–†–¢ –ì–õ–ê–í–ù–û–ô –§–£–ù–ö–¶–ò–ò
 */
module.exports = {
  vectorizeImage,
  ADOBE_SETTINGS
};