/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä - –±–∞–∑–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ SVG
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Event Loop
 */

// –¢–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
const path = require('path');
const fs = require('fs').promises;
const crypto = require('crypto');

// –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ (–º–∞–∫—Å–∏–º—É–º 5 —Ü–≤–µ—Ç–æ–≤, –¥–æ 20–ú–ë)
const SILKSCREEN_PRESET = {
  name: '–®–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è',
  description: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—á–∞—Ç–∏, –º–∞–∫—Å–∏–º—É–º 5 —Ü–≤–µ—Ç–æ–≤',
  settings: {
    maxSize: 1500,
    maxColors: 5,
    threshold: 105,
    turdSize: 1,
    turnPolicy: 'black',
    optTolerance: 0.05,
    alphaMax: 1.0,
    optiCurve: true,
    preprocess: true
  }
};

// –¢–æ–ª—å–∫–æ SVG —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
const OUTPUT_FORMATS = {
  svg: {
    extension: '.svg',
    mimeType: 'image/svg+xml',
    description: '–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞'
  }
};

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –≤—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ
const CONTENT_TYPES = {
  simple: {
    name: '–ü—Ä–æ—Å—Ç–æ–π',
    optimizations: {
      threshold: 128,
      maxColors: 5
    }
  }
};

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
const outputDir = path.join(__dirname, 'output', 'vectorizer');

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
async function ensureDirectories() {
  try {
    await fs.mkdir(outputDir, { recursive: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:', error);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
function generateId() {
  return crypto.randomBytes(8).toString('hex');
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–µ–∑ —Ç—è–∂–µ–ª—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
 */
function detectContentType(imageBuffer) {
  // –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  const size = imageBuffer.length;
  if (size < 50000) return 'simple';
  return 'simple'; // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–∏–ø
}

/**
 * –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
 */
async function silkscreenVectorize(imageBuffer, options = {}) {
  const { outputFormat = 'svg', maxFileSize = 20 * 1024 * 1024 } = options;
  
  try {
    console.log(`üé® –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ (–º–∞–∫—Å. 5 —Ü–≤–µ—Ç–æ–≤, –¥–æ 20–ú–ë)`);
    
    const settings = { ...SILKSCREEN_PRESET.settings };
    
    // –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
    const processedBuffer = await preprocessImageForSilkscreen(imageBuffer, settings);
    
    // –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –¥–æ –º–∞–∫—Å–∏–º—É–º 5
    const colorQuantizedBuffer = await quantizeColorsAI(processedBuffer, settings.maxColors);
    
    // –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏
    const svgContent = await createSilkscreenSVG(colorQuantizedBuffer, settings);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 20–ú–ë)
    const svgSize = Buffer.byteLength(svgContent, 'utf8');
    if (svgSize > maxFileSize) {
      console.log(`‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${(svgSize / 1024 / 1024).toFixed(2)}–ú–ë), –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è...`);
      const optimizedSVG = await optimizeSVGSize(svgContent, maxFileSize);
      return {
        success: true,
        svgContent: optimizedSVG,
        settings,
        quality: SILKSCREEN_PRESET.name,
        fileSize: Buffer.byteLength(optimizedSVG, 'utf8'),
        optimized: true,
        silkscreenMode: true
      };
    }
    
    return {
      success: true,
      svgContent,
      settings,
      quality: SILKSCREEN_PRESET.name,
      fileSize: svgSize,
      optimized: false,
      silkscreenMode: true
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏:', error);
    throw new Error(`–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
  }
}

/**
 * –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
 */
async function preprocessImageForSilkscreen(imageBuffer, settings) {
  const sharp = require('sharp');
  
  console.log('üîß –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (Adobe Illustrator Style)...');
  
  try {
    const metadata = await sharp(imageBuffer).metadata();
    let processedBuffer = imageBuffer;
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–∫ –≤ AI
    if (settings.maxSize) {
      const scale = Math.min(settings.maxSize / metadata.width, settings.maxSize / metadata.height);
      if (scale < 1) {
        processedBuffer = await sharp(processedBuffer)
          .resize(Math.round(metadata.width * scale), Math.round(metadata.height * scale), {
            kernel: sharp.kernel.lanczos3,
            fit: 'inside'
          })
          .toBuffer();
      }
    }
    
    // –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –≤ Adobe Illustrator
    if (settings.preprocess) {
      processedBuffer = await sharp(processedBuffer)
        .sharpen(1.5, 1.0, 2.0) // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
        .normalise() // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        .modulate({ 
          brightness: 1.1,
          saturation: 1.2,
          hue: 0
        })
        .removeAlpha() // –£–±–∏—Ä–∞–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
        .toFormat('png')
        .toBuffer();
    }
    
    return processedBuffer;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    return imageBuffer;
  }
}

/**
 * –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –∫–∞–∫ –≤ Adobe Illustrator (–¥–æ 5 —Ü–≤–µ—Ç–æ–≤ –º–∞–∫—Å–∏–º—É–º)
 */
async function quantizeColorsAI(imageBuffer, maxColors = 5) {
  const sharp = require('sharp');
  
  console.log(`üé® –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ (Adobe Illustrator): –º–∞–∫—Å–∏–º—É–º ${maxColors} —Ü–≤–µ—Ç–æ–≤`);
  
  try {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ –∫–∞–∫ –≤ Adobe Illustrator
    const quantizedBuffer = await sharp(imageBuffer)
      .png({
        palette: true,
        colors: Math.min(maxColors, 5), // –ñ–µ—Å—Ç–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 5 —Ü–≤–µ—Ç–æ–≤
        dither: 0.5 // –õ–µ–≥–∫–∏–π –¥–∏–∑–µ—Ä–∏–Ω–≥ –∫–∞–∫ –≤ AI
      })
      .toBuffer();
    
    return quantizedBuffer;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤:', error);
    return imageBuffer;
  }
}

/**
 * –≠–¢–ê–ü 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ SVG –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
async function createSilkscreenSVG(imageBuffer, settings) {
  const sharp = require('sharp');
  const potrace = require('potrace');
  
  console.log('üîç –≠–¢–ê–ü 3: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ SVG –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏...');
  
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const dominantColors = await extractDominantColors(imageBuffer, settings.maxColors);
    
    if (!dominantColors || dominantColors.length === 0) {
      console.log('‚ùå –≠–¢–ê–ü 3: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–≤–µ—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–æ–º—É —Ä–µ–∂–∏–º—É');
      return createMonochromeBackup(imageBuffer, settings);
    }
    
    console.log(`üé® –≠–¢–ê–ü 3: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${dominantColors.length} —Ü–≤–µ—Ç–æ–≤`);
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–æ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
    const colorLayers = [];
    
    for (let i = 0; i < dominantColors.length; i++) {
      const color = dominantColors[i];
      console.log(`\nüîç –≠–¢–ê–ü 3.${i + 1}: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–≤–µ—Ç ${color.hex} (${color.percentage}%)`);
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞
      const colorMask = await createColorMask(imageBuffer, color, settings);
      
      if (colorMask) {
        console.log(`üéØ –≠–¢–ê–ü 3.${i + 1}: –ú–∞—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...`);
        
        // –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º –º–∞—Å–∫—É —á–µ—Ä–µ–∑ potrace
        const layerSVG = await vectorizeColorLayer(colorMask, color, settings);
        if (layerSVG) {
          const paths = extractSVGPaths(layerSVG);
          console.log(`‚úÖ –≠–¢–ê–ü 3.${i + 1}: –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∏–∑–≤–ª–µ—á–µ–Ω–æ ${paths.length} –ø—É—Ç–µ–π`);
          
          colorLayers.push({
            color: color.hex,
            svg: layerSVG,
            paths: paths,
            originalPercentage: color.percentage
          });
        } else {
          console.log(`‚ùå –≠–¢–ê–ü 3.${i + 1}: –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–∞ ${color.hex}`);
        }
      } else {
        console.log(`‚ö†Ô∏è –≠–¢–ê–ü 3.${i + 1}: –ú–∞—Å–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ü–≤–µ—Ç–∞ ${color.hex}`);
      }
    }
    
    console.log(`\nüìä –≠–¢–ê–ü 3: –ò—Ç–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–≤–µ—Ç–æ–≤:`);
    console.log(`   - –ò—Å—Ö–æ–¥–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${dominantColors.length}`);
    console.log(`   - –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${colorLayers.length}`);
    
    if (colorLayers.length === 0) {
      console.log('‚ùå –≠–¢–ê–ü 3: –ù–∏ –æ–¥–∏–Ω —Ü–≤–µ—Ç –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–æ–º—É —Ä–µ–∂–∏–º—É');
      return createMonochromeBackup(imageBuffer, settings);
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ü–≤–µ—Ç–Ω—ã–µ —Å–ª–æ–∏ –≤ –æ–¥–∏–Ω SVG
    console.log('üîó –≠–¢–ê–ü 3: –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ü–≤–µ—Ç–Ω—ã–µ —Å–ª–æ–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π SVG...');
    const finalSVG = await combineColorLayers(colorLayers, imageBuffer);
    
    console.log(`‚úÖ –≠–¢–ê–ü 3 –ó–ê–í–ï–†–®–ï–ù: –¶–≤–µ—Ç–Ω–æ–π SVG —Å–æ–∑–¥–∞–Ω —Å ${colorLayers.length} –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–ª–æ—è–º–∏`);
    return finalSVG;
    
  } catch (error) {
    console.error('‚ùå –≠–¢–ê–ü 3 –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    console.log('üîÑ –≠–¢–ê–ü 3: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–æ–º—É —Ä–µ–∂–∏–º—É');
    return createMonochromeBackup(imageBuffer, settings);
  }
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤ –∏–∑ –ò–°–•–û–î–ù–û–ì–û –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –¥–≤–æ–π–Ω–æ–π –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏)
 */
async function extractDominantColors(imageBuffer, maxColors = 5) {
  const sharp = require('sharp');
  
  try {
    console.log(`üîç –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ${maxColors} –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤`);
    
    // –†–∞–±–æ—Ç–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const { data, info } = await sharp(imageBuffer)
      .resize(100, 100, { fit: 'inside' })
      .raw()
      .toBuffer({ resolveWithObject: true });
    
    console.log(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${info.width}x${info.height}, –∫–∞–Ω–∞–ª–æ–≤: ${info.channels}`);
    
    const colorMap = new Map();
    let totalPixels = 0;
    
    // –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —Ü–≤–µ—Ç–∞ –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    for (let i = 0; i < data.length; i += info.channels) {
      const r = data[i];
      const g = data[i + 1];
      const b = data[i + 2];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏
      if (info.channels === 4 && data[i + 3] < 10) continue;
      
      // –õ–µ–≥–∫–∞—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ü–≤–µ—Ç–æ–≤ (–º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è)
      const quantR = Math.round(r / 16) * 16;
      const quantG = Math.round(g / 16) * 16;
      const quantB = Math.round(b / 16) * 16;
      
      const colorKey = `${quantR},${quantG},${quantB}`;
      const count = colorMap.get(colorKey) || 0;
      colorMap.set(colorKey, count + 1);
      totalPixels++;
    }
    
    console.log(`üé® –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${colorMap.size}, –≤—Å–µ–≥–æ –ø–∏–∫—Å–µ–ª–µ–π: ${totalPixels}`);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏ –±–µ—Ä–µ–º —Ç–æ–ø
    const sortedColors = Array.from(colorMap.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, maxColors)
      .map(([colorKey, count]) => {
        const [r, g, b] = colorKey.split(',').map(Number);
        const percentage = ((count / totalPixels) * 100).toFixed(1);
        return {
          r, g, b,
          hex: `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`,
          count,
          percentage
        };
      });
    
    console.log(`‚úÖ –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù: –ò–∑–≤–ª–µ—á–µ–Ω–æ ${sortedColors.length} –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤:`);
    sortedColors.forEach((color, i) => {
      console.log(`  ${i + 1}. ${color.hex} (${color.percentage}%)`);
    });
    
    return sortedColors;
    
  } catch (error) {
    console.error('‚ùå –≠–¢–ê–ü 1 –û–®–ò–ë–ö–ê - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
    return [
      { r: 0, g: 0, b: 0, hex: '#000000', count: 1, percentage: '50.0' },
      { r: 255, g: 255, b: 255, hex: '#ffffff', count: 1, percentage: '50.0' }
    ];
  }
}

/**
 * –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤—ã—Ö –º–∞—Å–æ–∫ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –¥–æ–ø—É—Å–∫–æ–º
 */
async function createColorMask(imageBuffer, targetColor, settings) {
  const sharp = require('sharp');
  
  try {
    console.log(`üîç –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è —Ü–≤–µ—Ç–∞ ${targetColor.hex} (${targetColor.percentage}% –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)`);
    
    const { data, info } = await sharp(imageBuffer)
      .raw()
      .toBuffer({ resolveWithObject: true });
    
    const maskData = Buffer.alloc(info.width * info.height);
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–æ–ø—É—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞
    const baseTolerance = 50;
    const adaptiveTolerance = Math.min(80, baseTolerance + (parseFloat(targetColor.percentage) * 2));
    
    console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–æ–ø—É—Å–∫: ${adaptiveTolerance}`);
    
    let pixelCount = 0;
    let minDistance = Infinity;
    let maxDistance = 0;
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É —Å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
    for (let i = 0; i < data.length; i += info.channels) {
      const r = data[i];
      const g = data[i + 1];
      const b = data[i + 2];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏
      if (info.channels === 4 && data[i + 3] < 10) continue;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–∫–∞–∫ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤)
      const quantR = Math.round(r / 16) * 16;
      const quantG = Math.round(g / 16) * 16;
      const quantB = Math.round(b / 16) * 16;
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞
      const deltaR = quantR - targetColor.r;
      const deltaG = quantG - targetColor.g;
      const deltaB = quantB - targetColor.b;
      
      // –ü–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–±–æ–ª–µ–µ –±–ª–∏–∑–∫–æ–µ –∫ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º—É –≤–æ—Å–ø—Ä–∏—è—Ç–∏—é)
      const colorDistance = Math.sqrt(
        2 * deltaR * deltaR +
        4 * deltaG * deltaG +
        3 * deltaB * deltaB
      );
      
      minDistance = Math.min(minDistance, colorDistance);
      maxDistance = Math.max(maxDistance, colorDistance);
      
      const pixelIndex = Math.floor(i / info.channels);
      
      if (colorDistance <= adaptiveTolerance) {
        maskData[pixelIndex] = 255; // –ë–µ–ª—ã–π –ø–∏–∫—Å–µ–ª—å (–æ–±–ª–∞—Å—Ç—å —Ü–≤–µ—Ç–∞)
        pixelCount++;
      } else {
        maskData[pixelIndex] = 0; // –ß–µ—Ä–Ω—ã–π –ø–∏–∫—Å–µ–ª—å (—Ñ–æ–Ω)
      }
    }
    
    const coveragePercent = ((pixelCount / (info.width * info.height)) * 100).toFixed(1);
    console.log(`üìä –ú–∞—Å–∫–∞ –¥–ª—è ${targetColor.hex}:`);
    console.log(`   - –ó–∞—Ö–≤–∞—á–µ–Ω–æ –ø–∏–∫—Å–µ–ª–µ–π: ${pixelCount} (${coveragePercent}%)`);
    console.log(`   - –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: –º–∏–Ω=${minDistance.toFixed(1)}, –º–∞–∫—Å=${maxDistance.toFixed(1)}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
    const minCoverageThreshold = Math.max(0.5, parseFloat(targetColor.percentage) * 0.3);
    if (parseFloat(coveragePercent) < minCoverageThreshold) {
      console.log(`‚ö†Ô∏è –≠–¢–ê–ü 2: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–ª—è ${targetColor.hex} (${coveragePercent}% < ${minCoverageThreshold}%), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return null;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –º–∞—Å–∫–∏
    const maskBuffer = await sharp(maskData, {
      raw: {
        width: info.width,
        height: info.height,
        channels: 1
      }
    })
    .png()
    .toBuffer();
    
    console.log(`‚úÖ –≠–¢–ê–ü 2: –ú–∞—Å–∫–∞ –¥–ª—è ${targetColor.hex} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    return maskBuffer;
    
  } catch (error) {
    console.error(`‚ùå –≠–¢–ê–ü 2 –û–®–ò–ë–ö–ê - –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è ${targetColor.hex}:`, error);
    return null;
  }
}

/**
 * –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è
 */
async function vectorizeColorLayer(maskBuffer, color, settings) {
  const potrace = require('potrace');
  
  try {
    const potraceParams = {
      threshold: 128,
      turdSize: settings.turdSize || 1,
      turnPolicy: settings.turnPolicy || 'black',
      alphaMax: settings.alphaMax || 1.0,
      optCurve: settings.optiCurve !== false,
      optTolerance: settings.optTolerance || 0.05
    };
    
    return new Promise((resolve, reject) => {
      potrace.trace(maskBuffer, potraceParams, (err, svg) => {
        if (err) {
          console.error(`–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞ ${color.hex}:`, err);
          resolve(null);
        } else {
          resolve(svg);
        }
      });
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–ª–æ—è:', error);
    return null;
  }
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–µ–π –∏–∑ SVG
 */
function extractSVGPaths(svgContent) {
  const pathRegex = /<path[^>]*d="([^"]*)"[^>]*>/g;
  const paths = [];
  let match;
  
  while ((match = pathRegex.exec(svgContent)) !== null) {
    paths.push(match[1]);
  }
  
  return paths;
}

/**
 * –≠–¢–ê–ü 4: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–Ω—ã—Ö —Å–ª–æ–µ–≤ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π SVG
 */
async function combineColorLayers(colorLayers, originalImageBuffer) {
  const sharp = require('sharp');
  
  try {
    console.log(`üîó –≠–¢–ê–ü 4: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ ${colorLayers.length} —Ü–≤–µ—Ç–Ω—ã—Ö —Å–ª–æ–µ–≤`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const metadata = await sharp(originalImageBuffer).metadata();
    const width = metadata.width;
    const height = metadata.height;
    
    console.log(`üìê –≠–¢–ê–ü 4: –†–∞–∑–º–µ—Ä—ã SVG: ${width}x${height}`);
    
    let svgContent = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
  <title>–®–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è (${colorLayers.length} —Ü–≤–µ—Ç–æ–≤)</title>
  <desc>–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ø–µ—á–∞—Ç–∏</desc>
`;
    
    let totalPaths = 0;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ü–≤–µ—Ç–Ω–æ–π —Å–ª–æ–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    colorLayers.forEach((layer, index) => {
      const layerNumber = index + 1;
      console.log(`üé® –≠–¢–ê–ü 4.${layerNumber}: –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è —Ü–≤–µ—Ç–∞ ${layer.color}`);
      console.log(`   - –ü—É—Ç–µ–π –≤ —Å–ª–æ–µ: ${layer.paths.length}`);
      console.log(`   - –ò—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: ${layer.originalPercentage}%`);
      
      svgContent += `  <g id="color-layer-${layerNumber}" fill="${layer.color}" stroke="none">\n`;
      
      let validPaths = 0;
      layer.paths.forEach((path, pathIndex) => {
        if (path && path.trim() && path.length > 10) { // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—É—Ç–∏
          svgContent += `    <path d="${path}" />\n`;
          validPaths++;
          totalPaths++;
        }
      });
      
      svgContent += `  </g>\n`;
      
      console.log(`‚úÖ –≠–¢–ê–ü 4.${layerNumber}: –î–æ–±–∞–≤–ª–µ–Ω–æ ${validPaths} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è ${layer.color}`);
    });
    
    svgContent += `</svg>`;
    
    console.log(`üìä –≠–¢–ê–ü 4: –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SVG:`);
    console.log(`   - –í—Å–µ–≥–æ —Å–ª–æ–µ–≤: ${colorLayers.length}`);
    console.log(`   - –í—Å–µ–≥–æ –ø—É—Ç–µ–π: ${totalPaths}`);
    console.log(`   - –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${(svgContent.length / 1024).toFixed(1)} –ö–ë`);
    
    if (totalPaths === 0) {
      console.log('‚ùå –≠–¢–ê–ü 4: –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—É—Ç–µ–π, —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π SVG');
      return createMonochromeBackup(originalImageBuffer, { threshold: 128 });
    }
    
    console.log(`‚úÖ –≠–¢–ê–ü 4 –ó–ê–í–ï–†–®–ï–ù: –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π SVG —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
    return svgContent;
    
  } catch (error) {
    console.error('‚ùå –≠–¢–ê–ü 4 –û–®–ò–ë–ö–ê - –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–µ–≤:', error);
    return createMonochromeBackup(originalImageBuffer, { threshold: 128 });
  }
}

/**
 * –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π SVG –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
 */
async function createMonochromeBackup(imageBuffer, settings) {
  const potrace = require('potrace');
  
  console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–æ–≥–æ SVG...');
  
  try {
    const potraceParams = {
      threshold: settings.threshold || 128,
      turdSize: 1,
      turnPolicy: 'black',
      alphaMax: 1.0,
      optCurve: true,
      optTolerance: 0.05
    };
    
    return new Promise((resolve, reject) => {
      potrace.trace(imageBuffer, potraceParams, (err, svg) => {
        if (err) {
          reject(new Error(`–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ potrace: ${err.message}`));
        } else {
          console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π SVG —Å–æ–∑–¥–∞–Ω');
          resolve(svg);
        }
      });
    });
    
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SVG:', error);
    throw error;
  }
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –∫–∞–∫ –≤ Adobe Illustrator
 */
async function calculateOptimalThreshold(data, info) {
  // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º Otsu –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞
  const histogram = new Array(256).fill(0);
  
  // –ü–æ–¥—Å—á–µ—Ç –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
  for (let i = 0; i < data.length; i += info.channels) {
    const gray = Math.round(0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]);
    histogram[gray]++;
  }
  
  const total = data.length / info.channels;
  let sum = 0;
  for (let i = 0; i < 256; i++) {
    sum += i * histogram[i];
  }
  
  let sumB = 0;
  let wB = 0;
  let wF = 0;
  let varMax = 0;
  let threshold = 0;
  
  for (let i = 0; i < 256; i++) {
    wB += histogram[i];
    if (wB === 0) continue;
    
    wF = total - wB;
    if (wF === 0) break;
    
    sumB += i * histogram[i];
    const mB = sumB / wB;
    const mF = (sum - sumB) / wF;
    const varBetween = wB * wF * (mB - mF) * (mB - mF);
    
    if (varBetween > varMax) {
      varMax = varBetween;
      threshold = i;
    }
  }
  
  console.log(`üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ (Otsu): ${threshold}`);
  return threshold;
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ SVG –¥–æ 20–ú–ë
 */
async function optimizeSVGSize(svgContent, maxSize) {
  console.log('üóúÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ SVG...');
  
  let optimized = svgContent;
  
  // –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∏ –ø—Ä–æ–±–µ–ª—ã
  optimized = optimized
    .replace(/\s+/g, ' ') // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
    .replace(/>\s+</g, '><') // –ü—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
    .replace(/\s+\/>/g, '/>') // –ü—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Ç–µ–≥–∞–º–∏
    .replace(/="([^"]*?)"/g, (match, value) => {
      // –û–∫—Ä—É–≥–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      if (/^-?\d*\.?\d+$/.test(value)) {
        return `="${parseFloat(value).toFixed(2)}"`;
      }
      return match;
    });
  
  // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —É–ø—Ä–æ—â–∞–µ–º –ø—É—Ç–∏
  if (Buffer.byteLength(optimized, 'utf8') > maxSize) {
    console.log('üîß –£–ø—Ä–æ—â–µ–Ω–∏–µ –ø—É—Ç–µ–π SVG...');
    
    // –£–ø—Ä–æ—â–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—É—Ç—è—Ö
    optimized = optimized.replace(/d="([^"]+)"/g, (match, path) => {
      const simplified = path.replace(/(\d+\.\d{3,})/g, (num) => {
        return parseFloat(num).toFixed(1);
      });
      return `d="${simplified}"`;
    });
  }
  
  const finalSize = Buffer.byteLength(optimized, 'utf8');
  console.log(`üìè –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${(finalSize / 1024 / 1024).toFixed(2)}–ú–ë`);
  
  return optimized;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è)
async function advancedVectorize(imageBuffer, options = {}) {
  try {
    console.log(`üéØ –í–´–ë–û–† –ê–õ–ì–û–†–ò–¢–ú–ê –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–ò`);
    console.log(`   –ö–∞—á–µ—Å—Ç–≤–æ: ${options.quality || 'standard'}`);
    console.log(`   –¢–∏–ø: ${options.optimizeFor || 'web'}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ —Ü–≤–µ—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const needsColorVectorization = 
      options.quality === 'silkscreen' ||
      options.quality === 'ultra' ||
      options.optimizeFor === 'silkscreen' ||
      options.optimizeFor === 'print' ||
      (options.colors && options.colors !== 'mono');
    
    if (needsColorVectorization) {
      console.log(`üé® –í–´–ë–†–ê–ù: –¶–≤–µ—Ç–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º createColoredSVG`);
      return await createColoredSVG(imageBuffer, options);
    } else {
      console.log(`‚ö´ –í–´–ë–†–ê–ù: –ú–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º silkscreenVectorize`);
      return await silkscreenVectorize(imageBuffer, options);
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:`, error);
    // Fallback –∫ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–æ–º—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return await silkscreenVectorize(imageBuffer, options);
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π SVG —á–µ—Ä–µ–∑ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function createRealSVG(imageBuffer, settings) {
  const sharp = require('sharp');
  const potrace = require('potrace');
  
  try {
    console.log(`üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
    console.log(`üìä –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞: ${(imageBuffer.length / 1024).toFixed(1)}KB`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    const metadata = await sharp(imageBuffer).metadata();
    console.log(`üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, {
      width: metadata.width,
      height: metadata.height,
      format: metadata.format,
      channels: metadata.channels,
      density: metadata.density,
      hasAlpha: metadata.hasAlpha
    });
    
    const originalWidth = metadata.width;
    const originalHeight = metadata.height;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (!originalWidth || !originalHeight || originalWidth < 1 || originalHeight < 1) {
      throw new Error(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${originalWidth}x${originalHeight}`);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
    const maxSize = settings.maxSize || 1200; // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    let targetWidth = originalWidth;
    let targetHeight = originalHeight;
    
    // –î–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    const isHighQuality = settings.quality === 'ultra' || settings.quality === 'silkscreen';
    const actualMaxSize = isHighQuality ? 1500 : maxSize;
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
    if (originalWidth > actualMaxSize || originalHeight > actualMaxSize) {
      const scale = Math.min(actualMaxSize / originalWidth, actualMaxSize / originalHeight);
      targetWidth = Math.round(originalWidth * scale);
      targetHeight = Math.round(originalHeight * scale);
    }
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const minSize = 400;
    if (targetWidth < minSize && targetHeight < minSize) {
      const scale = Math.max(minSize / targetWidth, minSize / targetHeight);
      targetWidth = Math.round(targetWidth * scale);
      targetHeight = Math.round(targetHeight * scale);
    }
    
    console.log(`üñºÔ∏è –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${originalWidth}x${originalHeight}`);
    console.log(`üéØ –¶–µ–ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${targetWidth}x${targetHeight}`);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    console.log(`‚öôÔ∏è –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ (${settings.quality})...`);
    
    let processedBuffer;
    
    if (settings.quality === 'silkscreen' || settings.quality === 'ultra') {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
      processedBuffer = await sharp(imageBuffer)
        .resize(targetWidth, targetHeight, {
          kernel: sharp.kernel.lanczos3,
          fit: 'inside',
          withoutEnlargement: false
        })
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å –¥–ª—è –ª—É—á—à–∏—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤
        .sharpen({ sigma: 1.0, flat: 1.0, jagged: 2.0 })
        // –£–ª—É—á—à–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        .normalize({ lower: 5, upper: 95 })
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale –¥–ª—è –ª—É—á—à–µ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
        .grayscale()
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è —à—É–º–∞
        .blur(0.3)
        .png({ 
          compressionLevel: 0,
          adaptiveFiltering: false,
          palette: false
        })
        .toBuffer();
    } else {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      processedBuffer = await sharp(imageBuffer)
        .resize(targetWidth, targetHeight, {
          kernel: sharp.kernel.lanczos2,
          fit: 'inside'
        })
        .normalize()
        .png()
        .toBuffer();
    }
    
    console.log(`üìä –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞: ${(processedBuffer.length / 1024).toFixed(1)}KB`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—É—Ñ–µ—Ä –Ω–µ –ø—É—Å—Ç–æ–π
    if (processedBuffer.length === 0) {
      throw new Error('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–π');
    }
    
    console.log(`‚öôÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞: ${settings.quality}`);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è potrace –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
    const potraceOptions = getPotraceOptions(settings.quality);
    console.log(`üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã potrace:`, potraceOptions);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    return new Promise((resolve, reject) => {
      console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º potrace.trace...`);
      
      potrace.trace(processedBuffer, potraceOptions, (err, svg) => {
        if (err) {
          console.error('‚ùå –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê POTRACE:');
          console.error('   –¢–∏–ø –æ—à–∏–±–∫–∏:', typeof err);
          console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', err.message || err);
          console.error('   –°—Ç–µ–∫:', err.stack || '–Ω–µ—Ç —Å—Ç–µ–∫–∞');
          console.error('   –ö–æ–¥ –æ—à–∏–±–∫–∏:', err.code || '–Ω–µ—Ç –∫–æ–¥–∞');
          console.error('   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã potrace:', potraceOptions);
          console.error('   –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞:', processedBuffer.length);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ potrace
          resolve(createFallbackSVG(targetWidth, targetHeight, settings));
          return;
        }
        
        console.log(`‚úÖ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ potrace –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        console.log(`üìè –î–ª–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ SVG: ${svg ? svg.length : 0} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        if (!svg || svg.length === 0) {
          console.error('‚ùå Potrace –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π SVG');
          resolve(createFallbackSVG(targetWidth, targetHeight, settings));
          return;
        }
        
        // –û—á–∏—â–∞–µ–º –∏ —É–ª—É—á—à–∞–µ–º SVG
        const cleanedSVG = cleanAndOptimizeSVG(svg, targetWidth, targetHeight, settings);
        console.log(`‚úÖ SVG –æ—á–∏—â–µ–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω`);
        resolve(cleanedSVG);
      });
    });
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('   –°—Ç–µ–∫:', error.stack);
    console.error('   –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞:', imageBuffer ? imageBuffer.length : '–Ω–µ—Ç –±—É—Ñ–µ—Ä–∞');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    return createFallbackSVG(400, 400, settings);
  }
}

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–æ–≥–¥–∞ potrace –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
 */
async function tryAlternativeVectorization(imageBuffer, width, height, settings) {
  const sharp = require('sharp');
  
  try {
    console.log(`üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${width}x${height}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const { data, info } = await sharp(imageBuffer)
      .resize(width, height, { fit: 'inside' })
      .grayscale()
      .threshold(128) // –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
      .raw()
      .toBuffer({ resolveWithObject: true });
    
    console.log(`üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${data.length} –±–∞–π—Ç, ${info.width}x${info.height}`);
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—É—Ä–æ–≤
    const paths = [];
    const visited = new Set();
    
    for (let y = 0; y < info.height - 1; y++) {
      for (let x = 0; x < info.width - 1; x++) {
        const idx = y * info.width + x;
        
        if (!visited.has(idx) && data[idx] < 128) { // –¢–µ–º–Ω—ã–π –ø–∏–∫—Å–µ–ª—å
          const contour = traceContour(data, info.width, info.height, x, y, visited);
          if (contour.length > 10) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç—É—Ä–∞
            paths.push(simplifyPath(contour));
          }
        }
      }
    }
    
    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${paths.length} –∫–æ–Ω—Ç—É—Ä–æ–≤`);
    
    // –°–æ–∑–¥–∞–µ–º SVG –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤
    const pathElements = paths.slice(0, 50).map((path, i) => { // –ú–∞–∫—Å–∏–º—É–º 50 –∫–æ–Ω—Ç—É—Ä–æ–≤
      const pathData = path.map((point, j) => 
        j === 0 ? `M ${point.x} ${point.y}` : `L ${point.x} ${point.y}`
      ).join(' ') + ' Z';
      
      return `<path d="${pathData}" fill="#000000" opacity="0.8"/>`;
    }).join('\n  ');
    
    const svg = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
  ${pathElements}
  <metadata>
    <title>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</title>
    <description>–ö–æ–Ω—Ç—É—Ä–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, ${paths.length} –æ–±—ä–µ–∫—Ç–æ–≤</description>
  </metadata>
</svg>`;
    
    console.log(`‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞`);
    return svg;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    throw error;
  }
}

/**
 * –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∫–æ–Ω—Ç—É—Ä–∞ –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏
 */
function traceContour(data, width, height, startX, startY, visited) {
  const contour = [];
  const directions = [
    [-1, -1], [0, -1], [1, -1],
    [-1,  0],          [1,  0],
    [-1,  1], [0,  1], [1,  1]
  ];
  
  let x = startX;
  let y = startY;
  let steps = 0;
  const maxSteps = Math.min(width * height, 1000); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
  
  while (steps < maxSteps) {
    const idx = y * width + x;
    
    if (visited.has(idx) || x < 0 || x >= width || y < 0 || y >= height) {
      break;
    }
    
    if (data[idx] >= 128) { // –°–≤–µ—Ç–ª—ã–π –ø–∏–∫—Å–µ–ª—å - –≥—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç—É—Ä–∞
      break;
    }
    
    visited.add(idx);
    contour.push({ x, y });
    
    // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–º–Ω—ã–π –ø–∏–∫—Å–µ–ª—å
    let found = false;
    for (const [dx, dy] of directions) {
      const nx = x + dx;
      const ny = y + dy;
      const nidx = ny * width + nx;
      
      if (nx >= 0 && nx < width && ny >= 0 && ny < height && 
          !visited.has(nidx) && data[nidx] < 128) {
        x = nx;
        y = ny;
        found = true;
        break;
      }
    }
    
    if (!found) break;
    steps++;
  }
  
  return contour;
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–∏–µ –ø—É—Ç–∏ - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Ç–æ—á–∫–∏
 */
function simplifyPath(contour, tolerance = 2) {
  if (contour.length <= 2) return contour;
  
  const simplified = [contour[0]];
  
  for (let i = 1; i < contour.length - 1; i++) {
    const prev = contour[i - 1];
    const curr = contour[i];
    const next = contour[i + 1];
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–∏
    const distance = pointToLineDistance(curr, prev, next);
    
    if (distance > tolerance) {
      simplified.push(curr);
    }
  }
  
  simplified.push(contour[contour.length - 1]);
  return simplified;
}

/**
 * –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ç–æ—á–∫–∏ –¥–æ –ª–∏–Ω–∏–∏
 */
function pointToLineDistance(point, lineStart, lineEnd) {
  const A = point.x - lineStart.x;
  const B = point.y - lineStart.y;
  const C = lineEnd.x - lineStart.x;
  const D = lineEnd.y - lineStart.y;
  
  const dot = A * C + B * D;
  const lenSq = C * C + D * D;
  
  if (lenSq === 0) return Math.sqrt(A * A + B * B);
  
  const param = dot / lenSq;
  
  let xx, yy;
  if (param < 0) {
    xx = lineStart.x;
    yy = lineStart.y;
  } else if (param > 1) {
    xx = lineEnd.x;
    yy = lineEnd.y;
  } else {
    xx = lineStart.x + param * C;
    yy = lineStart.y + param * D;
  }
  
  const dx = point.x - xx;
  const dy = point.y - yy;
  return Math.sqrt(dx * dx + dy * dy);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ potrace –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
 */
function getPotraceOptions(quality) {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ - –≤—ã—Å–æ–∫–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—É—Ä–æ–≤
  switch (quality) {
    case 'ultra':
      return {
        threshold: 110,           // –ë–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
        turdSize: 1,             // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–ª–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        optTolerance: 0.1,       // –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∫—Ä–∏–≤—ã—Ö
        alphaMax: 1.0,           // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª–∞–¥–∫–æ—Å—Ç—å
        optCurve: true,          // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫—Ä–∏–≤—ã—Ö
        turnPolicy: 'minority'   // –ü–æ–ª–∏—Ç–∏–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ –¥–ª—è –ª—É—á—à–∏—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤
      };
    case 'high':
      return {
        threshold: 120,
        turdSize: 2,
        optTolerance: 0.15,
        alphaMax: 1.0,
        optCurve: true,
        turnPolicy: 'minority'
      };
    case 'standard':
    default:
      return {
        threshold: 130,
        turdSize: 3,
        optTolerance: 0.2,
        alphaMax: 0.8,
        optCurve: true,
        turnPolicy: 'minority'
      };
    case 'silkscreen':          // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
      return {
        threshold: 105,          // –û—á–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π
        turdSize: 1,            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–∂–µ —Å–∞–º—ã–µ –º–µ–ª–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        optTolerance: 0.05,     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        alphaMax: 1.0,
        optCurve: true,
        turnPolicy: 'minority'
      };
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç SVG –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
 */
function cleanAndOptimizeSVG(svg, width, height, settings) {
  try {
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
    let optimizedSVG = svg;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ viewBox
    optimizedSVG = optimizedSVG.replace(
      /<svg[^>]*>/,
      `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">`
    );
    
    // –î–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—É—Ç–∏
    if (settings.quality === 'silkscreen' || settings.quality === 'ultra') {
      // –£–ø—Ä–æ—â–∞–µ–º –æ—á–µ–Ω—å –º–µ–ª–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      optimizedSVG = optimizedSVG.replace(/d="[^"]*"/g, (match) => {
        const path = match.slice(3, -1);
        // –£–¥–∞–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã (–º–µ–Ω—å—à–µ 2 –ø–∏–∫—Å–µ–ª–µ–π)
        const simplifiedPath = path.replace(/[ML]\s*[\d.-]+\s*[\d.-]+\s*(?=[ML])/g, (segment, offset, string) => {
          const nextSegment = string.slice(offset + segment.length).match(/^[ML]\s*[\d.-]+\s*[\d.-]+/);
          if (nextSegment) {
            const coords1 = segment.match(/([\d.-]+)\s+([\d.-]+)/);
            const coords2 = nextSegment[0].match(/([\d.-]+)\s+([\d.-]+)/);
            if (coords1 && coords2) {
              const dist = Math.sqrt(
                Math.pow(parseFloat(coords2[1]) - parseFloat(coords1[1]), 2) +
                Math.pow(parseFloat(coords2[2]) - parseFloat(coords1[2]), 2)
              );
              if (dist < 2) return ''; // –£–¥–∞–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã
            }
          }
          return segment;
        });
        return `d="${simplifiedPath}"`;
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—á–∞—Ç–∏
      optimizedSVG = optimizedSVG.replace(
        /<svg([^>]*)>/,
        `<svg$1>
  <defs>
    <style>
      .silkscreen-path {
        fill-rule: evenodd;
        stroke-linejoin: round;
        stroke-linecap: round;
      }
    </style>
  </defs>`
      );
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å –∫ –ø—É—Ç—è–º
      optimizedSVG = optimizedSVG.replace(/<path/g, '<path class="silkscreen-path"');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const quality = settings.quality === 'silkscreen' ? '—à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è' : settings.quality;
    optimizedSVG = optimizedSVG.replace(/<\/svg>/, `
  <metadata>
    <title>–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏</title>
    <description>–ö–∞—á–µ—Å—Ç–≤–æ: ${quality}, –†–∞–∑–º–µ—Ä: ${width}x${height}, –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—á–∞—Ç–∏</description>
    <keywords>silkscreen, –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –ø–µ—á–∞—Ç—å, potrace</keywords>
  </metadata>
</svg>`);
    
    return optimizedSVG;
  } catch (error) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SVG:', error);
    return svg;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É SVG –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
 */
function createFallbackSVG(width, height, settings) {
  console.log('üîÑ –°–æ–∑–¥–∞–µ–º fallback SVG');
  
  return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="#f8f9fa"/>
  <rect x="20" y="20" width="${width-40}" height="${height-40}" fill="none" stroke="#6c757d" stroke-width="2" stroke-dasharray="5,5"/>
  <text x="${width/2}" y="${height/2-10}" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" fill="#6c757d">
    –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  </text>
  <text x="${width/2}" y="${height/2+10}" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" fill="#6c757d">
    ${settings.quality} –∫–∞—á–µ—Å—Ç–≤–æ
  </text>
  <metadata>
    <title>Fallback –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</title>
    <description>–†–µ–∑–µ—Ä–≤–Ω—ã–π SVG –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏</description>
  </metadata>
</svg>`;
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –∑–∞ —Ä–∞–∑
 */
async function batchVectorize(imageBuffers, options = {}) {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
  if (imageBuffers.length === 0) return [];
  
  const { buffer, name } = imageBuffers[0];
  console.log(`–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: ${name}`);
  
  try {
    const result = await vectorizeImage(buffer, name, options);
    return [{ ...result, originalName: name }];
  } catch (error) {
    return [{
      success: false,
      error: error.message,
      originalName: name
    }];
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
 */
async function vectorizeImage(imageBuffer, originalName = 'image', options = {}) {
  try {
    await ensureDirectories();
    
    const imageId = generateId();
    const { outputFormat = 'svg', quality = 'standard' } = options;
    const formatInfo = OUTPUT_FORMATS[outputFormat] || OUTPUT_FORMATS.svg;
    const filename = `vectorized_${imageId}${formatInfo.extension}`;
    const outputPath = path.join(outputDir, filename);
    
    console.log(`üé® –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${originalName}`);
    console.log(`üìä –ö–∞—á–µ—Å—Ç–≤–æ: ${quality}, –§–æ—Ä–º–∞—Ç: ${outputFormat}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const vectorResult = await advancedVectorize(imageBuffer, options);
    
    if (!vectorResult.success) {
      throw new Error('–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await fs.writeFile(outputPath, vectorResult.svgContent, 'utf8');
    
    console.log(`‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${filename}`);
    console.log(`üéØ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${vectorResult.detectedType}`);
    console.log(`‚ö° –ö–∞—á–µ—Å—Ç–≤–æ: ${vectorResult.quality}`);
    
    return {
      success: true,
      filename,
      filepath: outputPath,
      svgContent: vectorResult.svgContent,
      detectedType: vectorResult.detectedType,
      quality: vectorResult.quality,
      settings: vectorResult.settings,
      outputFormat,
      message: `–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (${vectorResult.quality}, ${vectorResult.detectedType})`
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return {
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    };
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */
async function generatePreviews(imageBuffer, originalName = 'image') {
  const previews = [];
  const qualities = ['draft', 'standard', 'premium'];
  
  console.log(`üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è: ${originalName}`);
  
  for (const quality of qualities) {
    try {
      const result = await advancedVectorize(imageBuffer, { quality });
      if (result.success) {
        previews.push({
          quality,
          qualityName: QUALITY_PRESETS[quality].name,
          description: QUALITY_PRESETS[quality].description,
          svgContent: result.svgContent,
          detectedType: result.detectedType,
          settings: result.settings
        });
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é ${quality}:`, error.message);
    }
  }
  
  return {
    success: previews.length > 0,
    previews,
    totalGenerated: previews.length
  };
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
 */
async function convertToFormat(svgContent, targetFormat, filename) {
  try {
    const formatInfo = OUTPUT_FORMATS[targetFormat];
    if (!formatInfo) {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${targetFormat}`);
    }
    
    const outputPath = path.join(outputDir, filename);
    
    switch (targetFormat) {
      case 'svg':
        await fs.writeFile(outputPath, svgContent, 'utf8');
        break;
        
      case 'eps':
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ EPS —á–µ—Ä–µ–∑ –æ–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ
        const epsContent = `%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 800 600
%%Creator: Advanced Vectorizer
%%Title: ${filename}
%%EndComments
/svgdict 100 dict def
svgdict begin
${svgContent}
end
%%EOF`;
        await fs.writeFile(outputPath, epsContent, 'utf8');
        break;
        
      case 'pdf':
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è PDF –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è SVG
        const pdfContent = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj
2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj
3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length ${svgContent.length}
>>
stream
${svgContent}
endstream
endobj
xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000206 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
${250 + svgContent.length}
%%EOF`;
        await fs.writeFile(outputPath, pdfContent, 'utf8');
        break;
        
      default:
        throw new Error(`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ ${targetFormat} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`);
    }
    
    return {
      success: true,
      filename,
      filepath: outputPath,
      format: targetFormat,
      mimeType: formatInfo.mimeType
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ú–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
 */
async function multiFormatVectorize(imageBuffer, originalName = 'image', options = {}) {
  try {
    const { formats = ['svg'], quality = 'standard' } = options;
    const results = [];
    
    console.log(`üé® –ú–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${originalName}`);
    console.log(`üìÅ –§–æ—Ä–º–∞—Ç—ã: ${formats.join(', ')}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º SVG
    const vectorResult = await advancedVectorize(imageBuffer, { ...options, outputFormat: 'svg' });
    
    if (!vectorResult.success) {
      throw new Error('–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    for (const format of formats) {
      const imageId = generateId();
      const formatInfo = OUTPUT_FORMATS[format] || OUTPUT_FORMATS.svg;
      const filename = `vectorized_${imageId}${formatInfo.extension}`;
      
      const convertResult = await convertToFormat(vectorResult.svgContent, format, filename);
      
      if (convertResult.success) {
        results.push({
          format,
          filename: convertResult.filename,
          filepath: convertResult.filepath,
          mimeType: convertResult.mimeType,
          description: formatInfo.description
        });
      }
    }
    
    return {
      success: results.length > 0,
      originalName,
      detectedType: vectorResult.detectedType,
      quality: vectorResult.quality,
      formats: results,
      svgContent: vectorResult.svgContent,
      message: `–°–æ–∑–¥–∞–Ω–æ ${results.length} —Ñ–æ—Ä–º–∞—Ç–æ–≤`
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SVG –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
async function optimizeForUsage(svgContent, usage = 'web') {
  try {
    let optimizedSvg = svgContent;
    
    switch (usage) {
      case 'web':
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–µ–±–∞ - –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
        optimizedSvg = svgContent
          .replace(/\s+/g, ' ')
          .replace(/>\s+</g, '><')
          .trim();
        break;
        
      case 'print':
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ - –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        optimizedSvg = svgContent.replace(
          /<svg([^>]*)>/,
          '<svg$1 xmlns:xlink="http://www.w3.org/1999/xlink" print-quality="high">'
        );
        break;
        
      case 'logo':
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ - —á–µ—Ç–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã
        optimizedSvg = svgContent.replace(
          /stroke-width="[^"]*"/g,
          'stroke-width="2"'
        );
        break;
        
      case 'icon':
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–∫–æ–Ω–æ–∫ - —É–ø—Ä–æ—â–µ–Ω–∏–µ
        optimizedSvg = svgContent
          .replace(/opacity="[^"]*"/g, '')
          .replace(/\s+/g, ' ');
        break;
    }
    
    return {
      success: true,
      optimizedSvg,
      usage,
      originalSize: svgContent.length,
      optimizedSize: optimizedSvg.length,
      compressionRatio: ((svgContent.length - optimizedSvg.length) / svgContent.length * 100).toFixed(1)
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –æ–ø—Ü–∏–π
 */
async function professionalVectorize(imageBuffer, originalName = 'image', options = {}) {
  const {
    quality = 'premium',
    formats = ['svg'],
    generatePreviews: shouldGeneratePreviews = false,
    optimizeFor = 'web',
    includeMetadata = true
  } = options;
  
  try {
    await ensureDirectories();
    console.log(`üéØ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${originalName}`);
    
    const results = {
      originalName,
      timestamp: new Date().toISOString(),
      success: true
    };
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if (shouldGeneratePreviews) {
      console.log('üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é...');
      const previewResult = await generatePreviews(imageBuffer, originalName);
      results.previews = previewResult.previews;
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    console.log('üîÑ –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const mainResult = await multiFormatVectorize(imageBuffer, originalName, {
      quality,
      formats,
      ...options
    });
    
    if (!mainResult.success) {
      throw new Error(mainResult.error);
    }
    
    results.main = mainResult;
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if (optimizeFor && mainResult.svgContent) {
      console.log(`‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è: ${optimizeFor}`);
      const optimizationResult = await optimizeForUsage(mainResult.svgContent, optimizeFor);
      results.optimization = optimizationResult;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    if (includeMetadata) {
      results.metadata = {
        detectedType: mainResult.detectedType,
        quality: mainResult.quality,
        formatsCount: mainResult.formats.length,
        processingTime: Date.now(),
        version: '2.0'
      };
    }
    
    console.log(`‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤: ${mainResult.formats.length}`);
    
    return results;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return {
      success: false,
      error: error.message,
      originalName
    };
  }
}

/**
 * –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
 */
async function vectorizeFromUrl(imageUrl, options = {}) {
  try {
    console.log(`üåê –ù–∞—á–∏–Ω–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ URL: ${imageUrl.substring(0, 100)}...`);
    
    // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const https = require('https');
    const http = require('http');
    
    const downloadImage = (url) => {
      return new Promise((resolve, reject) => {
        const client = url.startsWith('https') ? https : http;
        
        client.get(url, (response) => {
          if (response.statusCode !== 200) {
            reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));
            return;
          }
          
          const chunks = [];
          response.on('data', (chunk) => chunks.push(chunk));
          response.on('end', () => {
            const buffer = Buffer.concat(chunks);
            resolve(buffer);
          });
        }).on('error', reject);
      });
    };
    
    const imageBuffer = await downloadImage(imageUrl);
    console.log(`üì• –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ: ${(imageBuffer.length / 1024).toFixed(1)}KB`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let originalName = 'downloaded_image';
    try {
      const urlObj = new URL(imageUrl);
      const pathname = urlObj.pathname;
      if (pathname && pathname !== '/') {
        originalName = path.basename(pathname) || 'downloaded_image';
      }
    } catch (e) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    console.log(`üéØ –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: ${originalName}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const result = await vectorizeImage(imageBuffer, originalName, options);
    
    if (result.success) {
      console.log(`‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ URL –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result.filename}`);
      return {
        success: true,
        filename: result.filename,
        filepath: result.filepath,
        svgContent: result.svgContent,
        detectedType: result.detectedType,
        quality: result.quality,
        settings: result.settings,
        optimization: result.optimization,
        sourceUrl: imageUrl,
        message: `–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ URL –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (${result.quality}, ${result.detectedType})`
      };
    } else {
      throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ URL:', error);
    return {
      success: false,
      error: error.message,
      sourceUrl: imageUrl
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
module.exports = {
  vectorizeImage,
  vectorizeFromUrl,
  batchVectorize,
  silkscreenVectorize,
  advancedVectorize,
  preprocessImageForSilkscreen,
  quantizeColorsAI,
  createSilkscreenSVG,
  extractDominantColors,
  createColorMask,
  vectorizeColorLayer,
  combineColorLayers,
  createMonochromeBackup,
  optimizeSVGSize,
  detectContentType,
  generatePreviews,
  convertToFormat,
  multiFormatVectorize,
  optimizeForUsage,
  professionalVectorize,
  SILKSCREEN_PRESET,
  OUTPUT_FORMATS,
  CONTENT_TYPES
};