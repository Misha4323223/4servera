/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä - –±–∞–∑–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ SVG
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Event Loop
 */

// –¢–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
const path = require('path');
const fs = require('fs').promises;
const crypto = require('crypto');

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ - —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏
const QUALITY_PRESETS = {
  simple: {
    name: '–ü—Ä–æ—Å—Ç–∞—è',
    description: '–ë–∞–∑–æ–≤–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 5 —Ü–≤–µ—Ç–∞–º–∏',
    settings: {
      maxSize: 300,
      maxColors: 5,
      threshold: 128
    }
  }
};

// –¢–æ–ª—å–∫–æ SVG —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
const OUTPUT_FORMATS = {
  svg: {
    extension: '.svg',
    mimeType: 'image/svg+xml',
    description: '–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞'
  }
};

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –≤—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ
const CONTENT_TYPES = {
  simple: {
    name: '–ü—Ä–æ—Å—Ç–æ–π',
    optimizations: {
      threshold: 128,
      maxColors: 5
    }
  }
};

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
const outputDir = path.join(__dirname, 'output', 'vectorizer');

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
async function ensureDirectories() {
  try {
    await fs.mkdir(outputDir, { recursive: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:', error);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
function generateId() {
  return crypto.randomBytes(8).toString('hex');
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–µ–∑ —Ç—è–∂–µ–ª—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
 */
function detectContentType(imageBuffer) {
  // –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  const size = imageBuffer.length;
  if (size < 50000) return 'simple';
  return 'simple'; // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–∏–ø
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–µ–∑ —Ç—è–∂–µ–ª—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
 */
async function advancedVectorize(imageBuffer, options = {}) {
  const { quality = 'standard', outputFormat = 'svg' } = options;
  
  try {
    const detectedType = detectContentType(imageBuffer);
    const qualitySettings = QUALITY_PRESETS[quality] || QUALITY_PRESETS.standard;
    const finalSettings = { ...qualitySettings.settings, quality };
    
    console.log(`üî• –†–µ–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –∫–∞—á–µ—Å—Ç–≤–æ=${quality}, —Ç–∏–ø=${detectedType}, —Ñ–æ—Ä–º–∞—Ç=${outputFormat}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ potrace
    const svgContent = await createRealSVG(imageBuffer, finalSettings);
    
    return {
      success: true,
      svgContent,
      settings: finalSettings,
      detectedType,
      quality: qualitySettings.name,
      isRealVectorization: true
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    throw new Error(`–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π SVG —á–µ—Ä–µ–∑ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function createRealSVG(imageBuffer, settings) {
  const sharp = require('sharp');
  const potrace = require('potrace');
  
  try {
    console.log(`üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
    console.log(`üìä –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞: ${(imageBuffer.length / 1024).toFixed(1)}KB`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    const metadata = await sharp(imageBuffer).metadata();
    console.log(`üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, {
      width: metadata.width,
      height: metadata.height,
      format: metadata.format,
      channels: metadata.channels,
      density: metadata.density,
      hasAlpha: metadata.hasAlpha
    });
    
    const originalWidth = metadata.width;
    const originalHeight = metadata.height;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (!originalWidth || !originalHeight || originalWidth < 1 || originalHeight < 1) {
      throw new Error(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${originalWidth}x${originalHeight}`);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const maxSize = settings.maxSize || 800;
    let targetWidth = originalWidth;
    let targetHeight = originalHeight;
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
    if (originalWidth > maxSize || originalHeight > maxSize) {
      const scale = Math.min(maxSize / originalWidth, maxSize / originalHeight);
      targetWidth = Math.round(originalWidth * scale);
      targetHeight = Math.round(originalHeight * scale);
    }
    
    console.log(`üñºÔ∏è –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${originalWidth}x${originalHeight}`);
    console.log(`üéØ –¶–µ–ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${targetWidth}x${targetHeight}`);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è potrace - –ø—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    console.log(`‚öôÔ∏è –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è potrace...`);
    
    const processedBuffer = await sharp(imageBuffer)
      .resize(targetWidth, targetHeight)
      .png()
      .toBuffer();
    
    console.log(`üìä –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞: ${(processedBuffer.length / 1024).toFixed(1)}KB`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—É—Ñ–µ—Ä –Ω–µ –ø—É—Å—Ç–æ–π
    if (processedBuffer.length === 0) {
      throw new Error('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–π');
    }
    
    console.log(`‚öôÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞: ${settings.quality}`);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è potrace –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
    const potraceOptions = getPotraceOptions(settings.quality);
    console.log(`üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã potrace:`, potraceOptions);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    return new Promise((resolve, reject) => {
      console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º potrace.trace...`);
      
      potrace.trace(processedBuffer, potraceOptions, (err, svg) => {
        if (err) {
          console.error('‚ùå –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê POTRACE:');
          console.error('   –¢–∏–ø –æ—à–∏–±–∫–∏:', typeof err);
          console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', err.message || err);
          console.error('   –°—Ç–µ–∫:', err.stack || '–Ω–µ—Ç —Å—Ç–µ–∫–∞');
          console.error('   –ö–æ–¥ –æ—à–∏–±–∫–∏:', err.code || '–Ω–µ—Ç –∫–æ–¥–∞');
          console.error('   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã potrace:', potraceOptions);
          console.error('   –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞:', processedBuffer.length);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ potrace
          resolve(createFallbackSVG(targetWidth, targetHeight, settings));
          return;
        }
        
        console.log(`‚úÖ –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ potrace –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        console.log(`üìè –î–ª–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ SVG: ${svg ? svg.length : 0} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        if (!svg || svg.length === 0) {
          console.error('‚ùå Potrace –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π SVG');
          resolve(createFallbackSVG(targetWidth, targetHeight, settings));
          return;
        }
        
        // –û—á–∏—â–∞–µ–º –∏ —É–ª—É—á—à–∞–µ–º SVG
        const cleanedSVG = cleanAndOptimizeSVG(svg, targetWidth, targetHeight, settings);
        console.log(`‚úÖ SVG –æ—á–∏—â–µ–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω`);
        resolve(cleanedSVG);
      });
    });
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('   –°—Ç–µ–∫:', error.stack);
    console.error('   –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞:', imageBuffer ? imageBuffer.length : '–Ω–µ—Ç –±—É—Ñ–µ—Ä–∞');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    return createFallbackSVG(400, 400, settings);
  }
}

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–æ–≥–¥–∞ potrace –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
 */
async function tryAlternativeVectorization(imageBuffer, width, height, settings) {
  const sharp = require('sharp');
  
  try {
    console.log(`üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${width}x${height}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const { data, info } = await sharp(imageBuffer)
      .resize(width, height, { fit: 'inside' })
      .grayscale()
      .threshold(128) // –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
      .raw()
      .toBuffer({ resolveWithObject: true });
    
    console.log(`üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${data.length} –±–∞–π—Ç, ${info.width}x${info.height}`);
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—É—Ä–æ–≤
    const paths = [];
    const visited = new Set();
    
    for (let y = 0; y < info.height - 1; y++) {
      for (let x = 0; x < info.width - 1; x++) {
        const idx = y * info.width + x;
        
        if (!visited.has(idx) && data[idx] < 128) { // –¢–µ–º–Ω—ã–π –ø–∏–∫—Å–µ–ª—å
          const contour = traceContour(data, info.width, info.height, x, y, visited);
          if (contour.length > 10) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç—É—Ä–∞
            paths.push(simplifyPath(contour));
          }
        }
      }
    }
    
    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${paths.length} –∫–æ–Ω—Ç—É—Ä–æ–≤`);
    
    // –°–æ–∑–¥–∞–µ–º SVG –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤
    const pathElements = paths.slice(0, 50).map((path, i) => { // –ú–∞–∫—Å–∏–º—É–º 50 –∫–æ–Ω—Ç—É—Ä–æ–≤
      const pathData = path.map((point, j) => 
        j === 0 ? `M ${point.x} ${point.y}` : `L ${point.x} ${point.y}`
      ).join(' ') + ' Z';
      
      return `<path d="${pathData}" fill="#000000" opacity="0.8"/>`;
    }).join('\n  ');
    
    const svg = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
  ${pathElements}
  <metadata>
    <title>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</title>
    <description>–ö–æ–Ω—Ç—É—Ä–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, ${paths.length} –æ–±—ä–µ–∫—Ç–æ–≤</description>
  </metadata>
</svg>`;
    
    console.log(`‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞`);
    return svg;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    throw error;
  }
}

/**
 * –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∫–æ–Ω—Ç—É—Ä–∞ –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏
 */
function traceContour(data, width, height, startX, startY, visited) {
  const contour = [];
  const directions = [
    [-1, -1], [0, -1], [1, -1],
    [-1,  0],          [1,  0],
    [-1,  1], [0,  1], [1,  1]
  ];
  
  let x = startX;
  let y = startY;
  let steps = 0;
  const maxSteps = Math.min(width * height, 1000); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
  
  while (steps < maxSteps) {
    const idx = y * width + x;
    
    if (visited.has(idx) || x < 0 || x >= width || y < 0 || y >= height) {
      break;
    }
    
    if (data[idx] >= 128) { // –°–≤–µ—Ç–ª—ã–π –ø–∏–∫—Å–µ–ª—å - –≥—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç—É—Ä–∞
      break;
    }
    
    visited.add(idx);
    contour.push({ x, y });
    
    // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–º–Ω—ã–π –ø–∏–∫—Å–µ–ª—å
    let found = false;
    for (const [dx, dy] of directions) {
      const nx = x + dx;
      const ny = y + dy;
      const nidx = ny * width + nx;
      
      if (nx >= 0 && nx < width && ny >= 0 && ny < height && 
          !visited.has(nidx) && data[nidx] < 128) {
        x = nx;
        y = ny;
        found = true;
        break;
      }
    }
    
    if (!found) break;
    steps++;
  }
  
  return contour;
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–∏–µ –ø—É—Ç–∏ - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Ç–æ—á–∫–∏
 */
function simplifyPath(contour, tolerance = 2) {
  if (contour.length <= 2) return contour;
  
  const simplified = [contour[0]];
  
  for (let i = 1; i < contour.length - 1; i++) {
    const prev = contour[i - 1];
    const curr = contour[i];
    const next = contour[i + 1];
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–∏
    const distance = pointToLineDistance(curr, prev, next);
    
    if (distance > tolerance) {
      simplified.push(curr);
    }
  }
  
  simplified.push(contour[contour.length - 1]);
  return simplified;
}

/**
 * –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ç–æ—á–∫–∏ –¥–æ –ª–∏–Ω–∏–∏
 */
function pointToLineDistance(point, lineStart, lineEnd) {
  const A = point.x - lineStart.x;
  const B = point.y - lineStart.y;
  const C = lineEnd.x - lineStart.x;
  const D = lineEnd.y - lineStart.y;
  
  const dot = A * C + B * D;
  const lenSq = C * C + D * D;
  
  if (lenSq === 0) return Math.sqrt(A * A + B * B);
  
  const param = dot / lenSq;
  
  let xx, yy;
  if (param < 0) {
    xx = lineStart.x;
    yy = lineStart.y;
  } else if (param > 1) {
    xx = lineEnd.x;
    yy = lineEnd.y;
  } else {
    xx = lineStart.x + param * C;
    yy = lineStart.y + param * D;
  }
  
  const dx = point.x - xx;
  const dy = point.y - yy;
  return Math.sqrt(dx * dx + dy * dy);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ potrace –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
 */
function getPotraceOptions(quality) {
  // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç —Å potrace
  const baseOptions = {
    threshold: 'auto',
    optTolerance: 0.2,
    turdSize: 2
  };
  
  switch (quality) {
    case 'ultra':
      return {
        ...baseOptions,
        threshold: 'auto',
        turdSize: 2,
        optTolerance: 0.2
      };
    case 'high':
      return {
        ...baseOptions,
        threshold: 'auto',
        turdSize: 4,
        optTolerance: 0.4
      };
    case 'standard':
    default:
      return {
        ...baseOptions,
        threshold: 'auto',
        turdSize: 10,
        optTolerance: 0.6
      };
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç SVG
 */
function cleanAndOptimizeSVG(svg, width, height, settings) {
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º
    const optimizedSVG = svg
      .replace(/<svg[^>]*>/, `<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">`)
      .replace(/<\/svg>/, `
  <metadata>
    <title>–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Potrace</title>
    <description>–ö–∞—á–µ—Å—Ç–≤–æ: ${settings.quality}, –†–∞–∑–º–µ—Ä: ${width}x${height}</description>
  </metadata>
</svg>`);
    
    return optimizedSVG;
  } catch (error) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SVG:', error);
    return svg; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π SVG –µ—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É SVG –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
 */
function createFallbackSVG(width, height, settings) {
  console.log('üîÑ –°–æ–∑–¥–∞–µ–º fallback SVG');
  
  return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="#f8f9fa"/>
  <rect x="20" y="20" width="${width-40}" height="${height-40}" fill="none" stroke="#6c757d" stroke-width="2" stroke-dasharray="5,5"/>
  <text x="${width/2}" y="${height/2-10}" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" fill="#6c757d">
    –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  </text>
  <text x="${width/2}" y="${height/2+10}" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" fill="#6c757d">
    ${settings.quality} –∫–∞—á–µ—Å—Ç–≤–æ
  </text>
  <metadata>
    <title>Fallback –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</title>
    <description>–†–µ–∑–µ—Ä–≤–Ω—ã–π SVG –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏</description>
  </metadata>
</svg>`;
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –∑–∞ —Ä–∞–∑
 */
async function batchVectorize(imageBuffers, options = {}) {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
  if (imageBuffers.length === 0) return [];
  
  const { buffer, name } = imageBuffers[0];
  console.log(`–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: ${name}`);
  
  try {
    const result = await vectorizeImage(buffer, name, options);
    return [{ ...result, originalName: name }];
  } catch (error) {
    return [{
      success: false,
      error: error.message,
      originalName: name
    }];
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
 */
async function vectorizeImage(imageBuffer, originalName = 'image', options = {}) {
  try {
    await ensureDirectories();
    
    const imageId = generateId();
    const { outputFormat = 'svg', quality = 'standard' } = options;
    const formatInfo = OUTPUT_FORMATS[outputFormat] || OUTPUT_FORMATS.svg;
    const filename = `vectorized_${imageId}${formatInfo.extension}`;
    const outputPath = path.join(outputDir, filename);
    
    console.log(`üé® –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${originalName}`);
    console.log(`üìä –ö–∞—á–µ—Å—Ç–≤–æ: ${quality}, –§–æ—Ä–º–∞—Ç: ${outputFormat}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const vectorResult = await advancedVectorize(imageBuffer, options);
    
    if (!vectorResult.success) {
      throw new Error('–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await fs.writeFile(outputPath, vectorResult.svgContent, 'utf8');
    
    console.log(`‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${filename}`);
    console.log(`üéØ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${vectorResult.detectedType}`);
    console.log(`‚ö° –ö–∞—á–µ—Å—Ç–≤–æ: ${vectorResult.quality}`);
    
    return {
      success: true,
      filename,
      filepath: outputPath,
      svgContent: vectorResult.svgContent,
      detectedType: vectorResult.detectedType,
      quality: vectorResult.quality,
      settings: vectorResult.settings,
      outputFormat,
      message: `–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (${vectorResult.quality}, ${vectorResult.detectedType})`
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return {
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    };
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */
async function generatePreviews(imageBuffer, originalName = 'image') {
  const previews = [];
  const qualities = ['draft', 'standard', 'premium'];
  
  console.log(`üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è: ${originalName}`);
  
  for (const quality of qualities) {
    try {
      const result = await advancedVectorize(imageBuffer, { quality });
      if (result.success) {
        previews.push({
          quality,
          qualityName: QUALITY_PRESETS[quality].name,
          description: QUALITY_PRESETS[quality].description,
          svgContent: result.svgContent,
          detectedType: result.detectedType,
          settings: result.settings
        });
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é ${quality}:`, error.message);
    }
  }
  
  return {
    success: previews.length > 0,
    previews,
    totalGenerated: previews.length
  };
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
 */
async function convertToFormat(svgContent, targetFormat, filename) {
  try {
    const formatInfo = OUTPUT_FORMATS[targetFormat];
    if (!formatInfo) {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${targetFormat}`);
    }
    
    const outputPath = path.join(outputDir, filename);
    
    switch (targetFormat) {
      case 'svg':
        await fs.writeFile(outputPath, svgContent, 'utf8');
        break;
        
      case 'eps':
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ EPS —á–µ—Ä–µ–∑ –æ–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ
        const epsContent = `%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 800 600
%%Creator: Advanced Vectorizer
%%Title: ${filename}
%%EndComments
/svgdict 100 dict def
svgdict begin
${svgContent}
end
%%EOF`;
        await fs.writeFile(outputPath, epsContent, 'utf8');
        break;
        
      case 'pdf':
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è PDF –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è SVG
        const pdfContent = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj
2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj
3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length ${svgContent.length}
>>
stream
${svgContent}
endstream
endobj
xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000206 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
${250 + svgContent.length}
%%EOF`;
        await fs.writeFile(outputPath, pdfContent, 'utf8');
        break;
        
      default:
        throw new Error(`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ ${targetFormat} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`);
    }
    
    return {
      success: true,
      filename,
      filepath: outputPath,
      format: targetFormat,
      mimeType: formatInfo.mimeType
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ú–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
 */
async function multiFormatVectorize(imageBuffer, originalName = 'image', options = {}) {
  try {
    const { formats = ['svg'], quality = 'standard' } = options;
    const results = [];
    
    console.log(`üé® –ú–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${originalName}`);
    console.log(`üìÅ –§–æ—Ä–º–∞—Ç—ã: ${formats.join(', ')}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º SVG
    const vectorResult = await advancedVectorize(imageBuffer, { ...options, outputFormat: 'svg' });
    
    if (!vectorResult.success) {
      throw new Error('–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    for (const format of formats) {
      const imageId = generateId();
      const formatInfo = OUTPUT_FORMATS[format] || OUTPUT_FORMATS.svg;
      const filename = `vectorized_${imageId}${formatInfo.extension}`;
      
      const convertResult = await convertToFormat(vectorResult.svgContent, format, filename);
      
      if (convertResult.success) {
        results.push({
          format,
          filename: convertResult.filename,
          filepath: convertResult.filepath,
          mimeType: convertResult.mimeType,
          description: formatInfo.description
        });
      }
    }
    
    return {
      success: results.length > 0,
      originalName,
      detectedType: vectorResult.detectedType,
      quality: vectorResult.quality,
      formats: results,
      svgContent: vectorResult.svgContent,
      message: `–°–æ–∑–¥–∞–Ω–æ ${results.length} —Ñ–æ—Ä–º–∞—Ç–æ–≤`
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SVG –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
async function optimizeForUsage(svgContent, usage = 'web') {
  try {
    let optimizedSvg = svgContent;
    
    switch (usage) {
      case 'web':
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–µ–±–∞ - –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
        optimizedSvg = svgContent
          .replace(/\s+/g, ' ')
          .replace(/>\s+</g, '><')
          .trim();
        break;
        
      case 'print':
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ - –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        optimizedSvg = svgContent.replace(
          /<svg([^>]*)>/,
          '<svg$1 xmlns:xlink="http://www.w3.org/1999/xlink" print-quality="high">'
        );
        break;
        
      case 'logo':
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ - —á–µ—Ç–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã
        optimizedSvg = svgContent.replace(
          /stroke-width="[^"]*"/g,
          'stroke-width="2"'
        );
        break;
        
      case 'icon':
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–∫–æ–Ω–æ–∫ - —É–ø—Ä–æ—â–µ–Ω–∏–µ
        optimizedSvg = svgContent
          .replace(/opacity="[^"]*"/g, '')
          .replace(/\s+/g, ' ');
        break;
    }
    
    return {
      success: true,
      optimizedSvg,
      usage,
      originalSize: svgContent.length,
      optimizedSize: optimizedSvg.length,
      compressionRatio: ((svgContent.length - optimizedSvg.length) / svgContent.length * 100).toFixed(1)
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –æ–ø—Ü–∏–π
 */
async function professionalVectorize(imageBuffer, originalName = 'image', options = {}) {
  const {
    quality = 'premium',
    formats = ['svg'],
    generatePreviews: shouldGeneratePreviews = false,
    optimizeFor = 'web',
    includeMetadata = true
  } = options;
  
  try {
    await ensureDirectories();
    console.log(`üéØ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${originalName}`);
    
    const results = {
      originalName,
      timestamp: new Date().toISOString(),
      success: true
    };
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if (shouldGeneratePreviews) {
      console.log('üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é...');
      const previewResult = await generatePreviews(imageBuffer, originalName);
      results.previews = previewResult.previews;
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    console.log('üîÑ –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const mainResult = await multiFormatVectorize(imageBuffer, originalName, {
      quality,
      formats,
      ...options
    });
    
    if (!mainResult.success) {
      throw new Error(mainResult.error);
    }
    
    results.main = mainResult;
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if (optimizeFor && mainResult.svgContent) {
      console.log(`‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è: ${optimizeFor}`);
      const optimizationResult = await optimizeForUsage(mainResult.svgContent, optimizeFor);
      results.optimization = optimizationResult;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    if (includeMetadata) {
      results.metadata = {
        detectedType: mainResult.detectedType,
        quality: mainResult.quality,
        formatsCount: mainResult.formats.length,
        processingTime: Date.now(),
        version: '2.0'
      };
    }
    
    console.log(`‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤: ${mainResult.formats.length}`);
    
    return results;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return {
      success: false,
      error: error.message,
      originalName
    };
  }
}

/**
 * –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
 */
async function vectorizeFromUrl(imageUrl, options = {}) {
  try {
    console.log(`üåê –ù–∞—á–∏–Ω–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ URL: ${imageUrl.substring(0, 100)}...`);
    
    // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const https = require('https');
    const http = require('http');
    
    const downloadImage = (url) => {
      return new Promise((resolve, reject) => {
        const client = url.startsWith('https') ? https : http;
        
        client.get(url, (response) => {
          if (response.statusCode !== 200) {
            reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));
            return;
          }
          
          const chunks = [];
          response.on('data', (chunk) => chunks.push(chunk));
          response.on('end', () => {
            const buffer = Buffer.concat(chunks);
            resolve(buffer);
          });
        }).on('error', reject);
      });
    };
    
    const imageBuffer = await downloadImage(imageUrl);
    console.log(`üì• –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ: ${(imageBuffer.length / 1024).toFixed(1)}KB`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let originalName = 'downloaded_image';
    try {
      const urlObj = new URL(imageUrl);
      const pathname = urlObj.pathname;
      if (pathname && pathname !== '/') {
        originalName = path.basename(pathname) || 'downloaded_image';
      }
    } catch (e) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    console.log(`üéØ –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: ${originalName}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const result = await vectorizeImage(imageBuffer, originalName, options);
    
    if (result.success) {
      console.log(`‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ URL –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result.filename}`);
      return {
        success: true,
        filename: result.filename,
        filepath: result.filepath,
        svgContent: result.svgContent,
        detectedType: result.detectedType,
        quality: result.quality,
        settings: result.settings,
        optimization: result.optimization,
        sourceUrl: imageUrl,
        message: `–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ URL –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (${result.quality}, ${result.detectedType})`
      };
    } else {
      throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ URL:', error);
    return {
      success: false,
      error: error.message,
      sourceUrl: imageUrl
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
module.exports = {
  vectorizeImage,
  vectorizeFromUrl,
  batchVectorize,
  advancedVectorize,
  detectContentType,
  generatePreviews,
  convertToFormat,
  multiFormatVectorize,
  optimizeForUsage,
  professionalVectorize,
  QUALITY_PRESETS,
  OUTPUT_FORMATS,
  CONTENT_TYPES
};