/**
 * Standalone —Å–µ—Ä–≤–µ—Ä –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 5006, –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

import express from 'express';
import cors from 'cors';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function startVectorizerServer() {
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  let vectorizerRoutes;
  try {
    console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è vectorizer routes...');
    vectorizerRoutes = await import('./advanced-vectorizer-routes.js');
    vectorizerRoutes = vectorizerRoutes.default;
    console.log('  ‚úì Vectorizer routes –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ vectorizer routes:', error);
    console.error('Error stack:', error.stack);
    process.exit(1);
  }

  const app = express();
  const PORT = process.env.VECTORIZER_PORT || 5006;

  // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞:');
  console.log('  ‚úì Express –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
  console.log('  ‚úì CORS –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
  console.log(`  ‚úì –ü–æ—Ä—Ç: ${PORT}`);
  console.log('  ‚úì __dirname:',  __dirname);

  // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—Ü–µ—Å—Å–∞
  console.log('üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—Ü–µ—Å—Å–∞...');
  
  process.on('uncaughtException', (error) => {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - uncaughtException:', error.message);
    console.error('   Error type:', error.constructor.name);
    console.error('   Stack trace:', error.stack);
    console.error('   Time:', new Date().toISOString());
    process.exit(1);
  });

  process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - unhandledRejection:', reason);
    console.error('   Promise:', promise);
    console.error('   Time:', new Date().toISOString());
    if (reason instanceof Error) {
      console.error('   Stack:', reason.stack);
    }
    process.exit(1);
  });

  process.on('warning', (warning) => {
    console.warn('‚ö†Ô∏è Process Warning:', warning.name, warning.message);
    console.warn('   Stack:', warning.stack);
  });

  process.on('exit', (code) => {
    console.log(`üö™ Process exiting with code: ${code} at ${new Date().toISOString()}`);
  });

  process.on('beforeExit', (code) => {
    console.log(`üö™ Before exit with code: ${code} at ${new Date().toISOString()}`);
  });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(cors({
  origin: ['http://localhost:5000', 'http://localhost:3000', /\.replit\.app$/],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏ URL-encoded –¥–∞–Ω–Ω—ã—Ö
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
app.use('/output', express.static(path.join(__dirname, '..', 'output')));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${req.method} ${req.path} - Vectorizer Server`);
  next();
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
app.use('/api/vectorizer', vectorizerRoutes);

// Healthcheck endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    service: 'vectorizer-server',
    port: PORT,
    timestamp: new Date().toISOString(),
    endpoints: [
      '/api/vectorizer/analyze',
      '/api/vectorizer/convert',
      '/api/vectorizer/professional',
      '/api/vectorizer/batch',
      '/api/vectorizer/previews',
      '/api/vectorizer/multi-format',
      '/api/vectorizer/formats',
      '/api/vectorizer/health'
    ]
  });
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
app.get('/', (req, res) => {
  res.json({
    name: 'BOOOMERANGS AI - Vectorizer Service',
    description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ SVG/EPS/PDF —Ñ–æ—Ä–º–∞—Ç—ã',
    version: '1.0.0',
    port: PORT,
    endpoints: {
      health: '/health',
      api: '/api/vectorizer/*',
      output: '/output/*'
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use((req, res) => {
  res.status(404).json({
    error: 'Endpoint not found',
    message: `Path ${req.path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–µ`,
    availableEndpoints: [
      '/health',
      '/api/vectorizer/*'
    ]
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('Vectorizer Server Error:', err);
  res.status(500).json({
    error: 'Internal Server Error',
    message: err.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
    timestamp: new Date().toISOString()
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
console.log(`üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}...`);
const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`üé® Vectorizer Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìç API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api/vectorizer`);
  console.log(`üè• Health check: http://localhost:${PORT}/health`);
  console.log(`üìÅ Output files: http://localhost:${PORT}/output`);
  console.log(`‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toISOString()}`);
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
  const healthInterval = setInterval(() => {
    try {
      const memUsage = process.memoryUsage();
      const uptime = process.uptime();
      console.log(`üíì Heartbeat ${new Date().toISOString()} - Memory: ${Math.round(memUsage.heapUsed / 1024 / 1024)}MB, Uptime: ${Math.round(uptime)}s`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
      if (!server.listening) {
        console.error('‚ùå –°–µ—Ä–≤–µ—Ä –±–æ–ª—å—à–µ –Ω–µ —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É!');
        clearInterval(healthInterval);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ heartbeat:', error.message);
      console.error('   Stack:', error.stack);
    }
  }, 3000);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
  server.healthInterval = healthInterval;
});

// –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
  console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–ï–†–í–ï–†–ê:', error.message);
  console.error('   Error code:', error.code);
  console.error('   Error type:', error.constructor.name);
  console.error('   Time:', new Date().toISOString());
  console.error('   Stack:', error.stack);
  
  if (error.code === 'EADDRINUSE') {
    console.error(`   –ü–æ—Ä—Ç ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º`);
  } else if (error.code === 'EACCES') {
    console.error(`   –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ä—Ç—É ${PORT}`);
  }
});

server.on('close', () => {
  console.log(`üõë –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç –≤: ${new Date().toISOString()}`);
  if (server.healthInterval) {
    clearInterval(server.healthInterval);
    console.log('üßπ Health interval –æ—á–∏—â–µ–Ω');
  }
});

server.on('connection', (socket) => {
  console.log(`üîó –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${new Date().toISOString()}`);
  
  socket.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞:', error.message);
    console.error('   Time:', new Date().toISOString());
  });
  
  socket.on('close', (hadError) => {
    console.log(`üîå –°–æ–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç: ${new Date().toISOString()}, had error: ${hadError}`);
  });
  
  socket.on('timeout', () => {
    console.warn('‚è∞ Socket timeout:', new Date().toISOString());
  });
});

  // Graceful shutdown
  process.on('SIGTERM', () => {
    console.log('üõë Vectorizer Server –ø–æ–ª—É—á–∏–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
    process.exit(0);
  });

  process.on('SIGINT', () => {
    console.log('üõë Vectorizer Server –ø–æ–ª—É—á–∏–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
    process.exit(0);
  });
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
startVectorizerServer().catch((error) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞:', error);
  console.error('Stack:', error.stack);
  process.exit(1);
});