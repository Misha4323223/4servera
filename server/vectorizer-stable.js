#!/usr/bin/env node
/**
 * –ê–±—Å–æ–ª—é—Ç–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞–¥–µ–Ω–∏—è
 */

import express from 'express';
import cors from 'cors';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
let server;
let keepAliveIntervals = [];
const PORT = process.env.VECTORIZER_PORT || 3001;

// –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
const logFile = '/tmp/vectorizer-stable.log';
const logStream = fs.createWriteStream(logFile, { flags: 'w' });

function log(message, type = 'INFO') {
  const timestamp = new Date().toISOString();
  const logEntry = `[${timestamp}] [${type}] ${message}\n`;
  logStream.write(logEntry);
  console.log(message);
}

log('üöÄ STABLE VECTORIZER STARTUP');

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
function stabilizeProcess() {
  log('üîí –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞');
  
  // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ keep-alive –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
  const intervals = [
    setInterval(() => { /* keep alive 1 */ }, 1000),
    setInterval(() => { /* keep alive 2 */ }, 2000),
    setInterval(() => { /* keep alive 3 */ }, 5000),
    setInterval(() => { 
      log(`üí™ Process force-keep-alive: PID ${process.pid}`, 'STABLE');
    }, 30000)
  ];
  
  keepAliveIntervals.push(...intervals);
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.stdin.resume();
  
  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ setTimeout
  const blockExit = () => {
    setTimeout(blockExit, 10000);
  };
  blockExit();
  
  log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
async function loadRoutes() {
  try {
    log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
    const routesModule = await import('./advanced-vectorizer-routes.js');
    log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    return routesModule.default;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: ${error.message}`, 'ERROR');
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async function startStableVectorizer() {
  log('üéØ –ó–∞–ø—É—Å–∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞');
  
  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é —Å—Ä–∞–∑—É
  stabilizeProcess();
  
  // –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  const app = express();
  
  // CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
  app.use(cors({
    origin: ['http://localhost:5000', 'http://localhost:3000', /\.replit\.app$/],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
  }));
  
  // –ë–∞–∑–æ–≤—ã–µ middleware
  app.use(express.json({ limit: '50mb' }));
  app.use(express.urlencoded({ extended: true, limit: '50mb' }));
  
  // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
  app.use((req, res, next) => {
    log(`üåê ${req.method} ${req.url}`, 'HTTP');
    next();
  });
  
  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
  app.use('/output', express.static(path.join(__dirname, '..', 'output')));
  
  // Health check
  app.get('/health', (req, res) => {
    const health = {
      status: 'ok',
      service: 'vectorizer-server-stable',
      port: PORT,
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      pid: process.pid,
      memory: process.memoryUsage(),
      activeHandles: process._getActiveHandles().length
    };
    res.json(health);
  });
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
  try {
    const vectorizerRoutes = await loadRoutes();
    app.use('/api/vectorizer', vectorizerRoutes);
    log('üé® –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤: ${error.message}`, 'ERROR');
    process.exit(1);
  }
  
  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  return new Promise((resolve, reject) => {
    server = app.listen(PORT, '0.0.0.0', (error) => {
      if (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`, 'ERROR');
        reject(error);
        return;
      }
      
      log(`üé® –°—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      log(`üìç API: http://localhost:${PORT}/api/vectorizer`);
      log(`üè• Health: http://localhost:${PORT}/health`);
      
      // Heartbeat —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      const heartbeat = setInterval(() => {
        const mem = process.memoryUsage();
        const handles = process._getActiveHandles().length;
        log(`üíì Heartbeat: Uptime=${Math.round(process.uptime())}s, Memory=${Math.round(mem.heapUsed/1024/1024)}MB, Handles=${handles}`, 'HEARTBEAT');
      }, 10000);
      
      keepAliveIntervals.push(heartbeat);
      resolve(server);
    });
    
    server.on('error', (error) => {
      log(`‚ùå Server error: ${error.message}`, 'ERROR');
      reject(error);
    });
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', () => {
  log('üì• SIGTERM –ø–æ–ª—É—á–µ–Ω, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...', 'SHUTDOWN');
  cleanup();
});

process.on('SIGINT', () => {
  log('üì• SIGINT –ø–æ–ª—É—á–µ–Ω, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...', 'SHUTDOWN');
  cleanup();
});

function cleanup() {
  log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...', 'SHUTDOWN');
  
  keepAliveIntervals.forEach(interval => {
    clearInterval(interval);
  });
  
  if (server) {
    server.close(() => {
      log('‚úÖ –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç', 'SHUTDOWN');
      logStream.end();
      process.exit(0);
    });
  } else {
    logStream.end();
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫
(async () => {
  try {
    await startStableVectorizer();
    log('‚úÖ –°–¢–ê–ë–ò–õ–¨–ù–´–ô –í–ï–ö–¢–û–†–ò–ó–ê–¢–û–† –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í');
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${error.message}`, 'ERROR');
    process.exit(1);
  }
})();