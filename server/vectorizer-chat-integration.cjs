/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–Ω—É–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä"
 * –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ StreamVectorizer —Å Adobe Illustrator Image Trace –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
 */

const fetch = require('node-fetch');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–Ω—É–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä" –≤ –ø–æ—Ç–æ–∫–æ–≤–æ–º —á–∞—Ç–µ
 */
async function handleVectorizerCommand(message, sessionId, res, previousImage) {
  console.log('üéØ [VECTORIZER-CHAT] –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let imageUrl = null;
    
    if (previousImage && previousImage.url) {
      imageUrl = previousImage.url;
      console.log('üñºÔ∏è [VECTORIZER-CHAT] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    } else {
      // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏
      try {
        const { getSessionMessages } = require('./chat-history');
        const messages = await getSessionMessages(sessionId);
        
        if (messages && messages.length > 0) {
          for (let i = messages.length - 1; i >= 0; i--) {
            const msg = messages[i];
            if (msg.sender === 'ai' && msg.text) {
              const imageMatch = msg.text.match(/https:\/\/image\.pollinations\.ai\/prompt\/[^\s\)]+/);
              if (imageMatch) {
                imageUrl = imageMatch[0];
                console.log('üîç [VECTORIZER-CHAT] –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏');
                break;
              }
            }
          }
        }
      } catch (historyError) {
        console.log('‚ö†Ô∏è [VECTORIZER-CHAT] –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', historyError.message);
      }
    }
    
    if (!imageUrl) {
      sendStreamMessage(res, 'assistant', 
        'üîç –î–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–Ω—É–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä".'
      );
      return false;
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    sendStreamMessage(res, 'assistant', 
      'üöÄ –ó–∞–ø—É—Å–∫–∞—é –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å Adobe Illustrator Image Trace –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º...'
    );
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    sendStreamMessage(res, 'assistant', 'üì• –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
    
    const imageResponse = await fetch(imageUrl);
    if (!imageResponse.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }
    
    const imageBuffer = await imageResponse.buffer();
    const imageSizeKB = Math.round(imageBuffer.length / 1024);
    
    sendStreamMessage(res, 'assistant', 
      `üìä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${imageSizeKB}KB\nüîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ—Ç–æ–∫–æ–≤—É—é –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...`
    );
    
    // –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
    const { StreamVectorizer } = require('../advanced-vectorizer.cjs');
    const vectorizer = new StreamVectorizer(imageBuffer, {
      maxColors: 5,           // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
      tileSize: 512,          // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      overlap: 32,            // –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –≥—Ä–∞–Ω–∏—Ü
      maxMemoryMB: 150,       // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
      tolerance: 1.0,         // –¢–æ—á–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      enableOptimization: true
    });
    
    // –≠–¢–ê–ü 1: –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    sendStreamMessage(res, 'assistant', 'üìê –≠—Ç–∞–ø 1: –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ tiles...');
    
    const imageInfo = await vectorizer.initializeImage();
    await vectorizer.runPreprocessing(imageInfo);
    
    sendStreamMessage(res, 'assistant', 
      `‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\nüìê –†–∞–∑–º–µ—Ä—ã: ${imageInfo.width}√ó${imageInfo.height}\nüß© –°–æ–∑–¥–∞–Ω–æ ${vectorizer.tileProcessor.tiles.length} tiles`
    );
    
    // –≠–¢–ê–ü 2: –¶–≤–µ—Ç–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
    sendStreamMessage(res, 'assistant', 'üé® –≠—Ç–∞–ø 2: –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è...');
    
    await vectorizer.runColorSegmentation();
    
    const colorInfo = vectorizer.globalColorPalette ? 
      vectorizer.globalColorPalette.map((color, i) => 
        `${i + 1}. #${color.hex} (RGB: ${color.r}, ${color.g}, ${color.b})`
      ).join('\n') : '–ü–∞–ª–∏—Ç—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞';
    
    sendStreamMessage(res, 'assistant', 
      `‚úÖ –¶–≤–µ—Ç–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\nüé® –ü–∞–ª–∏—Ç—Ä–∞ –∏–∑ ${vectorizer.globalColorPalette ? vectorizer.globalColorPalette.length : 0} —Ü–≤–µ—Ç–æ–≤:\n${colorInfo}`
    );
    
    // –≠–¢–ê–ü 3: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–æ–∫
    sendStreamMessage(res, 'assistant', 'üé≠ –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö –º–∞—Å–æ–∫...');
    
    await vectorizer.runMaskCreation();
    
    sendStreamMessage(res, 'assistant', '‚úÖ –¶–≤–µ—Ç–æ–≤—ã–µ –º–∞—Å–∫–∏ —Å–æ–∑–¥–∞–Ω—ã');
    
    // –≠–¢–ê–ü 4: –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    sendStreamMessage(res, 'assistant', 'üîÑ –≠—Ç–∞–ø 4: –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤ —Å Marching Squares...');
    
    await vectorizer.runVectorization();
    
    sendStreamMessage(res, 'assistant', 
      `‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\nüìä –°–æ–∑–¥–∞–Ω–æ ${vectorizer.globalContours ? vectorizer.globalContours.length : 0} –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤`
    );
    
    // –≠–¢–ê–ü 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SVG
    sendStreamMessage(res, 'assistant', 'üìÑ –≠—Ç–∞–ø 5: –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è SVG...');
    
    const result = await vectorizer.runSVGGeneration();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
    const memStats = vectorizer.memoryManager.getMemoryStatistics();
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é SVG –¥–ª—è —á–∞—Ç–∞
    let svgPreview = '';
    if (result.svgContent && result.svgContent.includes('<svg')) {
      let previewSvg = result.svgContent
        .replace(/width="[^"]*"/g, 'width="400"')
        .replace(/height="[^"]*"/g, 'height="400"')
        .replace(/viewBox="[^"]*"/g, 'viewBox="0 0 400 400"');
      
      if (!previewSvg.includes('</svg>')) {
        previewSvg += '</svg>';
      }
      
      svgPreview = `

**–ü—Ä–µ–≤—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:**
\`\`\`svg
${previewSvg}
\`\`\`

`;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º SVG —Ñ–∞–π–ª
    const fs = require('fs');
    const path = require('path');
    const outputDir = path.join(__dirname, '../output');
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    const filename = `vectorized_${Date.now()}.svg`;
    const filepath = path.join(outputDir, filename);
    fs.writeFileSync(filepath, result.svgContent);
    
    console.log('üíæ [VECTORIZER-CHAT] SVG —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', filepath);
    
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    vectorizer.memoryManager.destroy();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    sendStreamMessage(res, 'assistant', 
      `üéâ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${svgPreview}

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:**
‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${imageSizeKB}KB
‚Ä¢ SVG —Ä–∞–∑–º–µ—Ä: ${Math.round(result.fileSize / 1024)}KB
‚Ä¢ –°–∂–∞—Ç–∏–µ: ${((1 - result.fileSize / imageBuffer.length) * 100).toFixed(1)}%
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${(result.processingTime / 1000).toFixed(2)}s
‚Ä¢ –¶–≤–µ—Ç–æ–≤ –≤ –ø–∞–ª–∏—Ç—Ä–µ: ${result.colorCount}
‚Ä¢ –í–µ–∫—Ç–æ—Ä–Ω—ã—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤: ${result.contourCount}
‚Ä¢ –ü–∏–∫–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memStats.max.toFixed(1)}MB

üé® **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 5 —Ü–≤–µ—Ç–æ–≤
‚Ä¢ –í—ã—Å–æ–∫–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤
‚Ä¢ Adobe Illustrator Image Trace —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø–µ—á–∞—Ç–∏!
üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`
    );
    
    return true;
    
  } catch (error) {
    console.error('‚ùå [VECTORIZER-CHAT] –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    sendStreamMessage(res, 'assistant', 
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ 5MB)
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`
    );
    return false;
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function sendStreamMessage(res, role, content) {
  res.write(`event: message\n`);
  res.write(`data: ${JSON.stringify({
    role: role,
    content: content
  })}\n\n`);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
function isVectorizerCommand(message) {
  const vectorizerKeywords = [
    '–Ω—É–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä', 
    '–≤–µ–∫—Ç–æ—Ä–∏–∑—É–π', 
    '–≤ –≤–µ–∫—Ç–æ—Ä', 
    '—Å–¥–µ–ª–∞–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–º',
    '–ø—Ä–µ–æ–±—Ä–∞–∑—É–π –≤ –≤–µ–∫—Ç–æ—Ä',
    'svg –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    '–≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞'
  ];
  
  const messageLower = message.toLowerCase();
  return vectorizerKeywords.some(keyword => messageLower.includes(keyword));
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function extractVectorizerSettings(message) {
  const settings = {
    maxColors: 5,           // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
    tileSize: 512,
    tolerance: 1.0,
    enableOptimization: true
  };
  
  const messageLower = message.toLowerCase();
  
  // –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–≤–µ—Ç–æ–≤
  const colorMatch = messageLower.match(/(\d+)\s*—Ü–≤–µ—Ç/);
  if (colorMatch) {
    const colors = parseInt(colorMatch[1]);
    if (colors >= 2 && colors <= 10) {
      settings.maxColors = colors;
    }
  }
  
  // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
  if (messageLower.includes('–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ') || messageLower.includes('–¥–µ—Ç–∞–ª—å–Ω–æ')) {
    settings.tolerance = 0.5;
    settings.tileSize = 256;
  } else if (messageLower.includes('–±—ã—Å—Ç—Ä–æ') || messageLower.includes('–ø—Ä–æ—Å—Ç–æ')) {
    settings.tolerance = 2.0;
    settings.tileSize = 1024;
  }
  
  return settings;
}

module.exports = {
  handleVectorizerCommand,
  isVectorizerCommand,
  extractVectorizerSettings,
  sendStreamMessage
};