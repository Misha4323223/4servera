/**
 * –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
 * REST API endpoints –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const fs = require('fs').promises;
const advancedVectorizer = require('../advanced-vectorizer.cjs');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.memoryStorage();
const upload = multer({
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB –ª–∏–º–∏—Ç
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/bmp'];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('Unsupported file type'), false);
    }
  }
});

/**
 * POST /api/vectorizer/analyze
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
router.post('/analyze', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
      });
    }

    const contentType = await advancedVectorizer.detectContentType(req.file.buffer);
    
    res.json({
      success: true,
      analysis: {
        detectedType: contentType.type,
        confidence: contentType.confidence,
        recommendedQuality: contentType.recommendedSettings.quality,
        recommendedFormat: contentType.recommendedSettings.outputFormat,
        description: contentType.description
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/vectorizer/convert
 * –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
router.post('/convert', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
      });
    }

    const options = {
      quality: req.body.quality || 'standard',
      outputFormat: req.body.format || 'svg',
      optimizeFor: req.body.optimizeFor || 'web',
      autoDetectType: req.body.autoDetectType !== 'false'
    };

    console.log(`üéØ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API:`, {
      filename: req.file.originalname,
      size: req.file.size,
      options
    });

    const result = await advancedVectorizer.vectorizeImage(
      req.file.buffer,
      req.file.originalname,
      options
    );

    if (result.success) {
      res.json({
        success: true,
        result: {
          svgContent: result.svgContent,
          detectedType: result.detectedType,
          quality: result.quality,
          filename: result.filename,
          optimizationStats: result.optimization
        }
      });
    } else {
      res.status(500).json({
        success: false,
        error: result.error
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/vectorizer/professional
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –æ–ø—Ü–∏–π
 */
router.post('/professional', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
      });
    }

    const options = {
      quality: req.body.quality || 'premium',
      formats: req.body.formats ? req.body.formats.split(',') : ['svg'],
      generatePreviews: req.body.generatePreviews === 'true',
      optimizeFor: req.body.optimizeFor || 'web',
      includeMetadata: req.body.includeMetadata !== 'false'
    };

    console.log(`üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API:`, {
      filename: req.file.originalname,
      options
    });

    const result = await advancedVectorizer.professionalVectorize(
      req.file.buffer,
      req.file.originalname,
      options
    );

    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/vectorizer/batch
 * –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
router.post('/batch', upload.array('images', 10), async (req, res) => {
  try {
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({
        success: false,
        error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'
      });
    }

    const options = {
      quality: req.body.quality || 'standard',
      outputFormat: req.body.format || 'svg'
    };

    console.log(`üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${req.files.length} —Ñ–∞–π–ª–æ–≤`);

    const imageBuffers = req.files.map(file => ({
      buffer: file.buffer,
      originalName: file.originalname
    }));

    const result = await advancedVectorizer.batchVectorize(imageBuffers, options);

    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/vectorizer/previews
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
 */
router.post('/previews', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
      });
    }

    console.log(`üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –¥–ª—è: ${req.file.originalname}`);

    const result = await advancedVectorizer.generatePreviews(
      req.file.buffer,
      req.file.originalname
    );

    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/vectorizer/multi-format
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
 */
router.post('/multi-format', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
      });
    }

    const formats = req.body.formats ? req.body.formats.split(',') : ['svg', 'eps', 'pdf'];
    const options = {
      quality: req.body.quality || 'premium',
      formats: formats
    };

    console.log(`üé® –ú–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:`, {
      filename: req.file.originalname,
      formats: formats
    });

    const result = await advancedVectorizer.multiFormatVectorize(
      req.file.buffer,
      req.file.originalname,
      options
    );

    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –º–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * GET /api/vectorizer/formats
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
router.get('/formats', (req, res) => {
  res.json({
    success: true,
    formats: advancedVectorizer.OUTPUT_FORMATS,
    qualities: advancedVectorizer.QUALITY_PRESETS,
    contentTypes: advancedVectorizer.CONTENT_TYPES
  });
});

/**
 * GET /api/vectorizer/health
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
router.get('/health', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    const outputDir = path.join(__dirname, '..', 'output');
    const tempDir = path.join(__dirname, '..', 'temp');
    
    await fs.access(outputDir).catch(() => fs.mkdir(outputDir, { recursive: true }));
    await fs.access(tempDir).catch(() => fs.mkdir(tempDir, { recursive: true }));

    res.json({
      success: true,
      status: 'healthy',
      module: 'advanced-vectorizer',
      version: '2.0',
      directories: {
        output: outputDir,
        temp: tempDir
      },
      capabilities: [
        'auto-detection',
        'multi-format',
        'quality-levels',
        'batch-processing',
        'optimization',
        'previews'
      ]
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      status: 'unhealthy',
      error: error.message
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ multer
router.use((error, req, res, next) => {
  if (error instanceof multer.MulterError) {
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({
        success: false,
        error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10MB)'
      });
    }
  }
  
  res.status(500).json({
    success: false,
    error: error.message
  });
});

module.exports = router;