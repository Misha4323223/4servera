/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
 * –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3001, –±–µ–∑ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
 */

import express from 'express';
import cors from 'cors';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞...');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
let vectorizerRoutes;
try {
  console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ vectorizer routes...');
  vectorizerRoutes = await import('./advanced-vectorizer-routes.js');
  vectorizerRoutes = vectorizerRoutes.default;
  console.log('‚úÖ Vectorizer routes –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ routes:', error.message);
  process.exit(1);
}

const app = express();
const PORT = process.env.VECTORIZER_PORT || 3001;

// CORS —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
app.use(cors({
  origin: ['http://localhost:3001', 'http://localhost:5000', 'http://localhost:3000', /\.replit\.app$/],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

// JSON –∏ URL parsing
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use('/output', express.static(path.join(__dirname, '..', 'output')));

// –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —É—Ç–µ—á–µ–∫
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} ${req.method} ${req.path}`);
  next();
});

// –ú–∞—Ä—à—Ä—É—Ç—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
app.use('/api/vectorizer', vectorizerRoutes);

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    service: 'vectorizer-server',
    port: PORT,
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.json({
    name: 'BOOOMERANGS AI - Vectorizer Service',
    description: '–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ SVG/EPS/PDF —Ñ–æ—Ä–º–∞—Ç—ã',
    version: '1.0.0',
    port: PORT,
    endpoints: {
      health: '/health',
      api: '/api/vectorizer/*',
      output: '/output/*'
    }
  });
});

// 404 –æ–±—Ä–∞–±–æ—Ç–∫–∞
app.use((req, res) => {
  res.status(404).json({
    error: 'Endpoint not found',
    message: `Path ${req.path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`,
    availableEndpoints: ['/health', '/api/vectorizer/*']
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('Server Error:', err.message);
  res.status(500).json({
    error: 'Internal Server Error',
    message: err.message,
    timestamp: new Date().toISOString()
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`‚úÖ Vectorizer Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìç API: http://localhost:${PORT}/api/vectorizer`);
  console.log(`üè• Health: http://localhost:${PORT}/health`);
  console.log(`üìÅ Output: http://localhost:${PORT}/output`);
  console.log(`‚ö° PID: ${process.pid}`);
});

// –û–¥–∏–Ω–æ—á–Ω—ã–π keep-alive –∏–Ω—Ç–µ—Ä–≤–∞–ª
const keepAliveInterval = setInterval(() => {
  console.log(`üíì Keep-alive: ${process.uptime().toFixed(0)}s uptime`);
}, 10000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
const gracefulShutdown = (signal) => {
  console.log(`üì• ${signal} –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...`);
  clearInterval(keepAliveInterval);
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    process.exit(0);
  });
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error.message);
  console.error('Stack:', error.stack);
  clearInterval(keepAliveInterval);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
  clearInterval(keepAliveInterval);
  process.exit(1);
});

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
  console.error('‚ùå Server Error:', error.message);
  if (error.code === 'EADDRINUSE') {
    console.error(`Port ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`);
    process.exit(1);
  }
});

console.log('üîí –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');