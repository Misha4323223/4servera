/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Adobe –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
 */

const adobeTracer = require('./adobe-illustrator-tracer.cjs');
const fs = require('fs');
const https = require('https');

async function testImprovedVectorizer() {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Adobe –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    
    const testImageUrl = 'https://image.pollinations.ai/prompt/simple-red-dragon-silhouette?width=600&height=600';
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
        const imageBuffer = await downloadImage(testImageUrl);
        
        // –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        console.log('üé® –ó–∞–ø—É—Å–∫ Adobe Illustrator Image Trace –∞–ª–≥–æ—Ä–∏—Ç–º–∞...');
        const result = await adobeTracer.adobeImageTrace(imageBuffer, {
            maxColors: 5,
            quality: 'silkscreen'
        });
        
        if (result.success) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const filename = `adobe-vectorized-${Date.now()}.svg`;
            fs.writeFileSync(filename, result.svgContent);
            
            console.log('‚úÖ –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê:');
            console.log(`   üìÑ –§–∞–π–ª: ${filename}`);
            console.log(`   üìä –†–∞–∑–º–µ—Ä: ${(result.svgContent.length / 1024).toFixed(1)} KB`);
            console.log(`   üé® –¶–≤–µ—Ç–æ–≤: ${result.colorsUsed}`);
            console.log(`   üìè –ö–∞—á–µ—Å—Ç–≤–æ: ${result.quality}`);
            console.log(`   üîß –ê–ª–≥–æ—Ä–∏—Ç–º: ${result.algorithm}`);
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é HTML
            const previewHtml = createPreviewHtml(result.svgContent, filename);
            const previewFilename = filename.replace('.svg', '-preview.html');
            fs.writeFileSync(previewFilename, previewHtml);
            console.log(`   üëÅÔ∏è –ü—Ä–µ–≤—å—é: ${previewFilename}`);
            
            return { success: true, filename, previewFilename };
        } else {
            console.error('‚ùå –û–®–ò–ë–ö–ê –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–ò:', result.error);
            return { success: false, error: result.error };
        }
        
    } catch (error) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
        return { success: false, error: error.message };
    }
}

function downloadImage(url) {
    return new Promise((resolve, reject) => {
        https.get(url, (res) => {
            const chunks = [];
            res.on('data', chunk => chunks.push(chunk));
            res.on('end', () => resolve(Buffer.concat(chunks)));
        }).on('error', reject);
    });
}

function createPreviewHtml(svgContent, filename) {
    return `<!DOCTYPE html>
<html>
<head>
    <title>Adobe Vectorizer Preview - ${filename}</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 20px; 
            background: #f5f5f5; 
        }
        .preview-container { 
            max-width: 800px; 
            margin: 0 auto; 
            background: white; 
            padding: 20px; 
            border-radius: 10px; 
            box-shadow: 0 2px 10px rgba(0,0,0,0.1); 
        }
        .svg-container { 
            text-align: center; 
            margin: 20px 0; 
            padding: 20px; 
            border: 2px dashed #ddd; 
            border-radius: 5px; 
        }
        .info { 
            background: #e8f4fd; 
            padding: 15px; 
            border-radius: 5px; 
            margin: 10px 0; 
        }
        .title { 
            color: #333; 
            text-align: center; 
            margin-bottom: 20px; 
        }
        .adobe-badge { 
            background: #FF6B35; 
            color: white; 
            padding: 5px 10px; 
            border-radius: 15px; 
            font-size: 12px; 
            display: inline-block; 
        }
    </style>
</head>
<body>
    <div class="preview-container">
        <h1 class="title">
            <span class="adobe-badge">Adobe Illustrator Compatible</span><br>
            –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        </h1>
        
        <div class="info">
            <strong>–§–∞–π–ª:</strong> ${filename}<br>
            <strong>–†–∞–∑–º–µ—Ä:</strong> ${(svgContent.length / 1024).toFixed(1)} KB<br>
            <strong>–ê–ª–≥–æ—Ä–∏—Ç–º:</strong> Adobe Illustrator Image Trace Limited Color<br>
            <strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> ${new Date().toLocaleString('ru-RU')}
        </div>
        
        <div class="svg-container">
            ${svgContent}
        </div>
        
        <div class="info">
            <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ—á–Ω–æ–π –∫–æ–ø–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ Adobe Illustrator Image Trace –≤ —Ä–µ–∂–∏–º–µ "Limited Color". –°–æ–∑–¥–∞—é—Ç—Å—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ Adobe Illustrator.
        </div>
    </div>
</body>
</html>`;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
    testImprovedVectorizer()
        .then(result => {
            if (result.success) {
                console.log('\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù');
                console.log(`–û—Ç–∫—Ä–æ–π—Ç–µ ${result.previewFilename} –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞`);
            } else {
                console.log('\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù');
                process.exit(1);
            }
        })
        .catch(error => {
            console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error);
            process.exit(1);
        });
}

module.exports = { testImprovedVectorizer };