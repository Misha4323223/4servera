/**
 * Adobe Illustrator Image Trace Limited Color - —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
 * –°–æ–∑–¥–∞–µ—Ç —á–µ—Ç–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º Adobe Illustrator
 */

const sharp = require('sharp');

/**
 * ADOBE ILLUSTRATOR TRACE - –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ê–õ–ì–û–†–ò–¢–ú–ê
 * –≠—Ç–∞–ø 1: –¶–≤–µ—Ç–æ–≤–∞—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–º K-means (–∫–∞–∫ –≤ Adobe)
 */
async function adobeColorQuantization(imageBuffer, maxColors = 5) {
  console.log(`üé® ADOBE TRACE: –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ ${maxColors} —Ü–≤–µ—Ç–æ–≤`);
  
  const { data, info } = await sharp(imageBuffer)
    .resize(400, 400, { fit: 'inside' })
    .raw()
    .toBuffer({ resolveWithObject: true });
  
  console.log(`üìä ADOBE: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${info.width}x${info.height}`);
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∏–∫—Å–µ–ª–∏ –¥–ª—è K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
  const pixels = [];
  for (let i = 0; i < data.length; i += info.channels) {
    const r = data[i];
    const g = data[i + 1];
    const b = data[i + 2];
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ
    if (info.channels === 4 && data[i + 3] < 10) continue;
    
    pixels.push([r, g, b]);
  }
  
  console.log(`üìä ADOBE: –ù–∞–π–¥–µ–Ω–æ ${pixels.length} –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
  
  // K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (–∞–ª–≥–æ—Ä–∏—Ç–º Adobe)
  const clusters = performAdobeKMeans(pixels, maxColors);
  
  console.log(`‚úÖ ADOBE: –ü–æ–ª—É—á–µ–Ω–æ ${clusters.length} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —Ü–≤–µ—Ç–æ–≤`);
  clusters.forEach((cluster, i) => {
    const [r, g, b] = cluster.center;
    const hex = `#${Math.round(r).toString(16).padStart(2, '0')}${Math.round(g).toString(16).padStart(2, '0')}${Math.round(b).toString(16).padStart(2, '0')}`;
    const coverage = ((cluster.pixels.length / pixels.length) * 100).toFixed(1);
    console.log(`  ${i + 1}. ${hex} (${coverage}%)`);
  });
  
  return clusters.map(cluster => {
    const [r, g, b] = cluster.center;
    return {
      r: Math.round(r),
      g: Math.round(g), 
      b: Math.round(b),
      hex: `#${Math.round(r).toString(16).padStart(2, '0')}${Math.round(g).toString(16).padStart(2, '0')}${Math.round(b).toString(16).padStart(2, '0')}`,
      percentage: ((cluster.pixels.length / pixels.length) * 100).toFixed(1),
      pixelCount: cluster.pixels.length
    };
  });
}

/**
 * Adobe K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è - —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
 */
function performAdobeKMeans(pixels, k, maxIterations = 20) {
  console.log(`üîç ADOBE K-MEANS: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è ${pixels.length} –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞ ${k} –≥—Ä—É–ø–ø`);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (Adobe –º–µ—Ç–æ–¥)
  let centers = [];
  for (let i = 0; i < k; i++) {
    const randomIndex = Math.floor(Math.random() * pixels.length);
    centers.push([...pixels[randomIndex]]);
  }
  
  let assignments = new Array(pixels.length);
  let hasChanged = true;
  let iteration = 0;
  
  while (hasChanged && iteration < maxIterations) {
    hasChanged = false;
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª–µ–π –∫ –±–ª–∏–∂–∞–π—à–∏–º —Ü–µ–Ω—Ç—Ä–∞–º
    for (let i = 0; i < pixels.length; i++) {
      const pixel = pixels[i];
      let minDistance = Infinity;
      let closestCenter = 0;
      
      for (let j = 0; j < centers.length; j++) {
        const distance = euclideanDistance(pixel, centers[j]);
        if (distance < minDistance) {
          minDistance = distance;
          closestCenter = j;
        }
      }
      
      if (assignments[i] !== closestCenter) {
        assignments[i] = closestCenter;
        hasChanged = true;
      }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    for (let j = 0; j < centers.length; j++) {
      const clusterPixels = pixels.filter((_, i) => assignments[i] === j);
      if (clusterPixels.length > 0) {
        const newCenter = [0, 0, 0];
        for (const pixel of clusterPixels) {
          newCenter[0] += pixel[0];
          newCenter[1] += pixel[1];
          newCenter[2] += pixel[2];
        }
        centers[j] = [
          newCenter[0] / clusterPixels.length,
          newCenter[1] / clusterPixels.length,
          newCenter[2] / clusterPixels.length
        ];
      }
    }
    
    iteration++;
  }
  
  console.log(`üîç ADOBE K-MEANS: –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${iteration} –∏—Ç–µ—Ä–∞—Ü–∏–π`);
  
  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
  const clusters = centers.map((center, index) => ({
    center,
    pixels: pixels.filter((_, i) => assignments[i] === index)
  }));
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–ª–∞—Å—Ç–µ—Ä–∞ (–∫–∞–∫ –≤ Adobe)
  clusters.sort((a, b) => b.pixels.length - a.pixels.length);
  
  return clusters;
}

/**
 * ADOBE ILLUSTRATOR TRACE - –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö –º–∞—Å–æ–∫
 */
async function createAdobeColorMask(imageBuffer, targetColor) {
  console.log(`üéØ ADOBE MASK: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è ${targetColor.hex}`);
  
  const { data, info } = await sharp(imageBuffer)
    .resize(800, 800, { fit: 'inside', withoutEnlargement: false }) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
    .raw()
    .toBuffer({ resolveWithObject: true });
  
  const maskData = Buffer.alloc(info.width * info.height);
  
  // Adobe –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
  const colorThreshold = calculateAdobeColorThreshold(targetColor);
  console.log(`üîß ADOBE MASK: –ü–æ—Ä–æ–≥ –¥–ª—è ${targetColor.hex}: ${colorThreshold}`);
  
  let matchedPixels = 0;
  
  for (let i = 0; i < data.length; i += info.channels) {
    const r = data[i];
    const g = data[i + 1]; 
    const b = data[i + 2];
    
    // Adobe –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ —Ü–≤–µ—Ç—É
    const isColorMatch = isAdobeColorMatch([r, g, b], [targetColor.r, targetColor.g, targetColor.b], colorThreshold);
    
    const pixelIndex = Math.floor(i / info.channels);
    
    if (isColorMatch) {
      maskData[pixelIndex] = 255;
      matchedPixels++;
    } else {
      maskData[pixelIndex] = 0;
    }
  }
  
  const coverage = ((matchedPixels / (info.width * info.height)) * 100).toFixed(2);
  console.log(`üìä ADOBE MASK: ${targetColor.hex} –ø–æ–∫—Ä—ã—Ç–∏–µ ${coverage}%`);
  
  // –°–æ–∑–¥–∞–µ–º PNG –º–∞—Å–∫—É
  const maskImage = await sharp(maskData, {
    raw: {
      width: info.width,
      height: info.height,
      channels: 1
    }
  })
  .png()
  .toBuffer();
  
  return {
    maskBuffer: maskImage,
    coverage: parseFloat(coverage),
    width: info.width,
    height: info.height
  };
}

/**
 * Adobe –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ —Ü–≤–µ—Ç–∞
 */
function calculateAdobeColorThreshold(color) {
  const brightness = (color.r * 0.299 + color.g * 0.587 + color.b * 0.114);
  const saturation = (Math.max(color.r, color.g, color.b) - Math.min(color.r, color.g, color.b)) / Math.max(color.r, color.g, color.b, 1);
  
  // Adobe —Ñ–æ—Ä–º—É–ª–∞ –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ø–æ—Ä–æ–≥–∞ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
  let threshold = 60; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥
  
  if (brightness < 50) threshold = 80; // –¢–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ - –µ—â–µ –±–æ–ª—å—à–µ —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  else if (brightness > 200) threshold = 70; // –°–≤–µ—Ç–ª—ã–µ —Ü–≤–µ—Ç–∞ 
  else threshold = 75; // –°—Ä–µ–¥–Ω–∏–µ —Ç–æ–Ω–∞
  
  // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è)
  if (saturation > 0.7) threshold += 20; // –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
  if (saturation < 0.2) threshold += 25; // –ù–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
  
  return threshold;
}

/**
 * Adobe –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
 */
function isAdobeColorMatch(pixel, target, threshold) {
  // Adobe –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ —Ü–≤–µ—Ç–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
  const deltaR = pixel[0] - target[0];
  const deltaG = pixel[1] - target[1];
  const deltaB = pixel[2] - target[2];
  
  // –ü–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ Adobe (–≤–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è RGB)
  const perceptualDistance = Math.sqrt(
    2 * deltaR * deltaR +
    4 * deltaG * deltaG +
    3 * deltaB * deltaB
  );
  
  return perceptualDistance <= threshold;
}

/**
 * ADOBE ILLUSTRATOR TRACE - –≠—Ç–∞–ø 3: –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å–∫–∏ –≤ –∫–æ–Ω—Ç—É—Ä—ã
 */
async function adobeVectorizeColorMask(maskBuffer, color, originalSize) {
  console.log(`üîç ADOBE VECTORIZE: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ ${color.hex}`);
  
  try {
    // Adobe –∏—Å–ø–æ–ª—å–∑—É–µ—Ç potrace –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const potrace = require('potrace');
    
    return new Promise((resolve, reject) => {
      const params = {
        // Adobe Illustrator –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¢–û–õ–°–¢–´–• –∫–æ–Ω—Ç—É—Ä–æ–≤
        threshold: 120,
        optTolerance: 0.4,
        turdSize: 4,
        turnPolicy: potrace.Potrace.TURNPOLICY_MAJORITY,
        alphaMax: 0.8,
        optCurve: true,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
        blackOnWhite: true
      };
      
      potrace.trace(maskBuffer, params, (err, svg) => {
        if (err) {
          console.error(`‚ùå ADOBE VECTORIZE: –û—à–∏–±–∫–∞ ${color.hex}:`, err);
          reject(err);
          return;
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º path –∏–∑ SVG
        const pathMatch = svg.match(/<path[^>]*d="([^"]*)"[^>]*\/>/);
        if (pathMatch) {
          const pathData = pathMatch[1];
          console.log(`‚úÖ ADOBE VECTORIZE: ${color.hex} - ${pathData.length} —Å–∏–º–≤–æ–ª–æ–≤ –ø—É—Ç–∏`);
          resolve({
            pathData,
            color: color.hex,
            originalCoverage: color.percentage
          });
        } else {
          console.log(`‚ö†Ô∏è ADOBE VECTORIZE: ${color.hex} - –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          resolve(null);
        }
      });
    });
  } catch (error) {
    console.error(`‚ùå ADOBE VECTORIZE: –û—à–∏–±–∫–∞ potrace –¥–ª—è ${color.hex}:`, error);
    return null;
  }
}

/**
 * ADOBE ILLUSTRATOR TRACE - –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function adobeImageTrace(imageBuffer, options = {}) {
  console.log(`üé® ADOBE ILLUSTRATOR IMAGE TRACE - –ó–ê–ü–£–°–ö`);
  
  const maxColors = options.maxColors || 5;
  const { width: originalWidth, height: originalHeight } = await sharp(imageBuffer).metadata();
  
  console.log(`üìê ADOBE: –û—Ä–∏–≥–∏–Ω–∞–ª ${originalWidth}x${originalHeight}`);
  
  try {
    // –≠—Ç–∞–ø 1: –¶–≤–µ—Ç–æ–≤–∞—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è K-means
    const colors = await adobeColorQuantization(imageBuffer, maxColors);
    
    if (colors.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–≤–µ—Ç–∞');
    }
    
    console.log(`üé® ADOBE: –û–±—Ä–∞–±–æ—Ç–∫–∞ ${colors.length} —Ü–≤–µ—Ç–æ–≤`);
    
    // –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–æ–∫ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const vectorPaths = [];
    
    for (let i = 0; i < colors.length; i++) {
      const color = colors[i];
      console.log(`\nüîÑ ADOBE: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–∞ ${i + 1}/${colors.length}: ${color.hex}`);
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É
      const maskResult = await createAdobeColorMask(imageBuffer, color);
      
      if (maskResult.coverage < 0.1) {
        console.log(`‚ö†Ô∏è ADOBE: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${color.hex} - –º–∞–ª–æ –ø–æ–∫—Ä—ã—Ç–∏—è (${maskResult.coverage}%)`);
        continue;
      }
      
      // –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º –º–∞—Å–∫—É
      const vectorPath = await adobeVectorizeColorMask(maskResult.maskBuffer, color, {
        width: originalWidth,
        height: originalHeight
      });
      
      if (vectorPath) {
        vectorPaths.push(vectorPath);
        console.log(`‚úÖ ADOBE: ${color.hex} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç`);
      }
    }
    
    console.log(`üìä ADOBE: –ü–æ–ª—É—á–µ–Ω–æ ${vectorPaths.length} –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ø—É—Ç–µ–π`);
    
    // –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ SVG
    const svgContent = createAdobeSVG(vectorPaths, originalWidth, originalHeight);
    
    console.log(`‚úÖ ADOBE ILLUSTRATOR TRACE –ó–ê–í–ï–†–®–ï–ù: ${svgContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    return {
      success: true,
      svgContent,
      colorsUsed: vectorPaths.length,
      quality: 'Adobe Illustrator Image Trace',
      algorithm: 'Limited Color K-means + Potrace'
    };
    
  } catch (error) {
    console.error(`‚ùå ADOBE ILLUSTRATOR TRACE –û–®–ò–ë–ö–ê:`, error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ SVG –≤ —Å—Ç–∏–ª–µ Adobe Illustrator - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 * Adobe Illustrator —Å–æ–∑–¥–∞–µ—Ç –ó–ê–ü–û–õ–ù–ï–ù–ù–´–ï –æ–±–ª–∞—Å—Ç–∏, –Ω–µ –∫–æ–Ω—Ç—É—Ä—ã
 */
function createAdobeSVG(vectorPaths, width, height) {
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ (–∫–∞–∫ –≤ Adobe)
  const targetSize = Math.max(width, height, 400);
  const scaleX = targetSize / width;
  const scaleY = targetSize / height;
  
  let svg = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${targetSize}" height="${targetSize}" viewBox="0 0 ${targetSize} ${targetSize}" xmlns="http://www.w3.org/2000/svg">
  <title>Adobe Illustrator Image Trace (${vectorPaths.length} colors)</title>
  <desc>Adobe Compatible Limited Color Vector - Filled Shapes</desc>
  <defs>
    <style>
      .adobe-shape { 
        fill-rule: evenodd; 
        stroke: none; 
        vector-effect: non-scaling-stroke; 
      }
    </style>
  </defs>
`;

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Ç–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É –æ–±–ª–∞—Å—Ç–∏ (–±–æ–ª—å—à–∏–µ –≤–Ω–∏–∑—É)
  const sortedPaths = vectorPaths.sort((a, b) => {
    const aSize = parseFloat(a.originalCoverage) || 0;
    const bSize = parseFloat(b.originalCoverage) || 0;
    return bSize - aSize; // –û—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
  });

  sortedPaths.forEach((path, index) => {
    // Adobe —Å—Ç–∏–ª—å: –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã —Å —á–µ—Ç–∫–∏–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
    svg += `  <g id="adobe-color-${index + 1}" class="adobe-layer">
    <path d="${path.pathData}" 
          fill="${path.color}" 
          class="adobe-shape"
          transform="scale(${scaleX}, ${scaleY})"
          opacity="1"/>
  </g>
`;
  });

  svg += `</svg>`;
  
  return svg;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
 */
function euclideanDistance(a, b) {
  return Math.sqrt(
    Math.pow(a[0] - b[0], 2) +
    Math.pow(a[1] - b[1], 2) +
    Math.pow(a[2] - b[2], 2)
  );
}

module.exports = {
  adobeImageTrace,
  adobeColorQuantization,
  createAdobeColorMask,
  adobeVectorizeColorMask
};